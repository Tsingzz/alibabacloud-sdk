import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'linkvisual.aliyuncs.com',
    ap-northeast-2-pop = 'linkvisual.aliyuncs.com',
    ap-south-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-1 = 'linkvisual.aliyuncs.com',
    ap-southeast-2 = 'linkvisual.aliyuncs.com',
    ap-southeast-3 = 'linkvisual.aliyuncs.com',
    ap-southeast-5 = 'linkvisual.aliyuncs.com',
    cn-beijing = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-finance-pop = 'linkvisual.aliyuncs.com',
    cn-beijing-gov-1 = 'linkvisual.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkvisual.aliyuncs.com',
    cn-chengdu = 'linkvisual.aliyuncs.com',
    cn-edge-1 = 'linkvisual.aliyuncs.com',
    cn-fujian = 'linkvisual.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-finance = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkvisual.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkvisual.aliyuncs.com',
    cn-hongkong = 'linkvisual.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkvisual.aliyuncs.com',
    cn-huhehaote = 'linkvisual.aliyuncs.com',
    cn-north-2-gov-1 = 'linkvisual.aliyuncs.com',
    cn-qingdao = 'linkvisual.aliyuncs.com',
    cn-qingdao-nebula = 'linkvisual.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkvisual.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shanghai-inner = 'linkvisual.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen = 'linkvisual.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-inner = 'linkvisual.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkvisual.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkvisual.aliyuncs.com',
    cn-wuhan = 'linkvisual.aliyuncs.com',
    cn-yushanfang = 'linkvisual.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou = 'linkvisual.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkvisual.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkvisual.aliyuncs.com',
    eu-central-1 = 'linkvisual.aliyuncs.com',
    eu-west-1 = 'linkvisual.aliyuncs.com',
    eu-west-1-oxs = 'linkvisual.aliyuncs.com',
    me-east-1 = 'linkvisual.aliyuncs.com',
    rus-west-1-pop = 'linkvisual.aliyuncs.com',
    us-east-1 = 'linkvisual.aliyuncs.com',
    us-west-1 = 'linkvisual.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('linkvisual', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model CreateDevicePurifyJobByPlanIdRequest = {
  planId: string(name='PlanId', description='planId'),
  utc: long(name='Utc', description='utc'),
}

model CreateDevicePurifyJobByPlanIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createDevicePurifyJobByPlanIdWithOptions(request: CreateDevicePurifyJobByPlanIdRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyJobByPlanIdResponse {
  Util.validateModel(request);
  return doRequest('CreateDevicePurifyJobByPlanId', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createDevicePurifyJobByPlanId(request: CreateDevicePurifyJobByPlanIdRequest): CreateDevicePurifyJobByPlanIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyJobByPlanIdWithOptions(request, runtime);
}

model RemoveDevicePurifyPlanRequest = {
  planId: string(name='PlanId', description='planId'),
}

model RemoveDevicePurifyPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function removeDevicePurifyPlanWithOptions(request: RemoveDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): RemoveDevicePurifyPlanResponse {
  Util.validateModel(request);
  return doRequest('RemoveDevicePurifyPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function removeDevicePurifyPlan(request: RemoveDevicePurifyPlanRequest): RemoveDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeDevicePurifyPlanWithOptions(request, runtime);
}

model UpdateDevicePurifyPlanRequest = {
  planId: string(name='PlanId', description='planId'),
  startTime: integer(name='StartTime', description='startTime'),
  endTime: integer(name='EndTime', description='endTime'),
}

model UpdateDevicePurifyPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function updateDevicePurifyPlanWithOptions(request: UpdateDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): UpdateDevicePurifyPlanResponse {
  Util.validateModel(request);
  return doRequest('UpdateDevicePurifyPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function updateDevicePurifyPlan(request: UpdateDevicePurifyPlanRequest): UpdateDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDevicePurifyPlanWithOptions(request, runtime);
}

model CreateDevicePurifyPlanRequest = {
  iotId: string(name='IotId', description='iotId'),
  startTime: integer(name='StartTime', description='startTime'),
  endTime: integer(name='EndTime', description='endTime'),
}

model CreateDevicePurifyPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createDevicePurifyPlanWithOptions(request: CreateDevicePurifyPlanRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyPlanResponse {
  Util.validateModel(request);
  return doRequest('CreateDevicePurifyPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createDevicePurifyPlan(request: CreateDevicePurifyPlanRequest): CreateDevicePurifyPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyPlanWithOptions(request, runtime);
}

model QueryDevicePurifyPlanByPlanIdRequest = {
  planId: string(name='PlanId', description='planId'),
}

model QueryDevicePurifyPlanByPlanIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    planId: string(name='PlanId', description='planId'),
    tenantId: string(name='TenantId', description='tenantId'),
    userId: string(name='UserId', description='userId'),
    productKey: string(name='ProductKey', description='productKey'),
    deviceName: string(name='DeviceName', description='deviceName'),
    iotId: string(name='IotId', description='iotId'),
    startTime: integer(name='StartTime', description='startTime'),
    endTime: integer(name='EndTime', description='endTime'),
  }(name='Data', description='data'),
}

async function queryDevicePurifyPlanByPlanIdWithOptions(request: QueryDevicePurifyPlanByPlanIdRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyPlanByPlanIdResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicePurifyPlanByPlanId', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDevicePurifyPlanByPlanId(request: QueryDevicePurifyPlanByPlanIdRequest): QueryDevicePurifyPlanByPlanIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyPlanByPlanIdWithOptions(request, runtime);
}

model CreateDevicePurifyJobRequest = {
  iotId: string(name='IotId', description='iotId'),
  startTime: long(name='StartTime', description='startTime'),
  endTime: long(name='EndTime', description='endTime'),
}

model CreateDevicePurifyJobResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createDevicePurifyJobWithOptions(request: CreateDevicePurifyJobRequest, runtime: Util.RuntimeOptions): CreateDevicePurifyJobResponse {
  Util.validateModel(request);
  return doRequest('CreateDevicePurifyJob', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createDevicePurifyJob(request: CreateDevicePurifyJobRequest): CreateDevicePurifyJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDevicePurifyJobWithOptions(request, runtime);
}

model GetDevicePurifyJobByJobIdRequest = {
  jobId: string(name='JobId', description='jobId'),
}

model GetDevicePurifyJobByJobIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    jobId: string(name='JobId', description='jobId'),
    tenantId: string(name='TenantId', description='tenantId'),
    userId: string(name='UserId', description='userId'),
    productKey: string(name='ProductKey', description='productKey'),
    deviceName: string(name='DeviceName', description='deviceName'),
    iotId: string(name='IotId', description='iotId'),
    startTime: long(name='StartTime', description='startTime'),
    endTime: long(name='EndTime', description='endTime'),
    planId: string(name='PlanId', description='planId'),
    purifyRecordNameUrl: string(name='PurifyRecordNameUrl', description='purifyRecordNameUrl'),
    purifyRecordIndexUrl: string(name='PurifyRecordIndexUrl', description='purifyRecordIndexUrl'),
    status: integer(name='Status', description='status'),
  }(name='Data', description='data'),
}

async function getDevicePurifyJobByJobIdWithOptions(request: GetDevicePurifyJobByJobIdRequest, runtime: Util.RuntimeOptions): GetDevicePurifyJobByJobIdResponse {
  Util.validateModel(request);
  return doRequest('GetDevicePurifyJobByJobId', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function getDevicePurifyJobByJobId(request: GetDevicePurifyJobByJobIdRequest): GetDevicePurifyJobByJobIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDevicePurifyJobByJobIdWithOptions(request, runtime);
}

model QueryDevicePurifyJobsRequest = {
  iotId: string(name='IotId', description='iotId'),
  pageSize: integer(name='PageSize', description='pageSize'),
  currentPage: integer(name='CurrentPage', description='currentPage'),
}

model QueryDevicePurifyJobsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageCount: integer(name='PageCount', description='pageCount'),
    currentPage: integer(name='CurrentPage', description='currentPage'),
    pageSize: integer(name='PageSize', description='pageSize'),
    list: [
      {
        planId: string(name='PlanId', description='planId'),
        tenantId: string(name='TenantId', description='tenantId'),
        userId: string(name='UserId', description='userId'),
        productKey: string(name='ProductKey', description='productKey'),
        deviceName: string(name='DeviceName', description='deviceName'),
        iotId: string(name='IotId', description='iotId'),
        startTime: long(name='StartTime', description='startTime'),
        endTime: long(name='EndTime', description='endTime'),
        jobId: string(name='JobId', description='jobId'),
        purifyRecordNameUrl: string(name='PurifyRecordNameUrl', description='purifyRecordNameUrl'),
        purifyRecordIndexUrl: string(name='PurifyRecordIndexUrl', description='purifyRecordIndexUrl'),
        status: integer(name='Status', description='status'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryDevicePurifyJobsWithOptions(request: QueryDevicePurifyJobsRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyJobsResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicePurifyJobs', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDevicePurifyJobs(request: QueryDevicePurifyJobsRequest): QueryDevicePurifyJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyJobsWithOptions(request, runtime);
}

model QueryDevicePurifyPlansRequest = {
  iotId: string(name='IotId', description='iotId'),
  pageSize: integer(name='PageSize', description='pageSize'),
  currentPage: integer(name='CurrentPage', description='currentPage'),
}

model QueryDevicePurifyPlansResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageCount: integer(name='PageCount', description='pageCount'),
    currentPage: integer(name='CurrentPage', description='currentPage'),
    pageSize: integer(name='PageSize', description='pageSize'),
    list: [
      {
        planId: string(name='PlanId', description='planId'),
        tenantId: string(name='TenantId', description='tenantId'),
        userId: string(name='UserId', description='userId'),
        productKey: string(name='ProductKey', description='productKey'),
        deviceName: string(name='DeviceName', description='deviceName'),
        iotId: string(name='IotId', description='iotId'),
        startTime: integer(name='StartTime', description='startTime'),
        endTime: integer(name='EndTime', description='endTime'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryDevicePurifyPlansWithOptions(request: QueryDevicePurifyPlansRequest, runtime: Util.RuntimeOptions): QueryDevicePurifyPlansResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicePurifyPlans', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDevicePurifyPlans(request: QueryDevicePurifyPlansRequest): QueryDevicePurifyPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePurifyPlansWithOptions(request, runtime);
}

model StopTriggeredRecordRequest = {
  iotId: string(name='IotId', description='iotId'),
  recordId: string(name='RecordId', description='recordId'),
}

model StopTriggeredRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function stopTriggeredRecordWithOptions(request: StopTriggeredRecordRequest, runtime: Util.RuntimeOptions): StopTriggeredRecordResponse {
  Util.validateModel(request);
  return doRequest('StopTriggeredRecord', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function stopTriggeredRecord(request: StopTriggeredRecordRequest): StopTriggeredRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopTriggeredRecordWithOptions(request, runtime);
}

model QueryRecordByRecordIdRequest = {
  iotId: string(name='IotId', description='iotId'),
  recordId: string(name='RecordId', description='recordId'),
}

model QueryRecordByRecordIdResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: [
    {
      fileName: string(name='FileName', description='fileName'),
      vodUrl: string(name='VodUrl', description='vodUrl'),
      beginTime: string(name='BeginTime', description='beginTime'),
      endTime: string(name='EndTime', description='endTime'),
    }
  ](name='Data', description='data'),
}

async function queryRecordByRecordIdWithOptions(request: QueryRecordByRecordIdRequest, runtime: Util.RuntimeOptions): QueryRecordByRecordIdResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordByRecordId', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordByRecordId(request: QueryRecordByRecordIdRequest): QueryRecordByRecordIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordByRecordIdWithOptions(request, runtime);
}

model QueryDeviceVodUrlRequest = {
  iotId: string(name='IotId', description='iotId'),
  fileName: string(name='FileName', description='fileName'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', description='shouldEncrypt'),
  encryptType?: integer(name='EncryptType', description='encryptType'),
  scheme?: string(name='Scheme', description='scheme'),
  seekTime?: integer(name='SeekTime', description='seekTime'),
}

model QueryDeviceVodUrlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  decryptKey: string(name='DecryptKey', description='encryptKey'),
  data: {
    vodUrl: string(name='VodUrl', description='vodUrl'),
  }(name='Data', description='data'),
}

async function queryDeviceVodUrlWithOptions(request: QueryDeviceVodUrlRequest, runtime: Util.RuntimeOptions): QueryDeviceVodUrlResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceVodUrl', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceVodUrl(request: QueryDeviceVodUrlRequest): QueryDeviceVodUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceVodUrlWithOptions(request, runtime);
}

model QueryTimeTemplateDetailRequest = {
  templateId: string(name='TemplateId', description='templateId'),
}

model QueryTimeTemplateDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    default: integer(name='Default', description='isDefault'),
    name: string(name='Name', description='name'),
    templateId: string(name='TemplateId', description='templateId'),
    allDay: integer(name='AllDay', description='isAllDay'),
    timeSectionList: [
      {
        dayOfWeek: integer(name='DayOfWeek', description='mDay'),
        begin: integer(name='Begin', description='begin'),
        end: integer(name='End', description='end'),
      }
    ](name='TimeSectionList', description='timeSectionList'),
  }(name='Data', description='data'),
}

async function queryTimeTemplateDetailWithOptions(request: QueryTimeTemplateDetailRequest, runtime: Util.RuntimeOptions): QueryTimeTemplateDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryTimeTemplateDetail', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryTimeTemplateDetail(request: QueryTimeTemplateDetailRequest): QueryTimeTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTimeTemplateDetailWithOptions(request, runtime);
}

model UpdateTimeTemplateRequest = {
  templateId: string(name='TemplateId', description='templateId'),
  name?: string(name='Name', description='name'),
  allDay: integer(name='AllDay', description='allDay'),
  timeSections?: [
    {
      dayOfWeek?: integer(name='DayOfWeek', description='dayOfWeek'),
      begin?: integer(name='Begin', description='begin'),
      end?: integer(name='End', description='end'),
    }
  ](name='TimeSections', description='timeSections'),
}

model UpdateTimeTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function updateTimeTemplateWithOptions(request: UpdateTimeTemplateRequest, runtime: Util.RuntimeOptions): UpdateTimeTemplateResponse {
  Util.validateModel(request);
  return doRequest('UpdateTimeTemplate', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function updateTimeTemplate(request: UpdateTimeTemplateRequest): UpdateTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTimeTemplateWithOptions(request, runtime);
}

model CreateTimeTemplateRequest = {
  name: string(name='Name', description='name'),
  allDay: integer(name='AllDay', description='allDay'),
  timeSections?: [
    {
      dayOfWeek?: integer(name='DayOfWeek', description='dayOfWeek'),
      begin?: integer(name='Begin', description='begin'),
      end?: integer(name='End', description='end'),
    }
  ](name='TimeSections', description='timeSections'),
}

model CreateTimeTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createTimeTemplateWithOptions(request: CreateTimeTemplateRequest, runtime: Util.RuntimeOptions): CreateTimeTemplateResponse {
  Util.validateModel(request);
  return doRequest('CreateTimeTemplate', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createTimeTemplate(request: CreateTimeTemplateRequest): CreateTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTimeTemplateWithOptions(request, runtime);
}

model StopLiveStreamingRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
}

model StopLiveStreamingResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function stopLiveStreamingWithOptions(request: StopLiveStreamingRequest, runtime: Util.RuntimeOptions): StopLiveStreamingResponse {
  Util.validateModel(request);
  return doRequest('StopLiveStreaming', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function stopLiveStreaming(request: StopLiveStreamingRequest): StopLiveStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopLiveStreamingWithOptions(request, runtime);
}

model SetDevicePictureLifeCycleRequest = {
  iotId: string(name='IotId', description='iotId'),
  day: integer(name='Day', description='day'),
}

model SetDevicePictureLifeCycleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function setDevicePictureLifeCycleWithOptions(request: SetDevicePictureLifeCycleRequest, runtime: Util.RuntimeOptions): SetDevicePictureLifeCycleResponse {
  Util.validateModel(request);
  return doRequest('SetDevicePictureLifeCycle', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function setDevicePictureLifeCycle(request: SetDevicePictureLifeCycleRequest): SetDevicePictureLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDevicePictureLifeCycleWithOptions(request, runtime);
}

model QueryDeviceRecordLifeCycleRequest = {
  deviceList: [ string ](name='DeviceList', description='deviceList'),
}

model QueryDeviceRecordLifeCycleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: integer(name='Code', description='code'),
  data: [
    {
      iotId: string(name='IotId', description='iotId'),
      day: integer(name='Day', description='day'),
    }
  ](name='Data', description='data'),
}

async function queryDeviceRecordLifeCycleWithOptions(request: QueryDeviceRecordLifeCycleRequest, runtime: Util.RuntimeOptions): QueryDeviceRecordLifeCycleResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceRecordLifeCycle', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceRecordLifeCycle(request: QueryDeviceRecordLifeCycleRequest): QueryDeviceRecordLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceRecordLifeCycleWithOptions(request, runtime);
}

model SetDeviceRecordLifeCycleRequest = {
  iotId: string(name='IotId', description='iotId'),
  day: integer(name='Day', description='day'),
}

model SetDeviceRecordLifeCycleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function setDeviceRecordLifeCycleWithOptions(request: SetDeviceRecordLifeCycleRequest, runtime: Util.RuntimeOptions): SetDeviceRecordLifeCycleResponse {
  Util.validateModel(request);
  return doRequest('SetDeviceRecordLifeCycle', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function setDeviceRecordLifeCycle(request: SetDeviceRecordLifeCycleRequest): SetDeviceRecordLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDeviceRecordLifeCycleWithOptions(request, runtime);
}

model QueryLiveStreamingRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', description='shouldEncrypt'),
  encryptType?: integer(name='EncryptType', description='encryptType'),
  scheme?: string(name='Scheme', description='scheme'),
}

model QueryLiveStreamingResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    path: string(name='Path', description='path'),
    decryptKey: string(name='DecryptKey', description='decryptKey'),
  }(name='Data', description='data'),
}

async function queryLiveStreamingWithOptions(request: QueryLiveStreamingRequest, runtime: Util.RuntimeOptions): QueryLiveStreamingResponse {
  Util.validateModel(request);
  return doRequest('QueryLiveStreaming', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryLiveStreaming(request: QueryLiveStreamingRequest): QueryLiveStreamingResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryLiveStreamingWithOptions(request, runtime);
}

model QueryDevicePictureLifeCycleRequest = {
  iotId: string(name='IotId', description='iotId'),
}

model QueryDevicePictureLifeCycleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    iotId: string(name='IotId', description='iotId'),
    day: integer(name='Day', description='quotaDay'),
  }(name='Data', description='data'),
}

async function queryDevicePictureLifeCycleWithOptions(request: QueryDevicePictureLifeCycleRequest, runtime: Util.RuntimeOptions): QueryDevicePictureLifeCycleResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicePictureLifeCycle', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDevicePictureLifeCycle(request: QueryDevicePictureLifeCycleRequest): QueryDevicePictureLifeCycleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePictureLifeCycleWithOptions(request, runtime);
}

model QueryTimeTemplateRequest = {
  pageSize?: integer(name='PageSize', description='pageSize'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
}

model QueryTimeTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageCount: integer(name='PageCount', description='pageCount'),
    page: integer(name='Page', description='currentPage'),
    pageSize: integer(name='PageSize', description='pageSize'),
    list: [
      {
        default: integer(name='Default', description='isDefault'),
        name: string(name='Name', description='name'),
        templateId: string(name='TemplateId', description='templateId'),
        allDay: integer(name='AllDay', description='isAllDay'),
        timeSectionList: [
          {
            dayOfWeek: integer(name='DayOfWeek', description='mDay'),
            begin: integer(name='Begin', description='begin'),
            end: integer(name='End', description='end'),
          }
        ](name='TimeSectionList', description='timeSectionList'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryTimeTemplateWithOptions(request: QueryTimeTemplateRequest, runtime: Util.RuntimeOptions): QueryTimeTemplateResponse {
  Util.validateModel(request);
  return doRequest('QueryTimeTemplate', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryTimeTemplate(request: QueryTimeTemplateRequest): QueryTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTimeTemplateWithOptions(request, runtime);
}

model DeleteTimeTemplateRequest = {
  templateId: string(name='TemplateId', description='templateId'),
}

model DeleteTimeTemplateResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function deleteTimeTemplateWithOptions(request: DeleteTimeTemplateRequest, runtime: Util.RuntimeOptions): DeleteTimeTemplateResponse {
  Util.validateModel(request);
  return doRequest('DeleteTimeTemplate', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function deleteTimeTemplate(request: DeleteTimeTemplateRequest): DeleteTimeTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTimeTemplateWithOptions(request, runtime);
}

model CreateRecordPlanRequest = {
  name: string(name='Name', description='name'),
  templateId: string(name='TemplateId', description='templateId'),
}

model CreateRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createRecordPlanWithOptions(request: CreateRecordPlanRequest, runtime: Util.RuntimeOptions): CreateRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('CreateRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createRecordPlan(request: CreateRecordPlanRequest): CreateRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRecordPlanWithOptions(request, runtime);
}

model UpdateRecordPlanRequest = {
  planId: string(name='PlanId', description='planId'),
  name: string(name='Name', description='name'),
  templateId: string(name='TemplateId', description='templateId'),
}

model UpdateRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function updateRecordPlanWithOptions(request: UpdateRecordPlanRequest, runtime: Util.RuntimeOptions): UpdateRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('UpdateRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function updateRecordPlan(request: UpdateRecordPlanRequest): UpdateRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRecordPlanWithOptions(request, runtime);
}

model QueryRecordPlansRequest = {
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryRecordPlansResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageSize: integer(name='PageSize', description='pageSize'),
    page: integer(name='Page', description='currentPage'),
    pageCount: integer(name='PageCount', description='pageCount'),
    list: [
      {
        planId: string(name='PlanId', description='planId'),
        name: string(name='Name', description='name'),
        templateId: string(name='TemplateId', description='templateId'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryRecordPlansWithOptions(request: QueryRecordPlansRequest, runtime: Util.RuntimeOptions): QueryRecordPlansResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordPlans', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordPlans(request: QueryRecordPlansRequest): QueryRecordPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlansWithOptions(request, runtime);
}

model QueryRecordPlanDetailRequest = {
  planId: string(name='PlanId', description='planId'),
}

model QueryRecordPlanDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    planId: string(name='PlanId', description='planId'),
    name: string(name='Name', description='name'),
    templateId: string(name='TemplateId', description='templateId'),
    templateInfo: {
      templateId: string(name='TemplateId', description='templateId'),
      name: string(name='Name', description='name'),
      default: integer(name='Default', description='isDefault'),
      allDay: integer(name='AllDay', description='isAllDay'),
      timeSectionList: [
        {
          dayOfWeek: integer(name='DayOfWeek', description='mDay'),
          begin: integer(name='Begin', description='begin'),
          end: integer(name='End', description='end'),
        }
      ](name='TimeSectionList', description='timeSectionList'),
    }(name='TemplateInfo', description='timeTemplateDTO'),
  }(name='Data', description='data'),
}

async function queryRecordPlanDetailWithOptions(request: QueryRecordPlanDetailRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordPlanDetail', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordPlanDetail(request: QueryRecordPlanDetailRequest): QueryRecordPlanDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDetailWithOptions(request, runtime);
}

model DeleteRecordPlanRequest = {
  planId: string(name='PlanId', description='planId'),
}

model DeleteRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function deleteRecordPlanWithOptions(request: DeleteRecordPlanRequest, runtime: Util.RuntimeOptions): DeleteRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('DeleteRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function deleteRecordPlan(request: DeleteRecordPlanRequest): DeleteRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordPlanWithOptions(request, runtime);
}

model AddRecordPlanDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  planId: string(name='PlanId', description='planId'),
  streamType: integer(name='StreamType', description='streamType'),
}

model AddRecordPlanDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function addRecordPlanDeviceWithOptions(request: AddRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): AddRecordPlanDeviceResponse {
  Util.validateModel(request);
  return doRequest('AddRecordPlanDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function addRecordPlanDevice(request: AddRecordPlanDeviceRequest): AddRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addRecordPlanDeviceWithOptions(request, runtime);
}

model DeleteRecordPlanDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType: integer(name='StreamType', description='streamType'),
}

model DeleteRecordPlanDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function deleteRecordPlanDeviceWithOptions(request: DeleteRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): DeleteRecordPlanDeviceResponse {
  Util.validateModel(request);
  return doRequest('DeleteRecordPlanDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function deleteRecordPlanDevice(request: DeleteRecordPlanDeviceRequest): DeleteRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRecordPlanDeviceWithOptions(request, runtime);
}

model QueryRecordPlanDeviceByPlanRequest = {
  planId: string(name='PlanId', description='planId'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryRecordPlanDeviceByPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageCount: integer(name='PageCount', description='pageCount'),
    page: integer(name='Page', description='currentPage'),
    pageSize: integer(name='PageSize', description='pageSize'),
    list: [
      {
        iotId: string(name='IotId', description='iotId'),
        streamType: integer(name='StreamType', description='streamType'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryRecordPlanDeviceByPlanWithOptions(request: QueryRecordPlanDeviceByPlanRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDeviceByPlanResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordPlanDeviceByPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordPlanDeviceByPlan(request: QueryRecordPlanDeviceByPlanRequest): QueryRecordPlanDeviceByPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDeviceByPlanWithOptions(request, runtime);
}

model QueryEventRecordPlansRequest = {
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryEventRecordPlansResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageSize: integer(name='PageSize', description='pageSize'),
    page: integer(name='Page', description='currentPage'),
    pageCount: integer(name='PageCount', description='pageCount'),
    list: [
      {
        eventType: string(name='EventType', description='eventTypeList'),
        planId: string(name='PlanId', description='planId'),
        name: string(name='Name', description='name'),
        templateId: string(name='TemplateId', description='templateId'),
        preRecordDuration: integer(name='PreRecordDuration', description='preRecordDuration'),
        recordDuration: integer(name='RecordDuration', description='recordDuration'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryEventRecordPlansWithOptions(request: QueryEventRecordPlansRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlansResponse {
  Util.validateModel(request);
  return doRequest('QueryEventRecordPlans', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryEventRecordPlans(request: QueryEventRecordPlansRequest): QueryEventRecordPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlansWithOptions(request, runtime);
}

model DeleteEventRecordPlanRequest = {
  planId: string(name='PlanId', description='planId'),
}

model DeleteEventRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function deleteEventRecordPlanWithOptions(request: DeleteEventRecordPlanRequest, runtime: Util.RuntimeOptions): DeleteEventRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('DeleteEventRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function deleteEventRecordPlan(request: DeleteEventRecordPlanRequest): DeleteEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventRecordPlanWithOptions(request, runtime);
}

model QueryEventRecordPlanDetailRequest = {
  planId: string(name='PlanId', description='planId'),
}

model QueryEventRecordPlanDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    preRecordDuration: integer(name='PreRecordDuration', description='preRecordDuration'),
    recordDuration: integer(name='RecordDuration', description='recordDuration'),
    planId: string(name='PlanId', description='planId'),
    name: string(name='Name', description='name'),
    templateId: string(name='TemplateId', description='templateId'),
    templateInfo: {
      templateId: string(name='TemplateId', description='templateId'),
      name: string(name='Name', description='name'),
      default: integer(name='Default', description='isDefault'),
      allDay: integer(name='AllDay', description='isAllDay'),
      timeSectionList: [
        {
          dayOfWeek: integer(name='DayOfWeek', description='mDay'),
          begin: integer(name='Begin', description='begin'),
          end: integer(name='End', description='end'),
        }
      ](name='TimeSectionList', description='timeSectionList'),
    }(name='TemplateInfo', description='timeTemplateDTO'),
  }(name='Data', description='data'),
}

async function queryEventRecordPlanDetailWithOptions(request: QueryEventRecordPlanDetailRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDetailResponse {
  Util.validateModel(request);
  return doRequest('QueryEventRecordPlanDetail', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryEventRecordPlanDetail(request: QueryEventRecordPlanDetailRequest): QueryEventRecordPlanDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDetailWithOptions(request, runtime);
}

model AddEventRecordPlanDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  planId: string(name='PlanId', description='planId'),
  streamType?: integer(name='StreamType', description='streamType'),
}

model AddEventRecordPlanDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function addEventRecordPlanDeviceWithOptions(request: AddEventRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): AddEventRecordPlanDeviceResponse {
  Util.validateModel(request);
  return doRequest('AddEventRecordPlanDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function addEventRecordPlanDevice(request: AddEventRecordPlanDeviceRequest): AddEventRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEventRecordPlanDeviceWithOptions(request, runtime);
}

model DeleteEventRecordPlanDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
}

model DeleteEventRecordPlanDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function deleteEventRecordPlanDeviceWithOptions(request: DeleteEventRecordPlanDeviceRequest, runtime: Util.RuntimeOptions): DeleteEventRecordPlanDeviceResponse {
  Util.validateModel(request);
  return doRequest('DeleteEventRecordPlanDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function deleteEventRecordPlanDevice(request: DeleteEventRecordPlanDeviceRequest): DeleteEventRecordPlanDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEventRecordPlanDeviceWithOptions(request, runtime);
}

model QueryEventRecordPlanDeviceByDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
}

model QueryEventRecordPlanDeviceByDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    planId: string(name='PlanId', description='planId'),
    name: string(name='Name', description='name'),
    templateId: string(name='TemplateId', description='templateId'),
    preRecordDuration: integer(name='PreRecordDuration', description='preRecordDuration'),
    recordDuration: integer(name='RecordDuration', description='recordDuration'),
    templateInfo: {
      templateId: string(name='TemplateId', description='templateId'),
      name: string(name='Name', description='name'),
      default: integer(name='Default', description='isDefault'),
      allDay: integer(name='AllDay', description='isAllDay'),
      timeSectionList: [
        {
          dayOfWeek: integer(name='DayOfWeek', description='mDay'),
          begin: integer(name='Begin', description='begin'),
          end: integer(name='End', description='end'),
        }
      ](name='TimeSectionList', description='timeSectionList'),
    }(name='TemplateInfo', description='timeTemplateDTO'),
  }(name='Data', description='data'),
}

async function queryEventRecordPlanDeviceByDeviceWithOptions(request: QueryEventRecordPlanDeviceByDeviceRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDeviceByDeviceResponse {
  Util.validateModel(request);
  return doRequest('QueryEventRecordPlanDeviceByDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryEventRecordPlanDeviceByDevice(request: QueryEventRecordPlanDeviceByDeviceRequest): QueryEventRecordPlanDeviceByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDeviceByDeviceWithOptions(request, runtime);
}

model TriggerRecordRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
  preRecordDuration?: integer(name='PreRecordDuration', description='preRecordDuration'),
  recordDuration: integer(name='RecordDuration', description='recordDuration'),
}

model TriggerRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function triggerRecordWithOptions(request: TriggerRecordRequest, runtime: Util.RuntimeOptions): TriggerRecordResponse {
  Util.validateModel(request);
  return doRequest('TriggerRecord', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function triggerRecord(request: TriggerRecordRequest): TriggerRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerRecordWithOptions(request, runtime);
}

model QueryDeviceEventRequest = {
  iotId: string(name='IotId', description='iotId'),
  eventType?: integer(name='EventType', description='eventType'),
  beginTime: long(name='BeginTime', description='beginTime'),
  endTime: long(name='EndTime', description='endTime'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryDeviceEventResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageSize: integer(name='PageSize', description='pageSize'),
    page: integer(name='Page', description='currentPage'),
    pageCount: integer(name='PageCount', description='pageCount'),
    list: [
      {
        eventId: string(name='EventId', description='eventId'),
        eventTime: string(name='EventTime', description='eventTime'),
        eventType: integer(name='EventType', description='eventType'),
        eventDesc: string(name='EventDesc', description='eventDesc'),
        eventPicId: string(name='EventPicId', description='eventPicId'),
        eventData: string(name='EventData', description='eventData'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryDeviceEventWithOptions(request: QueryDeviceEventRequest, runtime: Util.RuntimeOptions): QueryDeviceEventResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceEvent', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceEvent(request: QueryDeviceEventRequest): QueryDeviceEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventWithOptions(request, runtime);
}

model QueryDeviceEventPictureRequest = {
  iotId: string(name='IotId', description='iotId'),
  eventId: string(name='EventId', description='eventId'),
}

model QueryDeviceEventPictureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: integer(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function queryDeviceEventPictureWithOptions(request: QueryDeviceEventPictureRequest, runtime: Util.RuntimeOptions): QueryDeviceEventPictureResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceEventPicture', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceEventPicture(request: QueryDeviceEventPictureRequest): QueryDeviceEventPictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventPictureWithOptions(request, runtime);
}

model QueryDevicePictureFileRequest = {
  iotId: string(name='IotId', description='iotId'),
  captureId: string(name='CaptureId', description='captureId'),
  pictureType?: integer(name='PictureType', description='pictureType'),
}

model QueryDevicePictureFileResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    iotId: string(name='IotId', description='iotId'),
    picCreateTime: long(name='PicCreateTime', description='picCreateTime'),
    picId: string(name='PicId', description='picId'),
    picUrl: string(name='PicUrl', description='picUrl'),
    thumbUrl: string(name='ThumbUrl', description='thumbUrl'),
  }(name='Data', description='data'),
}

async function queryDevicePictureFileWithOptions(request: QueryDevicePictureFileRequest, runtime: Util.RuntimeOptions): QueryDevicePictureFileResponse {
  Util.validateModel(request);
  return doRequest('QueryDevicePictureFile', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDevicePictureFile(request: QueryDevicePictureFileRequest): QueryDevicePictureFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDevicePictureFileWithOptions(request, runtime);
}

model QueryMonthRecordRequest = {
  iotId: string(name='IotId', description='iotId'),
  month: string(name='Month', description='month'),
}

model QueryMonthRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function queryMonthRecordWithOptions(request: QueryMonthRecordRequest, runtime: Util.RuntimeOptions): QueryMonthRecordResponse {
  Util.validateModel(request);
  return doRequest('QueryMonthRecord', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryMonthRecord(request: QueryMonthRecordRequest): QueryMonthRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthRecordWithOptions(request, runtime);
}

model QueryRecordPlanDeviceByDeviceRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType: integer(name='StreamType', description='streamType'),
}

model QueryRecordPlanDeviceByDeviceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    planId: string(name='PlanId', description='planId'),
    name: string(name='Name', description='name'),
    templateId: string(name='TemplateId', description='templateId'),
    templateInfo: {
      templateId: string(name='TemplateId', description='templateId'),
      name: string(name='Name', description='name'),
      default: integer(name='Default', description='isDefault'),
      allDay: integer(name='AllDay', description='isAllDay'),
      timeSectionList: [
        {
          dayOfWeek: integer(name='DayOfWeek', description='mDay'),
          begin: integer(name='Begin', description='begin'),
          end: integer(name='End', description='end'),
        }
      ](name='TimeSectionList', description='timeSectionList'),
    }(name='TemplateInfo', description='timeTemplateDTO'),
  }(name='Data', description='data'),
}

async function queryRecordPlanDeviceByDeviceWithOptions(request: QueryRecordPlanDeviceByDeviceRequest, runtime: Util.RuntimeOptions): QueryRecordPlanDeviceByDeviceResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordPlanDeviceByDevice', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordPlanDeviceByDevice(request: QueryRecordPlanDeviceByDeviceRequest): QueryRecordPlanDeviceByDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordPlanDeviceByDeviceWithOptions(request, runtime);
}

model UpdateEventRecordPlanRequest = {
  planId: string(name='PlanId', description='planId'),
  name: string(name='Name', description='name'),
  eventTypes?: string(name='EventTypes', description='eventTypes'),
  preRecordDuration?: integer(name='PreRecordDuration', description='preRecordDuration'),
  recordDuration: integer(name='RecordDuration', description='recordDuration'),
  templateId: string(name='TemplateId', description='templateId'),
}

model UpdateEventRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
}

async function updateEventRecordPlanWithOptions(request: UpdateEventRecordPlanRequest, runtime: Util.RuntimeOptions): UpdateEventRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('UpdateEventRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function updateEventRecordPlan(request: UpdateEventRecordPlanRequest): UpdateEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEventRecordPlanWithOptions(request, runtime);
}

model QueryEventRecordPlanDeviceByPlanRequest = {
  planId: string(name='PlanId', description='planId'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryEventRecordPlanDeviceByPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    total: integer(name='Total', description='total'),
    pageCount: integer(name='PageCount', description='pageCount'),
    page: integer(name='Page', description='currentPage'),
    pageSize: integer(name='PageSize', description='pageSize'),
    list: [
      {
        iotId: string(name='IotId', description='iotId'),
        streamType: integer(name='StreamType', description='streamType'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryEventRecordPlanDeviceByPlanWithOptions(request: QueryEventRecordPlanDeviceByPlanRequest, runtime: Util.RuntimeOptions): QueryEventRecordPlanDeviceByPlanResponse {
  Util.validateModel(request);
  return doRequest('QueryEventRecordPlanDeviceByPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryEventRecordPlanDeviceByPlan(request: QueryEventRecordPlanDeviceByPlanRequest): QueryEventRecordPlanDeviceByPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEventRecordPlanDeviceByPlanWithOptions(request, runtime);
}

model TriggerCapturePictureRequest = {
  iotId: string(name='IotId', description='iotId'),
}

model TriggerCapturePictureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function triggerCapturePictureWithOptions(request: TriggerCapturePictureRequest, runtime: Util.RuntimeOptions): TriggerCapturePictureResponse {
  Util.validateModel(request);
  return doRequest('TriggerCapturePicture', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function triggerCapturePicture(request: TriggerCapturePictureRequest): TriggerCapturePictureResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerCapturePictureWithOptions(request, runtime);
}

model QueryDeviceEventRecordRequest = {
  iotId: string(name='IotId', description='iotId'),
  eventId: string(name='EventId', description='eventId'),
}

model QueryDeviceEventRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: integer(name='Code', description='code'),
  data: [
    {
      fileName: string(name='FileName', description='fileName'),
      vodUrl: string(name='VodUrl', description='vodUrl'),
      beginTime: string(name='BeginTime', description='beginTime'),
      endTime: string(name='EndTime', description='endTime'),
    }
  ](name='Data', description='data'),
}

async function queryDeviceEventRecordWithOptions(request: QueryDeviceEventRecordRequest, runtime: Util.RuntimeOptions): QueryDeviceEventRecordResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceEventRecord', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceEventRecord(request: QueryDeviceEventRecordRequest): QueryDeviceEventRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceEventRecordWithOptions(request, runtime);
}

model QueryPictureFilesRequest = {
  iotId: string(name='IotId', description='iotId'),
  beginTime: long(name='BeginTime', description='beginTime'),
  endTime: long(name='EndTime', description='endTime'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pictureType?: integer(name='PictureType', description='pictureType'),
  pictureSource?: integer(name='PictureSource', description='pictureSource'),
}

model QueryPictureFilesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    pageSize: integer(name='PageSize', description='pageSize'),
    page: integer(name='Page', description='currentPage'),
    list: [
      {
        iotId: string(name='IotId', description='iotId'),
        picCreateTime: long(name='PicCreateTime', description='picCreateTime'),
        picId: string(name='PicId', description='picId'),
        picUrl: string(name='PicUrl', description='picUrl'),
        thumbUrl: string(name='ThumbUrl', description='thumbUrl'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryPictureFilesWithOptions(request: QueryPictureFilesRequest, runtime: Util.RuntimeOptions): QueryPictureFilesResponse {
  Util.validateModel(request);
  return doRequest('QueryPictureFiles', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryPictureFiles(request: QueryPictureFilesRequest): QueryPictureFilesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPictureFilesWithOptions(request, runtime);
}

model QueryRecordRequest = {
  iotId: string(name='IotId', description='iotId'),
  streamType?: integer(name='StreamType', description='streamType'),
  beginTime: integer(name='BeginTime', description='beginTime'),
  endTime: integer(name='EndTime', description='endTime'),
  recordType?: integer(name='RecordType', description='recordType'),
  currentPage?: integer(name='CurrentPage', description='currentPage'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model QueryRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: {
    pageSize: integer(name='PageSize', description='pageSize'),
    page: integer(name='Page', description='currentPage'),
    list: [
      {
        beginTime: string(name='BeginTime', description='beginTime'),
        endTime: string(name='EndTime', description='endTime'),
        recordType: integer(name='RecordType', description='recordType'),
        streamType: integer(name='StreamType', description='streamType'),
        fileName: string(name='FileName', description='fileName'),
        fileSize: integer(name='FileSize', description='fileSize'),
        videoFrameNumber: integer(name='VideoFrameNumber', description='videoFrameNumber'),
      }
    ](name='List', description='data'),
  }(name='Data', description='data'),
}

async function queryRecordWithOptions(request: QueryRecordRequest, runtime: Util.RuntimeOptions): QueryRecordResponse {
  Util.validateModel(request);
  return doRequest('QueryRecord', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecord(request: QueryRecordRequest): QueryRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordWithOptions(request, runtime);
}

model QueryRecordUrlRequest = {
  iotId: string(name='IotId', description='iotId'),
  fileName: string(name='FileName', description='fileName'),
}

model QueryRecordUrlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function queryRecordUrlWithOptions(request: QueryRecordUrlRequest, runtime: Util.RuntimeOptions): QueryRecordUrlResponse {
  Util.validateModel(request);
  return doRequest('QueryRecordUrl', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryRecordUrl(request: QueryRecordUrlRequest): QueryRecordUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRecordUrlWithOptions(request, runtime);
}

model QueryDeviceFileVodRequest = {
  iotId: string(name='IotId', description='iotId'),
  fileName: string(name='FileName', description='fileName'),
  shouldEncrypt?: boolean(name='ShouldEncrypt', description='shouldEncrypt'),
  encryptType?: integer(name='EncryptType', description='encryptType'),
}

model QueryDeviceFileVodResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  decryptKey: string(name='DecryptKey', description='encryptKey'),
  data: {
    vodUrl: string(name='VodUrl', description='vodUrl'),
  }(name='Data', description='data'),
}

async function queryDeviceFileVodWithOptions(request: QueryDeviceFileVodRequest, runtime: Util.RuntimeOptions): QueryDeviceFileVodResponse {
  Util.validateModel(request);
  return doRequest('QueryDeviceFileVod', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function queryDeviceFileVod(request: QueryDeviceFileVodRequest): QueryDeviceFileVodResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDeviceFileVodWithOptions(request, runtime);
}

model CreateEventRecordPlanRequest = {
  name: string(name='Name', description='name'),
  eventTypes?: string(name='EventTypes', description='eventTypes'),
  preRecordDuration?: integer(name='PreRecordDuration', description='preRecordDuration'),
  recordDuration: integer(name='RecordDuration', description='recordDuration'),
  templateId: string(name='TemplateId', description='templateId'),
}

model CreateEventRecordPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
  errorMessage: string(name='ErrorMessage', description='errorMessage'),
  code: string(name='Code', description='code'),
  data: string(name='Data', description='data'),
}

async function createEventRecordPlanWithOptions(request: CreateEventRecordPlanRequest, runtime: Util.RuntimeOptions): CreateEventRecordPlanResponse {
  Util.validateModel(request);
  return doRequest('CreateEventRecordPlan', 'HTTPS', 'POST', '2018-01-20', 'AK', null, request, runtime);
}

async function createEventRecordPlan(request: CreateEventRecordPlanRequest): CreateEventRecordPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEventRecordPlanWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
