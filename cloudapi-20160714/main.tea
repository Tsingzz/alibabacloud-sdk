import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeSummaryDataRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  language?: string(name='Language', description='language'),
}

model DescribeSummaryDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  usageGroupNum: integer(name='UsageGroupNum', description='data.usageGroupNum'),
  usageApiNum: integer(name='UsageApiNum', description='data.usageApiNum'),
  usageInstanceNum: integer(name='UsageInstanceNum', description='data.usageInstanceNum'),
  comeingSoonInstanceNum: integer(name='ComeingSoonInstanceNum', description='data.comeingSoonInstanceNum'),
  region: string(name='Region', description='data.region'),
}

async function describeSummaryDataWithOptions(request: DescribeSummaryDataRequest, runtime: Util.RuntimeOptions): DescribeSummaryDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeSummaryData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSummaryData(request: DescribeSummaryDataRequest): DescribeSummaryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSummaryDataWithOptions(request, runtime);
}

model ModifyApiMarketAttributesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  needCharging: boolean(name='NeedCharging', description='needCharging'),
  marketChargingMode?: string(name='MarketChargingMode', description='marketChargingMode'),
}

model ModifyApiMarketAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyApiMarketAttributesWithOptions(request: ModifyApiMarketAttributesRequest, runtime: Util.RuntimeOptions): ModifyApiMarketAttributesResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiMarketAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiMarketAttributes(request: ModifyApiMarketAttributesRequest): ModifyApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiMarketAttributesWithOptions(request, runtime);
}

model DescribeApiMarketAttributesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
}

model DescribeApiMarketAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  apiId: string(name='ApiId', description='data.apiUid'),
  needCharging: string(name='NeedCharging', description='data.needCharging'),
  marketChargingMode: string(name='MarketChargingMode', description='data.marketChargingMode'),
}

async function describeApiMarketAttributesWithOptions(request: DescribeApiMarketAttributesRequest, runtime: Util.RuntimeOptions): DescribeApiMarketAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiMarketAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiMarketAttributes(request: DescribeApiMarketAttributesRequest): DescribeApiMarketAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiMarketAttributesWithOptions(request, runtime);
}

model SetWildcardDomainPatternsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
  wildcardDomainPatterns?: string(name='WildcardDomainPatterns', description='wildcardDomainPatternsParam'),
}

model SetWildcardDomainPatternsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setWildcardDomainPatternsWithOptions(request: SetWildcardDomainPatternsRequest, runtime: Util.RuntimeOptions): SetWildcardDomainPatternsResponse {
  Util.validateModel(request);
  return doRequest('SetWildcardDomainPatterns', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setWildcardDomainPatterns(request: SetWildcardDomainPatternsRequest): SetWildcardDomainPatternsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setWildcardDomainPatternsWithOptions(request, runtime);
}

model ModifyApiGroupVpcWhitelistRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  vpcIds: string(name='VpcIds', description='vpcIds'),
}

model ModifyApiGroupVpcWhitelistResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyApiGroupVpcWhitelistWithOptions(request: ModifyApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): ModifyApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiGroupVpcWhitelist', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiGroupVpcWhitelist(request: ModifyApiGroupVpcWhitelistRequest): ModifyApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupVpcWhitelistWithOptions(request, runtime);
}

model DescribeApiGroupVpcWhitelistRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
}

model DescribeApiGroupVpcWhitelistResponse = {
  requestId: string(name='RequestId', description='requestId'),
  vpcIds: string(name='VpcIds', description='data'),
}

async function describeApiGroupVpcWhitelistWithOptions(request: DescribeApiGroupVpcWhitelistRequest, runtime: Util.RuntimeOptions): DescribeApiGroupVpcWhitelistResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroupVpcWhitelist', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroupVpcWhitelist(request: DescribeApiGroupVpcWhitelistRequest): DescribeApiGroupVpcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupVpcWhitelistWithOptions(request, runtime);
}

model DeleteInstanceRequest = {
  instanceId: string(name='InstanceId', description='instanceId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DeleteInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteInstanceWithOptions(request: DeleteInstanceRequest, runtime: Util.RuntimeOptions): DeleteInstanceResponse {
  Util.validateModel(request);
  return doRequest('DeleteInstance', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteInstance(request: DeleteInstanceRequest): DeleteInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteInstanceWithOptions(request, runtime);
}

model CreateInstanceRequest = {
  chargeType: string(name='ChargeType', description='chargeType'),
  instanceName: string(name='InstanceName', description='instanceName'),
  instanceSpec: string(name='InstanceSpec', description='instanceSpec'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  httpsPolicy?: string(name='HttpsPolicy', description='httpsPolicy'),
  duration?: integer(name='Duration', description='duration'),
  pricingCycle?: string(name='PricingCycle', description='pricingCycle'),
  autoPay?: boolean(name='AutoPay', description='autoPay'),
  token: string(name='Token', description='token'),
}

model CreateInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='data'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateInstance', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  resourceType: string(name='ResourceType', description='resourceType'),
  tagKey?: [ string ](name='TagKey', description='tagKeys'),
  all?: boolean(name='All', description='all'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  resourceId?: [ string ](name='ResourceId', description='resourceIds'),
  resourceType: string(name='ResourceType', description='resourceType'),
  nextToken?: string(name='NextToken', description='nextToken'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model ListTagResourcesResponse = {
  nextToken: string(name='NextToken', description='nextToken'),
  requestId: string(name='RequestId', description='requestId'),
  tagResources: {
    tagResource: [
      {
        resourceId: string(name='ResourceId', description='resourceId'),
        resourceType: string(name='ResourceType', description='resourceType'),
        tagKey: string(name='TagKey', description='tagKey'),
        tagValue: string(name='TagValue', description='tagValue'),
      }
    ](name='TagResource', description='TagResource'),
  }(name='TagResources', description='data'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  resourceType: string(name='ResourceType', description='resourceType'),
  tag: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model DescribeZonesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  language?: string(name='Language', description='language'),
}

model DescribeZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  zones: {
    zone: [
      {
        zoneId: string(name='ZoneId', description='zoneId'),
        localName: string(name='LocalName', description='localName'),
      }
    ](name='Zone', description='Zone'),
  }(name='Zones', description='data'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeZones', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model ResetAppCodeRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appCode: string(name='AppCode', description='appCode'),
}

model ResetAppCodeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAppCodeWithOptions(request: ResetAppCodeRequest, runtime: Util.RuntimeOptions): ResetAppCodeResponse {
  Util.validateModel(request);
  return doRequest('ResetAppCode', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeWithOptions(request, runtime);
}

model DescribeAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId?: long(name='AppId', description='appId'),
}

model DescribeAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
  appId: long(name='AppId', description='data.appId'),
  appName: string(name='AppName', description='data.appName'),
  description: string(name='Description', description='data.description'),
  createdTime: string(name='CreatedTime', description='data.gmtCreate'),
  modifiedTime: string(name='ModifiedTime', description='data.gmtModified'),
}

async function describeAppWithOptions(request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  return doRequest('DescribeApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(request, runtime);
}

model CreateModelRequest = {
  modelName: string(name='ModelName', description='modelName'),
  groupId: string(name='GroupId', description='groupId'),
  securityToken?: string(name='SecurityToken', description='securityToken'),
  schema: string(name='Schema', description='schema'),
  description?: string(name='Description', description='description'),
}

model CreateModelResponse = {
  requestId: string(name='RequestId', description='requestId'),
  modelId: string(name='ModelId', description='data.modelId'),
  modelRef: string(name='ModelRef', description='data.modelRef'),
  modelName: string(name='ModelName', description='data.modelName'),
  groupId: string(name='GroupId', description='data.groupId'),
  schema: string(name='Schema', description='data.schema'),
  regionId: string(name='RegionId', description='data.regionId'),
  description: string(name='Description', description='data.description'),
  createdTime: string(name='CreatedTime', description='data.createdTime'),
  modifiedTime: string(name='ModifiedTime', description='data.modifiedTime'),
}

async function createModelWithOptions(request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  return doRequest('CreateModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createModel(request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(request, runtime);
}

model DeleteModelRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  modelName: string(name='ModelName', description='modelName'),
  groupId: string(name='GroupId', description='groupId'),
}

model DeleteModelResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteModelWithOptions(request: DeleteModelRequest, runtime: Util.RuntimeOptions): DeleteModelResponse {
  Util.validateModel(request);
  return doRequest('DeleteModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteModel(request: DeleteModelRequest): DeleteModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteModelWithOptions(request, runtime);
}

model DescribeModelsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  modelName?: string(name='ModelName', description='modelName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  modelId?: string(name='ModelId', description='modelId'),
}

model DescribeModelsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  modelDetails: {
    modelDetail: [
      {
        groupId: string(name='GroupId', description='groupId'),
        modelId: string(name='ModelId', description='modelId'),
        modelName: string(name='ModelName', description='modelName'),
        schema: string(name='Schema', description='schema'),
        description: string(name='Description', description='description'),
        createdTime: string(name='CreatedTime', description='createdTime'),
        modifiedTime: string(name='ModifiedTime', description='modifiedTime'),
        modelRef: string(name='ModelRef', description='modelRef'),
      }
    ](name='ModelDetail', description='ModelDetail'),
  }(name='ModelDetails', description='data'),
}

async function describeModelsWithOptions(request: DescribeModelsRequest, runtime: Util.RuntimeOptions): DescribeModelsResponse {
  Util.validateModel(request);
  return doRequest('DescribeModels', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeModels(request: DescribeModelsRequest): DescribeModelsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelsWithOptions(request, runtime);
}

model ModifyModelRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  modelName: string(name='ModelName', description='modelName'),
  description?: string(name='Description', description='description'),
  schema?: string(name='Schema', description='schema'),
  groupId: string(name='GroupId', description='groupId'),
  newModelName?: string(name='NewModelName', description='newName'),
}

model ModifyModelResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyModelWithOptions(request: ModifyModelRequest, runtime: Util.RuntimeOptions): ModifyModelResponse {
  Util.validateModel(request);
  return doRequest('ModifyModel', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyModel(request: ModifyModelRequest): ModifyModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyModelWithOptions(request, runtime);
}

model CreateIntranetDomainRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
}

model CreateIntranetDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='data'),
}

async function createIntranetDomainWithOptions(request: CreateIntranetDomainRequest, runtime: Util.RuntimeOptions): CreateIntranetDomainResponse {
  Util.validateModel(request);
  return doRequest('CreateIntranetDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createIntranetDomain(request: CreateIntranetDomainRequest): CreateIntranetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntranetDomainWithOptions(request, runtime);
}

model ImportSwaggerRequest = {
  overwrite: boolean(name='Overwrite', description='overwrite'),
  globalCondition?: map[string]any(name='GlobalCondition', description='globalCondition'),
  dataFormat: string(name='DataFormat', description='dataFormat'),
  data: string(name='Data', description='data'),
  groupId: string(name='GroupId', description='groupId'),
}

model ImportSwaggerResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: {
    apiImportSwaggerSuccess: [
      {
        path: string(name='Path', description='path'),
        httpMethod: string(name='HttpMethod', description='httpMethod'),
        apiUid: string(name='ApiUid', description='apiUid'),
        apiOperation: string(name='ApiOperation', description='apiOperation'),
      }
    ](name='ApiImportSwaggerSuccess', description='ApiImportSwaggerSuccess'),
  }(name='Success', description='data.success'),
  failed: {
    apiImportSwaggerFailed: [
      {
        path: string(name='Path', description='path'),
        httpMethod: string(name='HttpMethod', description='httpMethod'),
        errorMsg: string(name='ErrorMsg', description='errorMsg'),
      }
    ](name='ApiImportSwaggerFailed', description='ApiImportSwaggerFailed'),
  }(name='Failed', description='data.failed'),
  modelFailed: {
    apiImportModelFailed: [
      {
        groupId: string(name='GroupId', description='groupId'),
        modelName: string(name='ModelName', description='modelName'),
        errorMsg: string(name='ErrorMsg', description='errorMsg'),
      }
    ](name='ApiImportModelFailed', description='ApiImportModelFailed'),
  }(name='ModelFailed', description='data.modelFailed'),
  modelSuccess: {
    apiImportModelSuccess: [
      {
        modelUid: string(name='ModelUid', description='modelUid'),
        modelOperation: string(name='ModelOperation', description='modelOperation'),
        groupId: string(name='GroupId', description='groupId'),
        modelName: string(name='ModelName', description='modelName'),
      }
    ](name='ApiImportModelSuccess', description='ApiImportModelSuccess'),
  }(name='ModelSuccess', description='data.modelSuccess'),
}

async function importSwaggerWithOptions(request: ImportSwaggerRequest, runtime: Util.RuntimeOptions): ImportSwaggerResponse {
  Util.validateModel(request);
  return doRequest('ImportSwagger', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function importSwagger(request: ImportSwaggerRequest): ImportSwaggerResponse {
  var runtime = new Util.RuntimeOptions{};
  return importSwaggerWithOptions(request, runtime);
}

model SetIpControlApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model SetIpControlApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setIpControlApisWithOptions(request: SetIpControlApisRequest, runtime: Util.RuntimeOptions): SetIpControlApisResponse {
  Util.validateModel(request);
  return doRequest('SetIpControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setIpControlApis(request: SetIpControlApisRequest): SetIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setIpControlApisWithOptions(request, runtime);
}

model RemoveIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ipControlId'),
  policyItemIds: string(name='PolicyItemIds', description='policyIds'),
}

model RemoveIpControlPolicyItemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeIpControlPolicyItemWithOptions(request: RemoveIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): RemoveIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('RemoveIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeIpControlPolicyItem(request: RemoveIpControlPolicyItemRequest): RemoveIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlPolicyItemWithOptions(request, runtime);
}

model RemoveIpControlApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model RemoveIpControlApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeIpControlApisWithOptions(request: RemoveIpControlApisRequest, runtime: Util.RuntimeOptions): RemoveIpControlApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveIpControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeIpControlApis(request: RemoveIpControlApisRequest): RemoveIpControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeIpControlApisWithOptions(request, runtime);
}

model ModifyIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ipControlId'),
  policyItemId: string(name='PolicyItemId', description='policyId'),
  appId?: string(name='AppId', description='appId'),
  cidrIp: string(name='CidrIp', description='ip'),
}

model ModifyIpControlPolicyItemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyIpControlPolicyItemWithOptions(request: ModifyIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): ModifyIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('ModifyIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyIpControlPolicyItem(request: ModifyIpControlPolicyItemRequest): ModifyIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlPolicyItemWithOptions(request, runtime);
}

model ModifyIpControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ipControlId'),
  ipControlName?: string(name='IpControlName', description='ipControlName'),
  description?: string(name='Description', description='description'),
}

model ModifyIpControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyIpControlWithOptions(request: ModifyIpControlRequest, runtime: Util.RuntimeOptions): ModifyIpControlResponse {
  Util.validateModel(request);
  return doRequest('ModifyIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyIpControl(request: ModifyIpControlRequest): ModifyIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpControlWithOptions(request, runtime);
}

model DescribeIpControlsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId?: string(name='IpControlId', description='ipControlId'),
  ipControlName?: string(name='IpControlName', description='ipControlName'),
  ipControlType?: string(name='IpControlType', description='controlType'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeIpControlsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  ipControlInfos: {
    ipControlInfo: [
      {
        ipControlId: string(name='IpControlId', description='ipControlId'),
        ipControlName: string(name='IpControlName', description='ipControlName'),
        ipControlType: string(name='IpControlType', description='controlType'),
        description: string(name='Description', description='description'),
        createTime: string(name='CreateTime', description='createTime'),
        modifiedTime: string(name='ModifiedTime', description='modifiedTime'),
        regionId: string(name='RegionId', description='regionId'),
      }
    ](name='IpControlInfo', description='IpControlInfo'),
  }(name='IpControlInfos', description='data'),
}

async function describeIpControlsWithOptions(request: DescribeIpControlsRequest, runtime: Util.RuntimeOptions): DescribeIpControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeIpControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeIpControls(request: DescribeIpControlsRequest): DescribeIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlsWithOptions(request, runtime);
}

model DescribeIpControlPolicyItemsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId?: string(name='IpControlId', description='ipControlId'),
  policyItemId?: string(name='PolicyItemId', description='controlPolicyId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeIpControlPolicyItemsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  ipControlPolicyItems: {
    ipControlPolicyItem: [
      {
        appId: string(name='AppId', description='appId'),
        cidrIp: string(name='CidrIp', description='ip'),
        policyItemId: string(name='PolicyItemId', description='policyId'),
        createTime: string(name='CreateTime', description='createTime'),
        modifiedTime: string(name='ModifiedTime', description='modifiedTime'),
      }
    ](name='IpControlPolicyItem', description='IpControlPolicyItem'),
  }(name='IpControlPolicyItems', description='data'),
}

async function describeIpControlPolicyItemsWithOptions(request: DescribeIpControlPolicyItemsRequest, runtime: Util.RuntimeOptions): DescribeIpControlPolicyItemsResponse {
  Util.validateModel(request);
  return doRequest('DescribeIpControlPolicyItems', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeIpControlPolicyItems(request: DescribeIpControlPolicyItemsRequest): DescribeIpControlPolicyItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpControlPolicyItemsWithOptions(request, runtime);
}

model DescribeApisByIpControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ruleId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeApisByIpControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        description: string(name='Description', description='description'),
        visibility: string(name='Visibility', description='visibility'),
        boundTime: string(name='BoundTime', description='gmtCreate'),
      }
    ](name='ApiInfo', description='ApiInfo'),
  }(name='ApiInfos', description='data'),
}

async function describeApisByIpControlWithOptions(request: DescribeApisByIpControlRequest, runtime: Util.RuntimeOptions): DescribeApisByIpControlResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByIpControl(request: DescribeApisByIpControlRequest): DescribeApisByIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByIpControlWithOptions(request, runtime);
}

model DescribeApiIpControlsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stageName: string(name='StageName', description='stageName'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeApiIpControlsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiIpControls: {
    apiIpControlItem: [
      {
        apiId: string(name='ApiId', description='apiId'),
        apiName: string(name='ApiName', description='apiName'),
        ipControlId: string(name='IpControlId', description='ruleId'),
        ipControlName: string(name='IpControlName', description='ruleName'),
        boundTime: string(name='BoundTime', description='createdTime'),
      }
    ](name='ApiIpControlItem', description='ApiIpControlItem'),
  }(name='ApiIpControls', description='data'),
}

async function describeApiIpControlsWithOptions(request: DescribeApiIpControlsRequest, runtime: Util.RuntimeOptions): DescribeApiIpControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiIpControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiIpControls(request: DescribeApiIpControlsRequest): DescribeApiIpControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiIpControlsWithOptions(request, runtime);
}

model DeleteIpControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ipControlId'),
}

model DeleteIpControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteIpControlWithOptions(request: DeleteIpControlRequest, runtime: Util.RuntimeOptions): DeleteIpControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteIpControl(request: DeleteIpControlRequest): DeleteIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIpControlWithOptions(request, runtime);
}

model CreateIpControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlName: string(name='IpControlName', description='ipControlName'),
  ipControlType: string(name='IpControlType', description='controlType'),
  description?: string(name='Description', description='description'),
  ipControlPolicys?: [
    {
      appId: string(name='AppId', description='appId'),
      cidrIp: string(name='CidrIp', description='ip'),
    }
  ](name='IpControlPolicys', description='controlPolicyList'),
}

model CreateIpControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  ipControlId: string(name='IpControlId', description='data'),
}

async function createIpControlWithOptions(request: CreateIpControlRequest, runtime: Util.RuntimeOptions): CreateIpControlResponse {
  Util.validateModel(request);
  return doRequest('CreateIpControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createIpControl(request: CreateIpControlRequest): CreateIpControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIpControlWithOptions(request, runtime);
}

model AddIpControlPolicyItemRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  ipControlId: string(name='IpControlId', description='ipControlId'),
  appId?: string(name='AppId', description='appId'),
  cidrIp: string(name='CidrIp', description='ip'),
}

model AddIpControlPolicyItemResponse = {
  requestId: string(name='RequestId', description='requestId'),
  policyItemId: string(name='PolicyItemId', description='data'),
}

async function addIpControlPolicyItemWithOptions(request: AddIpControlPolicyItemRequest, runtime: Util.RuntimeOptions): AddIpControlPolicyItemResponse {
  Util.validateModel(request);
  return doRequest('AddIpControlPolicyItem', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function addIpControlPolicyItem(request: AddIpControlPolicyItemRequest): AddIpControlPolicyItemResponse {
  var runtime = new Util.RuntimeOptions{};
  return addIpControlPolicyItemWithOptions(request, runtime);
}

model ModifyLogConfigRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  slsProject: string(name='SlsProject', description='slsProject'),
  slsLogStore: string(name='SlsLogStore', description='slsLogStore'),
  logType?: string(name='LogType', description='logType'),
}

model ModifyLogConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyLogConfigWithOptions(request: ModifyLogConfigRequest, runtime: Util.RuntimeOptions): ModifyLogConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyLogConfig(request: ModifyLogConfigRequest): ModifyLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogConfigWithOptions(request, runtime);
}

model DescribeLogConfigRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  logType?: string(name='LogType', description='logType'),
}

model DescribeLogConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  logInfos: {
    logInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        slsProject: string(name='SlsProject', description='slsProject'),
        slsLogStore: string(name='SlsLogStore', description='slsLogStore'),
        logType: string(name='LogType', description='logType'),
      }
    ](name='LogInfo', description='LogInfo'),
  }(name='LogInfos', description='data'),
}

async function describeLogConfigWithOptions(request: DescribeLogConfigRequest, runtime: Util.RuntimeOptions): DescribeLogConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeLogConfig(request: DescribeLogConfigRequest): DescribeLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogConfigWithOptions(request, runtime);
}

model DeleteLogConfigRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  logType?: string(name='LogType', description='logType'),
}

model DeleteLogConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteLogConfigWithOptions(request: DeleteLogConfigRequest, runtime: Util.RuntimeOptions): DeleteLogConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteLogConfig(request: DeleteLogConfigRequest): DeleteLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLogConfigWithOptions(request, runtime);
}

model CreateLogConfigRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  slsProject: string(name='SlsProject', description='slsProject'),
  slsLogStore: string(name='SlsLogStore', description='slsLogStore'),
  logType?: string(name='LogType', description='logType'),
}

model CreateLogConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createLogConfigWithOptions(request: CreateLogConfigRequest, runtime: Util.RuntimeOptions): CreateLogConfigResponse {
  Util.validateModel(request);
  return doRequest('CreateLogConfig', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createLogConfig(request: CreateLogConfigRequest): CreateLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLogConfigWithOptions(request, runtime);
}

model SetDomainWebSocketStatusRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
  actionValue: string(name='ActionValue', description='actionValue'),
}

model SetDomainWebSocketStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setDomainWebSocketStatusWithOptions(request: SetDomainWebSocketStatusRequest, runtime: Util.RuntimeOptions): SetDomainWebSocketStatusResponse {
  Util.validateModel(request);
  return doRequest('SetDomainWebSocketStatus', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomainWebSocketStatus(request: SetDomainWebSocketStatusRequest): SetDomainWebSocketStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWebSocketStatusWithOptions(request, runtime);
}

model RemoveVpcAccessRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  vpcId: string(name='VpcId', description='vpcId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  port: integer(name='Port', description='instancePort'),
}

model RemoveVpcAccessResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeVpcAccessWithOptions(request: RemoveVpcAccessRequest, runtime: Util.RuntimeOptions): RemoveVpcAccessResponse {
  Util.validateModel(request);
  return doRequest('RemoveVpcAccess', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeVpcAccess(request: RemoveVpcAccessRequest): RemoveVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVpcAccessWithOptions(request, runtime);
}

model SetVpcAccessRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  name: string(name='Name', description='name'),
  vpcId: string(name='VpcId', description='vpcId'),
  instanceId: string(name='InstanceId', description='instanceId'),
  port: integer(name='Port', description='instancePort'),
}

model SetVpcAccessResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setVpcAccessWithOptions(request: SetVpcAccessRequest, runtime: Util.RuntimeOptions): SetVpcAccessResponse {
  Util.validateModel(request);
  return doRequest('SetVpcAccess', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setVpcAccess(request: SetVpcAccessRequest): SetVpcAccessResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVpcAccessWithOptions(request, runtime);
}

model DescribeVpcAccessesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  name?: string(name='Name', description='name'),
}

model DescribeVpcAccessesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  vpcAccessAttributes: {
    vpcAccessAttribute: [
      {
        vpcId: string(name='VpcId', description='vpcId'),
        instanceId: string(name='InstanceId', description='instanceId'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        port: integer(name='Port', description='port'),
        regionId: string(name='RegionId', description='regionId'),
        name: string(name='Name', description='name'),
      }
    ](name='VpcAccessAttribute', description='VpcAccessAttribute'),
  }(name='VpcAccessAttributes', description='data'),
}

async function describeVpcAccessesWithOptions(request: DescribeVpcAccessesRequest, runtime: Util.RuntimeOptions): DescribeVpcAccessesResponse {
  Util.validateModel(request);
  return doRequest('DescribeVpcAccesses', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeVpcAccesses(request: DescribeVpcAccessesRequest): DescribeVpcAccessesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVpcAccessesWithOptions(request, runtime);
}

model ReactivateDomainRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
}

model ReactivateDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function reactivateDomainWithOptions(request: ReactivateDomainRequest, runtime: Util.RuntimeOptions): ReactivateDomainResponse {
  Util.validateModel(request);
  return doRequest('ReactivateDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function reactivateDomain(request: ReactivateDomainRequest): ReactivateDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return reactivateDomainWithOptions(request, runtime);
}

model DescribeApiHistoriesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId?: string(name='ApiId', description='apiUid'),
  apiName?: string(name='ApiName', description='apiName'),
  pageSize?: string(name='PageSize', description='pageSize'),
  pageNumber?: string(name='PageNumber', description='pageNumber'),
}

model DescribeApiHistoriesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiHisItems: {
    apiHisItem: [
      {
        regionId: string(name='RegionId', description='regionId'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        historyVersion: string(name='HistoryVersion', description='version'),
        status: string(name='Status', description='status'),
        description: string(name='Description', description='description'),
        deployedTime: string(name='DeployedTime', description='gmtCreate'),
      }
    ](name='ApiHisItem', description='ApiHisItem'),
  }(name='ApiHisItems', description='data'),
}

async function describeApiHistoriesWithOptions(request: DescribeApiHistoriesRequest, runtime: Util.RuntimeOptions): DescribeApiHistoriesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiHistories', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiHistories(request: DescribeApiHistoriesRequest): DescribeApiHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoriesWithOptions(request, runtime);
}

model SdkGenerateByGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  language: string(name='Language', description='language'),
}

model SdkGenerateByGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  downloadLink: string(name='DownloadLink', description='data'),
}

async function sdkGenerateByGroupWithOptions(request: SdkGenerateByGroupRequest, runtime: Util.RuntimeOptions): SdkGenerateByGroupResponse {
  Util.validateModel(request);
  return doRequest('SdkGenerateByGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function sdkGenerateByGroup(request: SdkGenerateByGroupRequest): SdkGenerateByGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByGroupWithOptions(request, runtime);
}

model SdkGenerateByAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  language: string(name='Language', description='language'),
}

model SdkGenerateByAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
  downloadLink: string(name='DownloadLink', description='data'),
}

async function sdkGenerateByAppWithOptions(request: SdkGenerateByAppRequest, runtime: Util.RuntimeOptions): SdkGenerateByAppResponse {
  Util.validateModel(request);
  return doRequest('SdkGenerateByApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function sdkGenerateByApp(request: SdkGenerateByAppRequest): SdkGenerateByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return sdkGenerateByAppWithOptions(request, runtime);
}

model DescribeApisByAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  apiUid?: string(name='ApiUid', description='apiUid'),
}

model DescribeApisByAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  appApiRelationInfos: {
    appApiRelationInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        operator: string(name='Operator', description='operator'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        authorizationSource: string(name='AuthorizationSource', description='authorizationSource'),
        description: string(name='Description', description='description'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        authVaildTime: string(name='AuthVaildTime', description='authVaildTime'),
      }
    ](name='AppApiRelationInfo', description='AppApiRelationInfo'),
  }(name='AppApiRelationInfos', description='data'),
}

async function describeApisByAppWithOptions(request: DescribeApisByAppRequest, runtime: Util.RuntimeOptions): DescribeApisByAppResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByAppWithOptions(request, runtime);
}

model DescribeApiStageRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  stageId: string(name='StageId', description='stageId'),
}

model DescribeApiStageResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  stageId: string(name='StageId', description='data.stageId'),
  stageName: string(name='StageName', description='data.stageName'),
  description: string(name='Description', description='data.description'),
  createdTime: string(name='CreatedTime', description='data.gmtCreate'),
  modifiedTime: string(name='ModifiedTime', description='data.gmtModified'),
  variables: {
    variableItem: [
      {
        variableName: string(name='VariableName', description='varname'),
        variableValue: string(name='VariableValue', description='varvalue'),
        supportRoute: boolean(name='SupportRoute', description='supportRoute'),
        stageRouteModel: {
          parameterCatalog: string(name='ParameterCatalog', description='parameterCatalog'),
          serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
          location: string(name='Location', description='location'),
          parameterType: string(name='ParameterType', description='parameterType'),
          routeMatchSymbol: string(name='RouteMatchSymbol', description='routeMatchSymbol'),
          routeRules: {
            routeRuleItem: [
              {
                maxValue: long(name='MaxValue', description='maxValue'),
                minValue: long(name='MinValue', description='minValue'),
                conditionValue: string(name='ConditionValue', description='conditionValue'),
                resultValue: string(name='ResultValue', description='resultValue'),
              }
            ](name='RouteRuleItem', description='RouteRuleItem'),
          }(name='RouteRules', description='routeRules'),
        }(name='StageRouteModel', description='stageRouteModel'),
      }
    ](name='VariableItem', description='VariableItem'),
  }(name='Variables', description='data.variables'),
}

async function describeApiStageWithOptions(request: DescribeApiStageRequest, runtime: Util.RuntimeOptions): DescribeApiStageResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiStage', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiStage(request: DescribeApiStageRequest): DescribeApiStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiStageWithOptions(request, runtime);
}

model DeleteApiStageVariableRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  stageId: string(name='StageId', description='stageId'),
  variableName: string(name='VariableName', description='variableName'),
}

model DeleteApiStageVariableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteApiStageVariableWithOptions(request: DeleteApiStageVariableRequest, runtime: Util.RuntimeOptions): DeleteApiStageVariableResponse {
  Util.validateModel(request);
  return doRequest('DeleteApiStageVariable', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApiStageVariable(request: DeleteApiStageVariableRequest): DeleteApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiStageVariableWithOptions(request, runtime);
}

model CreateApiStageVariableRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  stageId: string(name='StageId', description='stageId'),
  variableName: string(name='VariableName', description='variableName'),
  supportRoute?: boolean(name='SupportRoute', description='supportRoute'),
  variableValue?: string(name='VariableValue', description='variableValue'),
  stageRouteModel?: string(name='StageRouteModel', description='stageRouteModelString'),
}

model CreateApiStageVariableResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createApiStageVariableWithOptions(request: CreateApiStageVariableRequest, runtime: Util.RuntimeOptions): CreateApiStageVariableResponse {
  Util.validateModel(request);
  return doRequest('CreateApiStageVariable', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApiStageVariable(request: CreateApiStageVariableRequest): CreateApiStageVariableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiStageVariableWithOptions(request, runtime);
}

model SwitchApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
  description: string(name='Description', description='description'),
  historyVersion: string(name='HistoryVersion', description='version'),
}

model SwitchApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function switchApiWithOptions(request: SwitchApiRequest, runtime: Util.RuntimeOptions): SwitchApiResponse {
  Util.validateModel(request);
  return doRequest('SwitchApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiWithOptions(request, runtime);
}

model SetTrafficControlApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model SetTrafficControlApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setTrafficControlApisWithOptions(request: SetTrafficControlApisRequest, runtime: Util.RuntimeOptions): SetTrafficControlApisResponse {
  Util.validateModel(request);
  return doRequest('SetTrafficControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setTrafficControlApis(request: SetTrafficControlApisRequest): SetTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setTrafficControlApisWithOptions(request, runtime);
}

model SetSignatureApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId: string(name='SignatureId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model SetSignatureApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setSignatureApisWithOptions(request: SetSignatureApisRequest, runtime: Util.RuntimeOptions): SetSignatureApisResponse {
  Util.validateModel(request);
  return doRequest('SetSignatureApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setSignatureApis(request: SetSignatureApisRequest): SetSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setSignatureApisWithOptions(request, runtime);
}

model SetDomainCertificateRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
  certificateName: string(name='CertificateName', description='certificateName'),
  certificateBody?: string(name='CertificateBody', description='certificateBody'),
  certificatePrivateKey?: string(name='CertificatePrivateKey', description='privateKey'),
  caCertificateBody?: string(name='CaCertificateBody', description='caCertificateBody'),
}

model SetDomainCertificateResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setDomainCertificateWithOptions(request: SetDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDomainCertificateResponse {
  Util.validateModel(request);
  return doRequest('SetDomainCertificate', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainCertificateWithOptions(request, runtime);
}

model SetDomainRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
  bindStageName?: string(name='BindStageName', description='bindStageName'),
  isForce?: boolean(name='IsForce', description='isForce'),
}

model SetDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  domainName: string(name='DomainName', description='data.domainName'),
  subDomain: string(name='SubDomain', description='data.subDomain'),
  domainBindingStatus: string(name='DomainBindingStatus', description='data.bindStatus'),
  domainLegalStatus: string(name='DomainLegalStatus', description='data.domainLegalStatus'),
  domainWebSocketStatus: string(name='DomainWebSocketStatus', description='data.domainWebSocketStatus'),
  domainRemark: string(name='DomainRemark', description='data.remark'),
}

async function setDomainWithOptions(request: SetDomainRequest, runtime: Util.RuntimeOptions): SetDomainResponse {
  Util.validateModel(request);
  return doRequest('SetDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWithOptions(request, runtime);
}

model SetAppsAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
  appIds: string(name='AppIds', description='appIdStr'),
  description?: string(name='Description', description='description'),
  authValidTime?: string(name='AuthValidTime', description='authValidTime'),
}

model SetAppsAuthoritiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setAppsAuthoritiesWithOptions(request: SetAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): SetAppsAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('SetAppsAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setAppsAuthorities(request: SetAppsAuthoritiesRequest): SetAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAppsAuthoritiesWithOptions(request, runtime);
}

model SetApisAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  appId: long(name='AppId', description='appId'),
  stageName: string(name='StageName', description='stageName'),
  apiIds?: string(name='ApiIds', description='apiUidStr'),
  description?: string(name='Description', description='description'),
  authValidTime?: string(name='AuthValidTime', description='authValidTime'),
}

model SetApisAuthoritiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setApisAuthoritiesWithOptions(request: SetApisAuthoritiesRequest, runtime: Util.RuntimeOptions): SetApisAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('SetApisAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function setApisAuthorities(request: SetApisAuthoritiesRequest): SetApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApisAuthoritiesWithOptions(request, runtime);
}

model ResetAppSecretRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appKey: string(name='AppKey', description='appKey'),
}

model ResetAppSecretResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAppSecretWithOptions(request: ResetAppSecretRequest, runtime: Util.RuntimeOptions): ResetAppSecretResponse {
  Util.validateModel(request);
  return doRequest('ResetAppSecret', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function resetAppSecret(request: ResetAppSecretRequest): ResetAppSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppSecretWithOptions(request, runtime);
}

model RemoveTrafficControlApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model RemoveTrafficControlApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeTrafficControlApisWithOptions(request: RemoveTrafficControlApisRequest, runtime: Util.RuntimeOptions): RemoveTrafficControlApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveTrafficControlApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeTrafficControlApis(request: RemoveTrafficControlApisRequest): RemoveTrafficControlApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTrafficControlApisWithOptions(request, runtime);
}

model RemoveSignatureApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId: string(name='SignatureId', description='ruleId'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiUidStr'),
  stageName: string(name='StageName', description='stageName'),
}

model RemoveSignatureApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeSignatureApisWithOptions(request: RemoveSignatureApisRequest, runtime: Util.RuntimeOptions): RemoveSignatureApisResponse {
  Util.validateModel(request);
  return doRequest('RemoveSignatureApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeSignatureApis(request: RemoveSignatureApisRequest): RemoveSignatureApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSignatureApisWithOptions(request, runtime);
}

model RemoveAppsAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
  appIds: string(name='AppIds', description='appIdStr'),
}

model RemoveAppsAuthoritiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeAppsAuthoritiesWithOptions(request: RemoveAppsAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveAppsAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('RemoveAppsAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeAppsAuthorities(request: RemoveAppsAuthoritiesRequest): RemoveAppsAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppsAuthoritiesWithOptions(request, runtime);
}

model RemoveApisAuthoritiesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  appId: long(name='AppId', description='appId'),
  stageName: string(name='StageName', description='stageName'),
  apiIds: string(name='ApiIds', description='apiUidStr'),
  description?: string(name='Description', description='description'),
}

model RemoveApisAuthoritiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeApisAuthoritiesWithOptions(request: RemoveApisAuthoritiesRequest, runtime: Util.RuntimeOptions): RemoveApisAuthoritiesResponse {
  Util.validateModel(request);
  return doRequest('RemoveApisAuthorities', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function removeApisAuthorities(request: RemoveApisAuthoritiesRequest): RemoveApisAuthoritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeApisAuthoritiesWithOptions(request, runtime);
}

model ModifyTrafficControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
  trafficControlName?: string(name='TrafficControlName', description='trafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit', description='trafficControlUnit'),
  apiDefault?: integer(name='ApiDefault', description='apiDefault'),
  userDefault?: integer(name='UserDefault', description='userDefault'),
  appDefault?: integer(name='AppDefault', description='appDefault'),
  description?: string(name='Description', description='description'),
}

model ModifyTrafficControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyTrafficControlWithOptions(request: ModifyTrafficControlRequest, runtime: Util.RuntimeOptions): ModifyTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('ModifyTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrafficControlWithOptions(request, runtime);
}

model ModifySignatureRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId: string(name='SignatureId', description='secretKeyId'),
  signatureName?: string(name='SignatureName', description='secretKeyName'),
  signatureKey?: string(name='SignatureKey', description='secretKey'),
  signatureSecret?: string(name='SignatureSecret', description='secretValue'),
}

model ModifySignatureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signatureId: string(name='SignatureId', description='data.secretKeyId'),
  signatureName: string(name='SignatureName', description='data.secretKeyName'),
}

async function modifySignatureWithOptions(request: ModifySignatureRequest, runtime: Util.RuntimeOptions): ModifySignatureResponse {
  Util.validateModel(request);
  return doRequest('ModifySignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifySignature(request: ModifySignatureRequest): ModifySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySignatureWithOptions(request, runtime);
}

model ModifyAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  appName?: string(name='AppName', description='appName'),
  description?: string(name='Description', description='description'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model ModifyAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  return doRequest('ModifyApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyApiGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  groupName?: string(name='GroupName', description='groupName'),
  description?: string(name='Description', description='description'),
  userLogConfig?: string(name='UserLogConfig', description='userLogConfig'),
  customTraceConfig?: string(name='CustomTraceConfig', description='customTraceConfig'),
  compatibleFlags?: string(name='CompatibleFlags', description='compatibleFlags'),
  passthroughHeaders?: string(name='PassthroughHeaders', description='passthroughHeaders'),
  defaultDomain?: string(name='DefaultDomain', description='defaultDomain'),
  rpcPattern?: string(name='RpcPattern', description='rpcPattern'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model ModifyApiGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  subDomain: string(name='SubDomain', description='data.testDomain'),
  description: string(name='Description', description='data.description'),
}

async function modifyApiGroupWithOptions(request: ModifyApiGroupRequest, runtime: Util.RuntimeOptions): ModifyApiGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupWithOptions(request, runtime);
}

model ModifyApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  apiName: string(name='ApiName', description='apiName'),
  description?: string(name='Description', description='apiDescription'),
  visibility: string(name='Visibility', description='visibility'),
  authType?: string(name='AuthType', description='authType'),
  requestConfig: string(name='RequestConfig', description='requestConfigStr'),
  serviceConfig: string(name='ServiceConfig', description='serviceConfigStr'),
  requestParameters?: string(name='RequestParameters', description='requestParamtersStr'),
  systemParameters?: string(name='SystemParameters', description='systemParametersStr'),
  constantParameters?: string(name='ConstantParameters', description='constantParametersStr'),
  serviceParameters?: string(name='ServiceParameters', description='serviceParameterStr'),
  serviceParametersMap?: string(name='ServiceParametersMap', description='serviceParametersMapStr'),
  resultType?: string(name='ResultType', description='apiResultType'),
  resultSample?: string(name='ResultSample', description='apiResultSample'),
  failResultSample?: string(name='FailResultSample', description='apiFailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples', description='apiErrorCodeSample'),
  resultDescriptions?: string(name='ResultDescriptions', description='apiResultDescription'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', description='openIdConnectConfigStr'),
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='signatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType', description='webSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel', description='apiResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='forceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet', description='disableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='appCodeAuthType'),
}

model ModifyApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyApiWithOptions(request: ModifyApiRequest, runtime: Util.RuntimeOptions): ModifyApiResponse {
  Util.validateModel(request);
  return doRequest('ModifyApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiWithOptions(request, runtime);
}

model DescribeTrafficControlsByApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiId'),
  stageName: string(name='StageName', description='stageName'),
}

model DescribeTrafficControlsByApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
  trafficControlItems: {
    trafficControlItem: [
      {
        trafficControlItemId: string(name='TrafficControlItemId', description='ruleId'),
        trafficControlItemName: string(name='TrafficControlItemName', description='ruleName'),
        boundTime: string(name='BoundTime', description='createdTime'),
      }
    ](name='TrafficControlItem', description='TrafficControlItem'),
  }(name='TrafficControlItems', description='data'),
}

async function describeTrafficControlsByApiWithOptions(request: DescribeTrafficControlsByApiRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsByApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeTrafficControlsByApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeTrafficControlsByApi(request: DescribeTrafficControlsByApiRequest): DescribeTrafficControlsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsByApiWithOptions(request, runtime);
}

model DescribeTrafficControlsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId?: string(name='TrafficControlId', description='trafficControlId'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId?: string(name='ApiId', description='apiUid'),
  stageName?: string(name='StageName', description='stageName'),
  trafficControlName?: string(name='TrafficControlName', description='trafficControlName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeTrafficControlsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  trafficControls: {
    trafficControl: [
      {
        trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
        trafficControlName: string(name='TrafficControlName', description='trafficControlName'),
        description: string(name='Description', description='description'),
        trafficControlUnit: string(name='TrafficControlUnit', description='trafficControlUnit'),
        apiDefault: integer(name='ApiDefault', description='apiDefault'),
        userDefault: integer(name='UserDefault', description='userDefault'),
        appDefault: integer(name='AppDefault', description='appDefault'),
        createdTime: string(name='CreatedTime', description='createTime'),
        modifiedTime: string(name='ModifiedTime', description='modifiedTime'),
        specialPolicies: {
          specialPolicy: [
            {
              specialType: string(name='SpecialType', description='specialType'),
              specials: {
                special: [
                  {
                    specialKey: string(name='SpecialKey', description='specialKey'),
                    trafficValue: integer(name='TrafficValue', description='trafficValue'),
                  }
                ](name='Special', description='Special'),
              }(name='Specials', description='specialPolicies'),
            }
          ](name='SpecialPolicy', description='SpecialPolicy'),
        }(name='SpecialPolicies', description='trafficSpecialPolicies'),
      }
    ](name='TrafficControl', description='TrafficControl'),
  }(name='TrafficControls', description='data'),
}

async function describeTrafficControlsWithOptions(request: DescribeTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTrafficControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsWithOptions(request, runtime);
}

model DescribeSystemParametersRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
}

model DescribeSystemParametersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  systemParams: {
    systemParamItem: [
      {
        paramName: string(name='ParamName', description='paramName'),
        paramType: string(name='ParamType', description='paramType'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='SystemParamItem', description='SystemParamItem'),
  }(name='SystemParams', description='data'),
}

async function describeSystemParametersWithOptions(request: DescribeSystemParametersRequest, runtime: Util.RuntimeOptions): DescribeSystemParametersResponse {
  Util.validateModel(request);
  return doRequest('DescribeSystemParameters', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParametersWithOptions(request, runtime);
}

model DescribeSignaturesByApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiId'),
  stageName: string(name='StageName', description='stageName'),
}

model DescribeSignaturesByApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signatures: {
    signatureItem: [
      {
        signatureId: string(name='SignatureId', description='ruleId'),
        signatureName: string(name='SignatureName', description='ruleName'),
        boundTime: string(name='BoundTime', description='createdTime'),
      }
    ](name='SignatureItem', description='SignatureItem'),
  }(name='Signatures', description='data'),
}

async function describeSignaturesByApiWithOptions(request: DescribeSignaturesByApiRequest, runtime: Util.RuntimeOptions): DescribeSignaturesByApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeSignaturesByApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSignaturesByApi(request: DescribeSignaturesByApiRequest): DescribeSignaturesByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesByApiWithOptions(request, runtime);
}

model DescribeSignaturesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId?: string(name='SignatureId', description='secretKeyId'),
  signatureName?: string(name='SignatureName', description='secretKeyName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeSignaturesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  signatureInfos: {
    signatureInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        signatureId: string(name='SignatureId', description='secretKeyId'),
        signatureName: string(name='SignatureName', description='secretKeyName'),
        signatureKey: string(name='SignatureKey', description='secretKey'),
        signatureSecret: string(name='SignatureSecret', description='secretKeyValue'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        modifiedTime: string(name='ModifiedTime', description='gmtModified'),
      }
    ](name='SignatureInfo', description='SignatureInfo'),
  }(name='SignatureInfos', description='data'),
}

async function describeSignaturesWithOptions(request: DescribeSignaturesRequest, runtime: Util.RuntimeOptions): DescribeSignaturesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSignatures', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeSignatures(request: DescribeSignaturesRequest): DescribeSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSignaturesWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  language?: string(name='Language', description='language'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='regionId'),
        localName: string(name='LocalName', description='localName'),
        regionEndpoint: string(name='RegionEndpoint', description='endPoint'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribePurchasedApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId?: string(name='ApiId', description='apiUid'),
  apiName?: string(name='ApiName', description='apiName'),
  visibility?: string(name='Visibility', description='visibility'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribePurchasedApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  purchasedApis: {
    purchasedApi: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        stageName: string(name='StageName', description='stageName'),
        description: string(name='Description', description='description'),
        purchasedTime: string(name='PurchasedTime', description='gmtCreate'),
        deployedTime: string(name='DeployedTime', description='deployedTime'),
        modifiedTime: string(name='ModifiedTime', description='deployedTime'),
        visibility: string(name='Visibility', description='visibility'),
      }
    ](name='PurchasedApi', description='PurchasedApi'),
  }(name='PurchasedApis', description='data'),
}

async function describePurchasedApisWithOptions(request: DescribePurchasedApisRequest, runtime: Util.RuntimeOptions): DescribePurchasedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApisWithOptions(request, runtime);
}

model DescribePurchasedApiGroupsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribePurchasedApiGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  purchasedApiGroupAttributes: {
    purchasedApiGroupAttribute: [
      {
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        description: string(name='Description', description='groupDescription'),
        purchasedTime: string(name='PurchasedTime', description='gmtCreate'),
        expireTime: string(name='ExpireTime', description='gmtExpire'),
        regionId: string(name='RegionId', description='regionId'),
        billingType: string(name='BillingType', description='billingType'),
        invokeTimesMax: long(name='InvokeTimesMax', description='invokeTimesMax'),
        invokeTimesNow: long(name='InvokeTimesNow', description='invokeTimesNow'),
        status: string(name='Status', description='status'),
      }
    ](name='PurchasedApiGroupAttribute', description='PurchasedApiGroupAttribute'),
  }(name='PurchasedApiGroupAttributes', description='data'),
}

async function describePurchasedApiGroupsWithOptions(request: DescribePurchasedApiGroupsRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApiGroups', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupsWithOptions(request, runtime);
}

model DescribePurchasedApiGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
}

model DescribePurchasedApiGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  description: string(name='Description', description='data.description'),
  purchasedTime: string(name='PurchasedTime', description='data.gmtCreate'),
  regionId: string(name='RegionId', description='data.regionId'),
  status: string(name='Status', description='data.status'),
  domains: {
    domainItem: [
      {
        domainName: string(name='DomainName', description='domainName'),
      }
    ](name='DomainItem', description='DomainItem'),
  }(name='Domains', description='data.customDomains'),
}

async function describePurchasedApiGroupWithOptions(request: DescribePurchasedApiGroupRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribePurchasedApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describePurchasedApiGroup(request: DescribePurchasedApiGroupRequest): DescribePurchasedApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupWithOptions(request, runtime);
}

model DescribeHistoryApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId?: string(name='ApiId', description='apiUid'),
  apiName?: string(name='ApiName', description='apiName'),
  pageSize?: string(name='PageSize', description='pageSize'),
  pageNumber?: string(name='PageNumber', description='pageNumber'),
}

model DescribeHistoryApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiHisItems: {
    apiHisItem: [
      {
        regionId: string(name='RegionId', description='regionId'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        historyVersion: string(name='HistoryVersion', description='version'),
        status: string(name='Status', description='status'),
        description: string(name='Description', description='description'),
        deployedTime: string(name='DeployedTime', description='gmtCreate'),
      }
    ](name='ApiHisItem', description='ApiHisItem'),
  }(name='ApiHisItems', description='data'),
}

async function describeHistoryApisWithOptions(request: DescribeHistoryApisRequest, runtime: Util.RuntimeOptions): DescribeHistoryApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeHistoryApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApisWithOptions(request, runtime);
}

model DescribeDomainsResolutionRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainNames: string(name='DomainNames', description='domainNameStr'),
}

model DescribeDomainsResolutionResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  domainResolutions: {
    domainResolution: [
      {
        domainName: string(name='DomainName', description='domainName'),
        domainResolutionStatus: string(name='DomainResolutionStatus', description='domainNameResolution'),
      }
    ](name='DomainResolution', description='DomainResolution'),
  }(name='DomainResolutions', description='data.domainNameResolutions'),
}

async function describeDomainsResolutionWithOptions(request: DescribeDomainsResolutionRequest, runtime: Util.RuntimeOptions): DescribeDomainsResolutionResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainsResolution', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDomainsResolution(request: DescribeDomainsResolutionRequest): DescribeDomainsResolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsResolutionWithOptions(request, runtime);
}

model DescribeDomainRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
}

model DescribeDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  domainName: string(name='DomainName', description='data.domainName'),
  subDomain: string(name='SubDomain', description='data.subDomain'),
  certificateId: string(name='CertificateId', description='data.certificateId'),
  certificateName: string(name='CertificateName', description='data.certificateName'),
  certificateBody: string(name='CertificateBody', description='data.certificateBody'),
  certificatePrivateKey: string(name='CertificatePrivateKey', description='data.privateKey'),
  domainBindingStatus: string(name='DomainBindingStatus', description='data.bindStatus'),
  domainCNAMEStatus: string(name='DomainCNAMEStatus', description='data.domainNameResolution'),
  domainLegalStatus: string(name='DomainLegalStatus', description='data.domainLegalStatus'),
  domainWebSocketStatus: string(name='DomainWebSocketStatus', description='data.domainWebSocketStatus'),
  domainRemark: string(name='DomainRemark', description='data.remark'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeDeployedApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId?: string(name='ApiId', description='apiUid'),
  apiName?: string(name='ApiName', description='apiName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='enableTagAuth'),
}

model DescribeDeployedApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  deployedApis: {
    deployedApiItem: [
      {
        regionId: string(name='RegionId', description='regionId'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        visibility: string(name='Visibility', description='visibility'),
        description: string(name='Description', description='description'),
        deployedTime: string(name='DeployedTime', description='gmtCreate'),
      }
    ](name='DeployedApiItem', description='DeployedApiItem'),
  }(name='DeployedApis', description='data'),
}

async function describeDeployedApisWithOptions(request: DescribeDeployedApisRequest, runtime: Util.RuntimeOptions): DescribeDeployedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeployedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApisWithOptions(request, runtime);
}

model DescribeDeployedApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
}

model DescribeDeployedApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  stageName: string(name='StageName', description='data.stageName'),
  apiId: string(name='ApiId', description='data.apiUid'),
  apiName: string(name='ApiName', description='data.apiName'),
  description: string(name='Description', description='data.description'),
  visibility: string(name='Visibility', description='data.visibility'),
  authType: string(name='AuthType', description='data.authType'),
  resultType: string(name='ResultType', description='data.resultType'),
  resultSample: string(name='ResultSample', description='data.resultSample'),
  failResultSample: string(name='FailResultSample', description='data.failResultSample'),
  deployedTime: string(name='DeployedTime', description='data.gmtCreate'),
  allowSignatureMethod: string(name='AllowSignatureMethod', description='data.signatureMethod'),
  resultBodyModel: string(name='ResultBodyModel', description='data.resultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck', description='data.forceNonceCheck'),
  disableInternet: boolean(name='DisableInternet', description='data.disableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
        description: string(name='Description', description='description'),
      }
    ](name='ErrorCodeSample', description='ErrorCodeSample'),
  }(name='ErrorCodeSamples', description='data.errorCodeInfos'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id', description='id'),
        pid: string(name='Pid', description='pid'),
        hasChild: boolean(name='HasChild', description='hasChild'),
        key: string(name='Key', description='key'),
        name: string(name='Name', description='name'),
        mandatory: boolean(name='Mandatory', description='mandatory'),
        type: string(name='Type', description='type'),
        description: string(name='Description', description='description'),
      }
    ](name='ResultDescription', description='ResultDescription'),
  }(name='ResultDescriptions', description='data.resultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='SystemParameter', description='SystemParameter'),
  }(name='SystemParameters', description='data.systemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='CustomSystemParameter', description='CustomSystemParameter'),
  }(name='CustomSystemParameters', description='data.customSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        constantValue: string(name='ConstantValue', description='constantValue'),
        location: string(name='Location', description='location'),
        description: string(name='Description', description='description'),
      }
    ](name='ConstantParameter', description='ConstantParameter'),
  }(name='ConstantParameters', description='data.constantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName', description='apiParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
        required: string(name='Required', description='option'),
        defaultValue: string(name='DefaultValue', description='defaultValue'),
        demoValue: string(name='DemoValue', description='demoValue'),
        maxValue: long(name='MaxValue', description='maxValue'),
        minValue: long(name='MinValue', description='minValue'),
        maxLength: long(name='MaxLength', description='maxLength'),
        minLength: long(name='MinLength', description='minLength'),
        regularExpression: string(name='RegularExpression', description='regularExpression'),
        jsonScheme: string(name='JsonScheme', description='jsonScheme'),
        enumValue: string(name='EnumValue', description='enumValue'),
        docShow: string(name='DocShow', description='docShow'),
        docOrder: integer(name='DocOrder', description='docOrder'),
        description: string(name='Description', description='description'),
        arrayItemsType: string(name='ArrayItemsType', description='arrayItemsType'),
      }
    ](name='RequestParameter', description='RequestParameter'),
  }(name='RequestParameters', description='data.requestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
      }
    ](name='ServiceParameter', description='ServiceParameter'),
  }(name='ServiceParameters', description='data.serviceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        requestParameterName: string(name='RequestParameterName', description='requestParameterName'),
      }
    ](name='ServiceParameterMap', description='ServiceParameterMap'),
  }(name='ServiceParametersMap', description='data.parametersMap'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol', description='requestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod', description='requestHttpMethod'),
    requestPath: string(name='RequestPath', description='requestPath'),
    bodyFormat: string(name='BodyFormat', description='bodyFormat'),
    postBodyDescription: string(name='PostBodyDescription', description='postBodyDescription'),
    requestMode: string(name='RequestMode', description='requestMode'),
    bodyModel: string(name='BodyModel', description='bodyModel'),
  }(name='RequestConfig', description='data.requestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol', description='serviceProtocol'),
    serviceAddress: string(name='ServiceAddress', description='serviceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod', description='serviceHttpMethod'),
    servicePath: string(name='ServicePath', description='servicePath'),
    serviceTimeout: integer(name='ServiceTimeout', description='serviceTimeout'),
    mock: string(name='Mock', description='mock'),
    mockResult: string(name='MockResult', description='mockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable', description='serviceVpcEnable'),
    mockStatusCode: integer(name='MockStatusCode', description='mockStatusCode'),
    vpcId: string(name='VpcId', description='vpcId'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName', description='headerName'),
          headerValue: string(name='HeaderValue', description='headerValue'),
        }
      ](name='MockHeader', description='MockHeader'),
    }(name='MockHeaders', description='mockHeaders'),
    vpcConfig: {
      name: string(name='Name', description='name'),
      vpcId: string(name='VpcId', description='vpcId'),
      instanceId: string(name='InstanceId', description='displayInstanceId'),
      port: integer(name='Port', description='port'),
    }(name='VpcConfig', description='vpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId', description='fcRegionId'),
      serviceName: string(name='ServiceName', description='serviceName'),
      functionName: string(name='FunctionName', description='functionName'),
      roleArn: string(name='RoleArn', description='roleArn'),
    }(name='FunctionComputeConfig', description='functionComputeConfig'),
  }(name='ServiceConfig', description='data.serviceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType', description='openIdApiType'),
    idTokenParamName: string(name='IdTokenParamName', description='idTokenParamName'),
    publicKeyId: string(name='PublicKeyId', description='publicKeyId'),
    publicKey: string(name='PublicKey', description='publicKey'),
  }(name='OpenIdConnectConfig', description='data.openIdConnectConfig'),
}

async function describeDeployedApiWithOptions(request: DescribeDeployedApiRequest, runtime: Util.RuntimeOptions): DescribeDeployedApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeDeployedApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApiWithOptions(request, runtime);
}

model DescribeAuthorizedAppsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId: string(name='ApiId', description='apiUid'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  appId?: long(name='AppId', description='appId'),
  appName?: string(name='AppName', description='appName'),
  appOwnerId?: long(name='AppOwnerId', description='appOwnerId'),
}

model DescribeAuthorizedAppsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  authorizedApps: {
    authorizedApp: [
      {
        stageName: string(name='StageName', description='stageName'),
        appId: long(name='AppId', description='appId'),
        appName: string(name='AppName', description='appName'),
        operator: string(name='Operator', description='operator'),
        authorizationSource: string(name='AuthorizationSource', description='authorizationSource'),
        description: string(name='Description', description='description'),
        authorizedTime: string(name='AuthorizedTime', description='gmtCreate'),
        authVaildTime: string(name='AuthVaildTime', description='authVaildTime'),
      }
    ](name='AuthorizedApp', description='AuthorizedApp'),
  }(name='AuthorizedApps', description='data'),
}

async function describeAuthorizedAppsWithOptions(request: DescribeAuthorizedAppsRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedAppsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAuthorizedApps', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAuthorizedApps(request: DescribeAuthorizedAppsRequest): DescribeAuthorizedAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedAppsWithOptions(request, runtime);
}

model DescribeAuthorizedApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeAuthorizedApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  authorizedApis: {
    authorizedApi: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        operator: string(name='Operator', description='operator'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        authorizationSource: string(name='AuthorizationSource', description='authorizationSource'),
        description: string(name='Description', description='description'),
        authorizedTime: string(name='AuthorizedTime', description='gmtCreate'),
        authVaildTime: string(name='AuthVaildTime', description='authVaildTime'),
      }
    ](name='AuthorizedApi', description='AuthorizedApi'),
  }(name='AuthorizedApis', description='data'),
}

async function describeAuthorizedApisWithOptions(request: DescribeAuthorizedApisRequest, runtime: Util.RuntimeOptions): DescribeAuthorizedApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeAuthorizedApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAuthorizedApis(request: DescribeAuthorizedApisRequest): DescribeAuthorizedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAuthorizedApisWithOptions(request, runtime);
}

model DescribeAppSecurityRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DescribeAppSecurityResponse = {
  requestId: string(name='RequestId', description='requestId'),
  appKey: string(name='AppKey', description='data.appKey'),
  appSecret: string(name='AppSecret', description='data.appSecret'),
  createdTime: string(name='CreatedTime', description='data.gmtCreate'),
  modifiedTime: string(name='ModifiedTime', description='data.gmtModified'),
  appCode: string(name='AppCode', description='data.appCode'),
}

async function describeAppSecurityWithOptions(request: DescribeAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityResponse {
  Util.validateModel(request);
  return doRequest('DescribeAppSecurity', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityWithOptions(request, runtime);
}

model DescribeAppsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId?: long(name='AppId', description='appId'),
  appOwner?: long(name='AppOwner', description='appOwnerId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeAppsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apps: {
    appItem: [
      {
        appId: long(name='AppId', description='appId'),
        appName: string(name='AppName', description='appName'),
        description: string(name='Description', description='description'),
      }
    ](name='AppItem', description='AppItem'),
  }(name='Apps', description='data'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApps', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAppAttributesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId?: long(name='AppId', description='appId'),
  appName?: string(name='AppName', description='appName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='enableTagAuth'),
}

model DescribeAppAttributesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apps: {
    appAttribute: [
      {
        appId: long(name='AppId', description='appId'),
        appName: string(name='AppName', description='appName'),
        description: string(name='Description', description='description'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        modifiedTime: string(name='ModifiedTime', description='gmtModified'),
        tags: {
          tagInfo: [
            {
              key: string(name='Key', description='key'),
              value: string(name='Value', description='value'),
            }
          ](name='TagInfo', description='TagInfo'),
        }(name='Tags', description='tags'),
      }
    ](name='AppAttribute', description='AppAttribute'),
  }(name='Apps', description='data'),
}

async function describeAppAttributesWithOptions(request: DescribeAppAttributesRequest, runtime: Util.RuntimeOptions): DescribeAppAttributesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAppAttributes', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeAppAttributes(request: DescribeAppAttributesRequest): DescribeAppAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppAttributesWithOptions(request, runtime);
}

model DescribeApiTrafficDataRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  apiId: string(name='ApiId', description='apiUid'),
  groupId?: string(name='GroupId', description='groupId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeApiTrafficDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callUploads: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='CallUploads', description='data.uploadList'),
  callDownloads: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='CallDownloads', description='data.downloadList'),
}

async function describeApiTrafficDataWithOptions(request: DescribeApiTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiTrafficData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiTrafficData(request: DescribeApiTrafficDataRequest): DescribeApiTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficDataWithOptions(request, runtime);
}

model DescribeApiTrafficControlsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stageName: string(name='StageName', description='stageName'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeApiTrafficControlsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiTrafficControls: {
    apiTrafficControlItem: [
      {
        apiId: string(name='ApiId', description='apiId'),
        apiName: string(name='ApiName', description='apiName'),
        trafficControlId: string(name='TrafficControlId', description='ruleId'),
        trafficControlName: string(name='TrafficControlName', description='ruleName'),
        boundTime: string(name='BoundTime', description='createdTime'),
      }
    ](name='ApiTrafficControlItem', description='ApiTrafficControlItem'),
  }(name='ApiTrafficControls', description='data'),
}

async function describeApiTrafficControlsWithOptions(request: DescribeApiTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficControlsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiTrafficControls', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiTrafficControls(request: DescribeApiTrafficControlsRequest): DescribeApiTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficControlsWithOptions(request, runtime);
}

model DescribeApiSignaturesRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  stageName: string(name='StageName', description='stageName'),
  groupId: string(name='GroupId', description='groupId'),
  apiIds?: string(name='ApiIds', description='apiIds'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeApiSignaturesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiSignatures: {
    apiSignatureItem: [
      {
        apiId: string(name='ApiId', description='apiId'),
        apiName: string(name='ApiName', description='apiName'),
        signatureId: string(name='SignatureId', description='ruleId'),
        signatureName: string(name='SignatureName', description='ruleName'),
        boundTime: string(name='BoundTime', description='createdTime'),
      }
    ](name='ApiSignatureItem', description='ApiSignatureItem'),
  }(name='ApiSignatures', description='data'),
}

async function describeApiSignaturesWithOptions(request: DescribeApiSignaturesRequest, runtime: Util.RuntimeOptions): DescribeApiSignaturesResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiSignatures', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiSignatures(request: DescribeApiSignaturesRequest): DescribeApiSignaturesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiSignaturesWithOptions(request, runtime);
}

model DescribeApisByTrafficControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='ruleId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeApisByTrafficControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        description: string(name='Description', description='description'),
        visibility: string(name='Visibility', description='visibility'),
        boundTime: string(name='BoundTime', description='gmtCreate'),
      }
    ](name='ApiInfo', description='ApiInfo'),
  }(name='ApiInfos', description='data'),
}

async function describeApisByTrafficControlWithOptions(request: DescribeApisByTrafficControlRequest, runtime: Util.RuntimeOptions): DescribeApisByTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisByTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisByTrafficControl(request: DescribeApisByTrafficControlRequest): DescribeApisByTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByTrafficControlWithOptions(request, runtime);
}

model DescribeApisBySignatureRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId: string(name='SignatureId', description='ruleId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeApisBySignatureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiInfos: {
    apiInfo: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        stageName: string(name='StageName', description='stageName'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        description: string(name='Description', description='description'),
        visibility: string(name='Visibility', description='visibility'),
        boundTime: string(name='BoundTime', description='gmtCreate'),
      }
    ](name='ApiInfo', description='ApiInfo'),
  }(name='ApiInfos', description='data'),
}

async function describeApisBySignatureWithOptions(request: DescribeApisBySignatureRequest, runtime: Util.RuntimeOptions): DescribeApisBySignatureResponse {
  Util.validateModel(request);
  return doRequest('DescribeApisBySignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApisBySignature(request: DescribeApisBySignatureRequest): DescribeApisBySignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisBySignatureWithOptions(request, runtime);
}

model DescribeApisRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId?: string(name='ApiId', description='apiUid'),
  apiName?: string(name='ApiName', description='apiName'),
  catalogId?: string(name='CatalogId', description='tagId'),
  visibility?: string(name='Visibility', description='visibility'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='enableTagAuth'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DescribeApisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiSummarys: {
    apiSummary: [
      {
        regionId: string(name='RegionId', description='regionId'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        apiId: string(name='ApiId', description='apiUid'),
        apiName: string(name='ApiName', description='apiName'),
        visibility: string(name='Visibility', description='visibility'),
        description: string(name='Description', description='description'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        modifiedTime: string(name='ModifiedTime', description='gmtModified'),
      }
    ](name='ApiSummary', description='ApiSummary'),
  }(name='ApiSummarys', description='data'),
}

async function describeApisWithOptions(request: DescribeApisRequest, runtime: Util.RuntimeOptions): DescribeApisResponse {
  Util.validateModel(request);
  return doRequest('DescribeApis', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeApiQpsDataRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  apiId: string(name='ApiId', description='apiUid'),
  groupId?: string(name='GroupId', description='groupId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeApiQpsDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callSuccesses: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='CallSuccesses', description='data.successList'),
  callFails: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='CallFails', description='data.failList'),
}

async function describeApiQpsDataWithOptions(request: DescribeApiQpsDataRequest, runtime: Util.RuntimeOptions): DescribeApiQpsDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiQpsData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiQpsData(request: DescribeApiQpsDataRequest): DescribeApiQpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiQpsDataWithOptions(request, runtime);
}

model DescribeApiLatencyDataRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  apiId: string(name='ApiId', description='apiUid'),
  groupId?: string(name='GroupId', description='groupId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeApiLatencyDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  callLatencys: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='CallLatencys', description='data.responseTimeList'),
}

async function describeApiLatencyDataWithOptions(request: DescribeApiLatencyDataRequest, runtime: Util.RuntimeOptions): DescribeApiLatencyDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiLatencyData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiLatencyData(request: DescribeApiLatencyDataRequest): DescribeApiLatencyDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiLatencyDataWithOptions(request, runtime);
}

model DescribeApiHistoryRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
  historyVersion: string(name='HistoryVersion', description='version'),
}

model DescribeApiHistoryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  stageName: string(name='StageName', description='data.stageName'),
  apiId: string(name='ApiId', description='data.apiUid'),
  apiName: string(name='ApiName', description='data.apiName'),
  description: string(name='Description', description='data.description'),
  historyVersion: string(name='HistoryVersion', description='data.historyVersion'),
  status: string(name='Status', description='data.status'),
  visibility: string(name='Visibility', description='data.visibility'),
  authType: string(name='AuthType', description='data.authType'),
  resultType: string(name='ResultType', description='data.resultType'),
  resultSample: string(name='ResultSample', description='data.resultSample'),
  failResultSample: string(name='FailResultSample', description='data.failResultSample'),
  deployedTime: string(name='DeployedTime', description='data.gmtCreate'),
  allowSignatureMethod: string(name='AllowSignatureMethod', description='data.signatureMethod'),
  resultBodyModel: string(name='ResultBodyModel', description='data.resultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck', description='data.forceNonceCheck'),
  disableInternet: boolean(name='DisableInternet', description='data.disableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
        description: string(name='Description', description='description'),
      }
    ](name='ErrorCodeSample', description='ErrorCodeSample'),
  }(name='ErrorCodeSamples', description='data.errorCodeInfos'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id', description='id'),
        pid: string(name='Pid', description='pid'),
        hasChild: boolean(name='HasChild', description='hasChild'),
        key: string(name='Key', description='key'),
        name: string(name='Name', description='name'),
        mandatory: boolean(name='Mandatory', description='mandatory'),
        type: string(name='Type', description='type'),
        description: string(name='Description', description='description'),
      }
    ](name='ResultDescription', description='ResultDescription'),
  }(name='ResultDescriptions', description='data.resultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='SystemParameter', description='SystemParameter'),
  }(name='SystemParameters', description='data.systemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='CustomSystemParameter', description='CustomSystemParameter'),
  }(name='CustomSystemParameters', description='data.customSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        constantValue: string(name='ConstantValue', description='constantValue'),
        location: string(name='Location', description='location'),
        description: string(name='Description', description='description'),
      }
    ](name='ConstantParameter', description='ConstantParameter'),
  }(name='ConstantParameters', description='data.constantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName', description='apiParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
        required: string(name='Required', description='option'),
        defaultValue: string(name='DefaultValue', description='defaultValue'),
        demoValue: string(name='DemoValue', description='demoValue'),
        maxValue: long(name='MaxValue', description='maxValue'),
        minValue: long(name='MinValue', description='minValue'),
        maxLength: long(name='MaxLength', description='maxLength'),
        minLength: long(name='MinLength', description='minLength'),
        regularExpression: string(name='RegularExpression', description='regularExpression'),
        jsonScheme: string(name='JsonScheme', description='jsonScheme'),
        enumValue: string(name='EnumValue', description='enumValue'),
        docShow: string(name='DocShow', description='docShow'),
        docOrder: integer(name='DocOrder', description='docOrder'),
        description: string(name='Description', description='description'),
        arrayItemsType: string(name='ArrayItemsType', description='arrayItemsType'),
      }
    ](name='RequestParameter', description='RequestParameter'),
  }(name='RequestParameters', description='data.requestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
      }
    ](name='ServiceParameter', description='ServiceParameter'),
  }(name='ServiceParameters', description='data.serviceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        requestParameterName: string(name='RequestParameterName', description='requestParameterName'),
      }
    ](name='ServiceParameterMap', description='ServiceParameterMap'),
  }(name='ServiceParametersMap', description='data.parametersMap'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol', description='requestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod', description='requestHttpMethod'),
    requestPath: string(name='RequestPath', description='requestPath'),
    bodyFormat: string(name='BodyFormat', description='bodyFormat'),
    postBodyDescription: string(name='PostBodyDescription', description='postBodyDescription'),
    requestMode: string(name='RequestMode', description='requestMode'),
    bodyModel: string(name='BodyModel', description='bodyModel'),
  }(name='RequestConfig', description='data.requestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol', description='serviceProtocol'),
    serviceAddress: string(name='ServiceAddress', description='serviceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod', description='serviceHttpMethod'),
    servicePath: string(name='ServicePath', description='servicePath'),
    serviceTimeout: integer(name='ServiceTimeout', description='serviceTimeout'),
    mock: string(name='Mock', description='mock'),
    mockResult: string(name='MockResult', description='mockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable', description='serviceVpcEnable'),
    mockStatusCode: integer(name='MockStatusCode', description='mockStatusCode'),
    vpcId: string(name='VpcId', description='vpcId'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName', description='headerName'),
          headerValue: string(name='HeaderValue', description='headerValue'),
        }
      ](name='MockHeader', description='MockHeader'),
    }(name='MockHeaders', description='mockHeaders'),
    vpcConfig: {
      name: string(name='Name', description='name'),
      vpcId: string(name='VpcId', description='vpcId'),
      instanceId: string(name='InstanceId', description='displayInstanceId'),
      port: integer(name='Port', description='port'),
    }(name='VpcConfig', description='vpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId', description='fcRegionId'),
      serviceName: string(name='ServiceName', description='serviceName'),
      functionName: string(name='FunctionName', description='functionName'),
      roleArn: string(name='RoleArn', description='roleArn'),
    }(name='FunctionComputeConfig', description='functionComputeConfig'),
  }(name='ServiceConfig', description='data.serviceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType', description='openIdApiType'),
    idTokenParamName: string(name='IdTokenParamName', description='idTokenParamName'),
    publicKeyId: string(name='PublicKeyId', description='publicKeyId'),
    publicKey: string(name='PublicKey', description='publicKey'),
  }(name='OpenIdConnectConfig', description='data.openIdConnectConfig'),
}

async function describeApiHistoryWithOptions(request: DescribeApiHistoryRequest, runtime: Util.RuntimeOptions): DescribeApiHistoryResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiHistory', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiHistory(request: DescribeApiHistoryRequest): DescribeApiHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiHistoryWithOptions(request, runtime);
}

model DescribeApiGroupsRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  groupName?: string(name='GroupName', description='groupName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  enableTagAuth?: boolean(name='EnableTagAuth', description='enableTagAuth'),
  instanceId?: string(name='InstanceId', description='instanceId'),
}

model DescribeApiGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  apiGroupAttributes: {
    apiGroupAttribute: [
      {
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        subDomain: string(name='SubDomain', description='subDomain'),
        description: string(name='Description', description='description'),
        createdTime: string(name='CreatedTime', description='gmtCreate'),
        modifiedTime: string(name='ModifiedTime', description='gmtModified'),
        regionId: string(name='RegionId', description='regionId'),
        trafficLimit: integer(name='TrafficLimit', description='trafficLimit'),
        billingStatus: string(name='BillingStatus', description='billingStatus'),
        illegalStatus: string(name='IllegalStatus', description='illegalStatus'),
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceType: string(name='InstanceType', description='instanceType'),
        httpsPolicy: string(name='HttpsPolicy', description='httpsPolicy'),
        tags: {
          tagInfo: [
            {
              key: string(name='Key', description='key'),
              value: string(name='Value', description='value'),
            }
          ](name='TagInfo', description='TagInfo'),
        }(name='Tags', description='tags'),
      }
    ](name='ApiGroupAttribute', description='ApiGroupAttribute'),
  }(name='ApiGroupAttributes', description='data'),
}

async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: Util.RuntimeOptions): DescribeApiGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroups', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApiGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DescribeApiGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  subDomain: string(name='SubDomain', description='data.subDomain'),
  description: string(name='Description', description='data.description'),
  createdTime: string(name='CreatedTime', description='data.gmtCreate'),
  modifiedTime: string(name='ModifiedTime', description='data.gmtModified'),
  regionId: string(name='RegionId', description='data.regionId'),
  status: string(name='Status', description='data.status'),
  billingStatus: string(name='BillingStatus', description='data.billingStatus'),
  illegalStatus: string(name='IllegalStatus', description='data.illegalStatus'),
  ipv6Status: string(name='Ipv6Status', description='data.ipv6Status'),
  trafficLimit: integer(name='TrafficLimit', description='data.trafficLimit'),
  vpcDomain: string(name='VpcDomain', description='data.vpcSubDomain'),
  instanceType: string(name='InstanceType', description='data.instanceType'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  instanceVipList: string(name='InstanceVipList', description='data.instanceVipList'),
  httpsPolicy: string(name='HttpsPolicy', description='data.httpsPolicy'),
  userLogConfig: string(name='UserLogConfig', description='data.userLogConfig'),
  customTraceConfig: string(name='CustomTraceConfig', description='data.customTraceConfig'),
  passthroughHeaders: string(name='PassthroughHeaders', description='data.passthroughHeaders'),
  rpcPattern: string(name='RpcPattern', description='data.rpcPattern'),
  compatibleFlags: string(name='CompatibleFlags', description='data.compatibleFlags'),
  classicVpcSubDomain: string(name='ClassicVpcSubDomain', description='data.classicVpcSubDomain'),
  customDomains: {
    domainItem: [
      {
        domainName: string(name='DomainName', description='domainName'),
        certificateId: string(name='CertificateId', description='certificateId'),
        certificateName: string(name='CertificateName', description='certificateName'),
        domainCNAMEStatus: string(name='DomainCNAMEStatus', description='domainNameResolution'),
        domainBindingStatus: string(name='DomainBindingStatus', description='bindStatus'),
        bindStageName: string(name='BindStageName', description='bindStageName'),
        domainLegalStatus: string(name='DomainLegalStatus', description='domainLegalStatus'),
        domainWebSocketStatus: string(name='DomainWebSocketStatus', description='domainWebSocketStatus'),
        domainRemark: string(name='DomainRemark', description='remark'),
      }
    ](name='DomainItem', description='DomainItem'),
  }(name='CustomDomains', description='data.customDomains'),
  stageItems: {
    stageInfo: [
      {
        stageId: string(name='StageId', description='stageId'),
        stageName: string(name='StageName', description='stageName'),
        description: string(name='Description', description='description'),
      }
    ](name='StageInfo', description='StageInfo'),
  }(name='StageItems', description='data.stages'),
}

async function describeApiGroupWithOptions(request: DescribeApiGroupRequest, runtime: Util.RuntimeOptions): DescribeApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiGroup(request: DescribeApiGroupRequest): DescribeApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupWithOptions(request, runtime);
}

model DescribeApiErrorDataRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  apiId: string(name='ApiId', description='apiUid'),
  groupId?: string(name='GroupId', description='groupId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeApiErrorDataResponse = {
  requestId: string(name='RequestId', description='requestId'),
  clientErrors: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='ClientErrors', description='data.clientErrorList'),
  serverErrors: {
    monitorItem: [
      {
        itemTime: string(name='ItemTime', description='key'),
        itemValue: string(name='ItemValue', description='value'),
      }
    ](name='MonitorItem', description='MonitorItem'),
  }(name='ServerErrors', description='data.serverErrorList'),
}

async function describeApiErrorDataWithOptions(request: DescribeApiErrorDataRequest, runtime: Util.RuntimeOptions): DescribeApiErrorDataResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiErrorData', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiErrorData(request: DescribeApiErrorDataRequest): DescribeApiErrorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiErrorDataWithOptions(request, runtime);
}

model DescribeApiDocRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  stageName?: string(name='StageName', description='stageName'),
  apiId: string(name='ApiId', description='apiUid'),
}

model DescribeApiDocResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  stageName: string(name='StageName', description='data.stageName'),
  apiId: string(name='ApiId', description='data.apiUid'),
  apiName: string(name='ApiName', description='data.apiName'),
  description: string(name='Description', description='data.description'),
  visibility: string(name='Visibility', description='data.visibility'),
  authType: string(name='AuthType', description='data.authType'),
  resultType: string(name='ResultType', description='data.resultType'),
  resultSample: string(name='ResultSample', description='data.resultSample'),
  failResultSample: string(name='FailResultSample', description='data.failResultSample'),
  deployedTime: string(name='DeployedTime', description='data.gmtCreate'),
  forceNonceCheck: boolean(name='ForceNonceCheck', description='data.forceNonceCheck'),
  disableInternet: boolean(name='DisableInternet', description='data.disableInternet'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
        description: string(name='Description', description='description'),
      }
    ](name='ErrorCodeSample', description='ErrorCodeSample'),
  }(name='ErrorCodeSamples', description='data.errorCodeInfos'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id', description='id'),
        pid: string(name='Pid', description='pid'),
        hasChild: boolean(name='HasChild', description='hasChild'),
        key: string(name='Key', description='key'),
        name: string(name='Name', description='name'),
        mandatory: boolean(name='Mandatory', description='mandatory'),
        type: string(name='Type', description='type'),
        description: string(name='Description', description='description'),
      }
    ](name='ResultDescription', description='ResultDescription'),
  }(name='ResultDescriptions', description='data.resultDescriptions'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName', description='apiParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
        required: string(name='Required', description='option'),
        defaultValue: string(name='DefaultValue', description='defaultValue'),
        demoValue: string(name='DemoValue', description='demoValue'),
        maxValue: long(name='MaxValue', description='maxValue'),
        minValue: long(name='MinValue', description='minValue'),
        maxLength: long(name='MaxLength', description='maxLength'),
        minLength: long(name='MinLength', description='minLength'),
        regularExpression: string(name='RegularExpression', description='regularExpression'),
        jsonScheme: string(name='JsonScheme', description='jsonScheme'),
        enumValue: string(name='EnumValue', description='enumValue'),
        docShow: string(name='DocShow', description='docShow'),
        docOrder: integer(name='DocOrder', description='docOrder'),
        description: string(name='Description', description='description'),
        arrayItemsType: string(name='ArrayItemsType', description='arrayItemsType'),
      }
    ](name='RequestParameter', description='RequestParameter'),
  }(name='RequestParameters', description='data.requestParameters'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol', description='requestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod', description='requestHttpMethod'),
    requestPath: string(name='RequestPath', description='requestPath'),
    bodyFormat: string(name='BodyFormat', description='bodyFormat'),
    postBodyDescription: string(name='PostBodyDescription', description='postBodyDescription'),
    requestMode: string(name='RequestMode', description='requestMode'),
  }(name='RequestConfig', description='data.requestConfig'),
}

async function describeApiDocWithOptions(request: DescribeApiDocRequest, runtime: Util.RuntimeOptions): DescribeApiDocResponse {
  Util.validateModel(request);
  return doRequest('DescribeApiDoc', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocWithOptions(request, runtime);
}

model DescribeApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
}

model DescribeApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  apiId: string(name='ApiId', description='data.apiUid'),
  apiName: string(name='ApiName', description='data.apiName'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  visibility: string(name='Visibility', description='data.visibility'),
  authType: string(name='AuthType', description='data.authType'),
  resultType: string(name='ResultType', description='data.resultType'),
  resultSample: string(name='ResultSample', description='data.resultSample'),
  failResultSample: string(name='FailResultSample', description='data.failResultSample'),
  createdTime: string(name='CreatedTime', description='data.gmtCreate'),
  modifiedTime: string(name='ModifiedTime', description='data.gmtModified'),
  description: string(name='Description', description='data.description'),
  mock: string(name='Mock', description='data.mock'),
  mockResult: string(name='MockResult', description='data.mockResult'),
  allowSignatureMethod: string(name='AllowSignatureMethod', description='data.signatureMethod'),
  webSocketApiType: string(name='WebSocketApiType', description='data.webSocketApiType'),
  resultBodyModel: string(name='ResultBodyModel', description='data.resultBodyModel'),
  forceNonceCheck: boolean(name='ForceNonceCheck', description='data.forceNonceCheck'),
  disableInternet: boolean(name='DisableInternet', description='data.disableInternet'),
  appCodeAuthType: string(name='AppCodeAuthType', description='data.appCodeAuthType'),
  errorCodeSamples: {
    errorCodeSample: [
      {
        code: string(name='Code', description='code'),
        message: string(name='Message', description='message'),
        description: string(name='Description', description='description'),
        model: string(name='Model', description='model'),
      }
    ](name='ErrorCodeSample', description='ErrorCodeSample'),
  }(name='ErrorCodeSamples', description='data.errorCodeInfos'),
  resultDescriptions: {
    resultDescription: [
      {
        id: string(name='Id', description='id'),
        pid: string(name='Pid', description='pid'),
        hasChild: boolean(name='HasChild', description='hasChild'),
        key: string(name='Key', description='key'),
        name: string(name='Name', description='name'),
        mandatory: boolean(name='Mandatory', description='mandatory'),
        type: string(name='Type', description='type'),
        description: string(name='Description', description='description'),
      }
    ](name='ResultDescription', description='ResultDescription'),
  }(name='ResultDescriptions', description='data.resultDescriptions'),
  systemParameters: {
    systemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='SystemParameter', description='SystemParameter'),
  }(name='SystemParameters', description='data.systemParameters'),
  customSystemParameters: {
    customSystemParameter: [
      {
        parameterName: string(name='ParameterName', description='apiParameterName'),
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        demoValue: string(name='DemoValue', description='demoValue'),
        description: string(name='Description', description='description'),
      }
    ](name='CustomSystemParameter', description='CustomSystemParameter'),
  }(name='CustomSystemParameters', description='data.customSystemParameters'),
  constantParameters: {
    constantParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        constantValue: string(name='ConstantValue', description='constantValue'),
        location: string(name='Location', description='location'),
        description: string(name='Description', description='description'),
      }
    ](name='ConstantParameter', description='ConstantParameter'),
  }(name='ConstantParameters', description='data.constantParameters'),
  requestParameters: {
    requestParameter: [
      {
        apiParameterName: string(name='ApiParameterName', description='apiParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
        required: string(name='Required', description='option'),
        defaultValue: string(name='DefaultValue', description='defaultValue'),
        demoValue: string(name='DemoValue', description='demoValue'),
        maxValue: long(name='MaxValue', description='maxValue'),
        minValue: long(name='MinValue', description='minValue'),
        maxLength: long(name='MaxLength', description='maxLength'),
        minLength: long(name='MinLength', description='minLength'),
        regularExpression: string(name='RegularExpression', description='regularExpression'),
        jsonScheme: string(name='JsonScheme', description='jsonScheme'),
        enumValue: string(name='EnumValue', description='enumValue'),
        docShow: string(name='DocShow', description='docShow'),
        docOrder: integer(name='DocOrder', description='docOrder'),
        description: string(name='Description', description='description'),
        arrayItemsType: string(name='ArrayItemsType', description='arrayItemsType'),
      }
    ](name='RequestParameter', description='RequestParameter'),
  }(name='RequestParameters', description='data.requestParameters'),
  serviceParameters: {
    serviceParameter: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        location: string(name='Location', description='location'),
        parameterType: string(name='ParameterType', description='parameterType'),
      }
    ](name='ServiceParameter', description='ServiceParameter'),
  }(name='ServiceParameters', description='data.serviceParameters'),
  serviceParametersMap: {
    serviceParameterMap: [
      {
        serviceParameterName: string(name='ServiceParameterName', description='serviceParameterName'),
        requestParameterName: string(name='RequestParameterName', description='requestParameterName'),
      }
    ](name='ServiceParameterMap', description='ServiceParameterMap'),
  }(name='ServiceParametersMap', description='data.parametersMap'),
  deployedInfos: {
    deployedInfo: [
      {
        stageName: string(name='StageName', description='stageName'),
        effectiveVersion: string(name='EffectiveVersion', description='runVersion'),
        deployedStatus: string(name='DeployedStatus', description='deployedStatus'),
      }
    ](name='DeployedInfo', description='DeployedInfo'),
  }(name='DeployedInfos', description='data.apiDeployedInfos'),
  requestConfig: {
    requestProtocol: string(name='RequestProtocol', description='requestProtocol'),
    requestHttpMethod: string(name='RequestHttpMethod', description='requestHttpMethod'),
    requestPath: string(name='RequestPath', description='requestPath'),
    bodyFormat: string(name='BodyFormat', description='bodyFormat'),
    postBodyDescription: string(name='PostBodyDescription', description='postBodyDescription'),
    requestMode: string(name='RequestMode', description='requestMode'),
    bodyModel: string(name='BodyModel', description='bodyModel'),
  }(name='RequestConfig', description='data.requestConfig'),
  serviceConfig: {
    serviceProtocol: string(name='ServiceProtocol', description='serviceProtocol'),
    serviceAddress: string(name='ServiceAddress', description='serviceAddress'),
    serviceHttpMethod: string(name='ServiceHttpMethod', description='serviceHttpMethod'),
    servicePath: string(name='ServicePath', description='servicePath'),
    serviceTimeout: integer(name='ServiceTimeout', description='serviceTimeout'),
    contentTypeCatagory: string(name='ContentTypeCatagory', description='contentTypeCatagory'),
    contentTypeValue: string(name='ContentTypeValue', description='contentTypeValue'),
    mock: string(name='Mock', description='mock'),
    mockResult: string(name='MockResult', description='mockResult'),
    serviceVpcEnable: string(name='ServiceVpcEnable', description='serviceVpcEnable'),
    aoneAppName: string(name='AoneAppName', description='aoneAppName'),
    mockStatusCode: integer(name='MockStatusCode', description='mockStatusCode'),
    mockHeaders: {
      mockHeader: [
        {
          headerName: string(name='HeaderName', description='headerName'),
          headerValue: string(name='HeaderValue', description='headerValue'),
        }
      ](name='MockHeader', description='MockHeader'),
    }(name='MockHeaders', description='mockHeaders'),
    vpcConfig: {
      name: string(name='Name', description='name'),
      vpcId: string(name='VpcId', description='vpcId'),
      instanceId: string(name='InstanceId', description='displayInstanceId'),
      port: integer(name='Port', description='port'),
    }(name='VpcConfig', description='vpcConfig'),
    functionComputeConfig: {
      regionId: string(name='RegionId', description='fcRegionId'),
      serviceName: string(name='ServiceName', description='serviceName'),
      functionName: string(name='FunctionName', description='functionName'),
      roleArn: string(name='RoleArn', description='roleArn'),
    }(name='FunctionComputeConfig', description='functionComputeConfig'),
  }(name='ServiceConfig', description='data.serviceConfig'),
  openIdConnectConfig: {
    openIdApiType: string(name='OpenIdApiType', description='openIdApiType'),
    idTokenParamName: string(name='IdTokenParamName', description='idTokenParamName'),
    publicKeyId: string(name='PublicKeyId', description='publicKeyId'),
    publicKey: string(name='PublicKey', description='publicKey'),
  }(name='OpenIdConnectConfig', description='data.openIdConnectConfig'),
}

async function describeApiWithOptions(request: DescribeApiRequest, runtime: Util.RuntimeOptions): DescribeApiResponse {
  Util.validateModel(request);
  return doRequest('DescribeApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DeployApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
  description: string(name='Description', description='description'),
}

model DeployApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deployApiWithOptions(request: DeployApiRequest, runtime: Util.RuntimeOptions): DeployApiResponse {
  Util.validateModel(request);
  return doRequest('DeployApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiWithOptions(request, runtime);
}

model DeleteTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
  specialType: string(name='SpecialType', description='specialType'),
  specialKey: string(name='SpecialKey', description='specialKey'),
}

model DeleteTrafficSpecialControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteTrafficSpecialControlWithOptions(request: DeleteTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficSpecialControlWithOptions(request, runtime);
}

model DeleteTrafficControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
}

model DeleteTrafficControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteTrafficControlWithOptions(request: DeleteTrafficControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficControlWithOptions(request, runtime);
}

model DeleteSignatureRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureId: string(name='SignatureId', description='secretKeyId'),
}

model DeleteSignatureResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteSignatureWithOptions(request: DeleteSignatureRequest, runtime: Util.RuntimeOptions): DeleteSignatureResponse {
  Util.validateModel(request);
  return doRequest('DeleteSignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteSignature(request: DeleteSignatureRequest): DeleteSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSignatureWithOptions(request, runtime);
}

model DeleteDomainCertificateRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
  certificateId: string(name='CertificateId', description='certificateId'),
}

model DeleteDomainCertificateResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDomainCertificateWithOptions(request: DeleteDomainCertificateRequest, runtime: Util.RuntimeOptions): DeleteDomainCertificateResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomainCertificate', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainCertificateWithOptions(request, runtime);
}

model DeleteDomainRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  domainName: string(name='DomainName', description='domainName'),
}

model DeleteDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomain', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appId: long(name='AppId', description='appId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DeleteAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  return doRequest('DeleteApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteApiGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DeleteApiGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteApiGroupWithOptions(request: DeleteApiGroupRequest, runtime: Util.RuntimeOptions): DeleteApiGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiGroupWithOptions(request, runtime);
}

model DeleteApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
}

model DeleteApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteApiWithOptions(request: DeleteApiRequest, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  return doRequest('DeleteApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiWithOptions(request, runtime);
}

model DeleteAllTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAllTrafficSpecialControlWithOptions(request: DeleteAllTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteAllTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('DeleteAllTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllTrafficSpecialControlWithOptions(request, runtime);
}

model CreateTrafficControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlName: string(name='TrafficControlName', description='trafficControlName'),
  trafficControlUnit: string(name='TrafficControlUnit', description='trafficControlUnit'),
  apiDefault: integer(name='ApiDefault', description='apiDefault'),
  userDefault?: integer(name='UserDefault', description='userDefault'),
  appDefault?: integer(name='AppDefault', description='appDefault'),
  description?: string(name='Description', description='description'),
}

model CreateTrafficControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
  trafficControlId: string(name='TrafficControlId', description='data'),
}

async function createTrafficControlWithOptions(request: CreateTrafficControlRequest, runtime: Util.RuntimeOptions): CreateTrafficControlResponse {
  Util.validateModel(request);
  return doRequest('CreateTrafficControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficControlWithOptions(request, runtime);
}

model CreateSignatureRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  signatureName: string(name='SignatureName', description='secretKeyName'),
  signatureKey: string(name='SignatureKey', description='secretKey'),
  signatureSecret: string(name='SignatureSecret', description='secretValue'),
}

model CreateSignatureResponse = {
  requestId: string(name='RequestId', description='requestId'),
  signatureId: string(name='SignatureId', description='data.secretKeyId'),
  signatureName: string(name='SignatureName', description='data.secretKeyName'),
}

async function createSignatureWithOptions(request: CreateSignatureRequest, runtime: Util.RuntimeOptions): CreateSignatureResponse {
  Util.validateModel(request);
  return doRequest('CreateSignature', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createSignature(request: CreateSignatureRequest): CreateSignatureResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSignatureWithOptions(request, runtime);
}

model CreateAppRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  appName: string(name='AppName', description='appName'),
  description?: string(name='Description', description='description'),
  source?: string(name='Source', description='source'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model CreateAppResponse = {
  requestId: string(name='RequestId', description='requestId'),
  appId: long(name='AppId', description='data'),
  tagStatus: boolean(name='TagStatus', description='tagStatus'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('CreateApp', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateApiGroupRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupName: string(name='GroupName', description='groupName'),
  description?: string(name='Description', description='description'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model CreateApiGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='data.groupId'),
  groupName: string(name='GroupName', description='data.groupName'),
  subDomain: string(name='SubDomain', description='data.subDomain'),
  description: string(name='Description', description='data.description'),
  instanceId: string(name='InstanceId', description='data.instanceId'),
  instanceType: string(name='InstanceType', description='data.instanceType'),
  tagStatus: boolean(name='TagStatus', description='tagStatus'),
}

async function createApiGroupWithOptions(request: CreateApiGroupRequest, runtime: Util.RuntimeOptions): CreateApiGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateApiGroup', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupWithOptions(request, runtime);
}

model CreateApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId: string(name='GroupId', description='groupId'),
  apiName: string(name='ApiName', description='apiName'),
  visibility: string(name='Visibility', description='visibility'),
  description?: string(name='Description', description='apiDescription'),
  authType?: string(name='AuthType', description='authType'),
  requestConfig: string(name='RequestConfig', description='requestConfigStr'),
  serviceConfig: string(name='ServiceConfig', description='serviceConfigStr'),
  requestParameters?: string(name='RequestParameters', description='requestParamtersStr'),
  systemParameters?: string(name='SystemParameters', description='systemParametersStr'),
  constantParameters?: string(name='ConstantParameters', description='constantParametersStr'),
  serviceParameters?: string(name='ServiceParameters', description='serviceParameterStr'),
  serviceParametersMap?: string(name='ServiceParametersMap', description='serviceParametersMapStr'),
  resultType?: string(name='ResultType', description='apiResultType'),
  resultSample?: string(name='ResultSample', description='apiResultSample'),
  failResultSample?: string(name='FailResultSample', description='apiFailResultSample'),
  errorCodeSamples?: string(name='ErrorCodeSamples', description='apiErrorCodeSample'),
  resultDescriptions?: string(name='ResultDescriptions', description='apiResultDescription'),
  openIdConnectConfig?: string(name='OpenIdConnectConfig', description='openIdConnectConfigStr'),
  allowSignatureMethod?: string(name='AllowSignatureMethod', description='signatureMethod'),
  webSocketApiType?: string(name='WebSocketApiType', description='webSocketApiType'),
  resultBodyModel?: string(name='ResultBodyModel', description='apiResultBodyModel'),
  forceNonceCheck?: boolean(name='ForceNonceCheck', description='forceNonceCheck'),
  disableInternet?: boolean(name='DisableInternet', description='disableInternet'),
  appCodeAuthType?: string(name='AppCodeAuthType', description='appCodeAuthType'),
}

model CreateApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
  apiId: string(name='ApiId', description='data'),
}

async function createApiWithOptions(request: CreateApiRequest, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  return doRequest('CreateApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiWithOptions(request, runtime);
}

model AddTrafficSpecialControlRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  trafficControlId: string(name='TrafficControlId', description='trafficControlId'),
  specialType: string(name='SpecialType', description='specialType'),
  specialKey: string(name='SpecialKey', description='specialKey'),
  trafficValue: integer(name='TrafficValue', description='trafficValue'),
}

model AddTrafficSpecialControlResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addTrafficSpecialControlWithOptions(request: AddTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): AddTrafficSpecialControlResponse {
  Util.validateModel(request);
  return doRequest('AddTrafficSpecialControl', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrafficSpecialControlWithOptions(request, runtime);
}

model AbolishApiRequest = {
  securityToken?: string(name='SecurityToken', description='securityToken'),
  groupId?: string(name='GroupId', description='groupId'),
  apiId: string(name='ApiId', description='apiUid'),
  stageName: string(name='StageName', description='stageName'),
}

model AbolishApiResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function abolishApiWithOptions(request: AbolishApiRequest, runtime: Util.RuntimeOptions): AbolishApiResponse {
  Util.validateModel(request);
  return doRequest('AbolishApi', 'HTTPS', 'POST', '2016-07-14', 'AK', null, request, runtime);
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
