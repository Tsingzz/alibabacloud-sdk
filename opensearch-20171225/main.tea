import Util;
import ROA;
import EndpointUtil;

extends ROA;

const version = '2017-12-25';

init(config: ROA.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpointHost = getEndpoint('opensearch', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpointHost);
}


model CreateModelRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model CreateModelResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: map[string]any(name='result', description='result'),
}

model CreateModelResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: CreateModelResponseBody(name='body', description='body'),
}

async function createModelWithOptions(appGroupIdentity: string, request: CreateModelRequest, runtime: Util.RuntimeOptions): CreateModelResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/simple-models`, null, request.headers, null, runtime);
}

async function createModel(appGroupIdentity: string, request: CreateModelRequest): CreateModelResponse {
  var runtime = new Util.RuntimeOptions{};
  return createModelWithOptions(appGroupIdentity, request, runtime);
}

model GetModelProgressRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model GetModelProgressResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    progress: integer(name='progress', description='progress'),
    status: string(name='status', description='status'),
  }(name='result', description='result'),
}

model GetModelProgressResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: GetModelProgressResponseBody(name='body', description='body'),
}

async function getModelProgressWithOptions(appGroupIdentity: string, modelId: string, request: GetModelProgressRequest, runtime: Util.RuntimeOptions): GetModelProgressResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/simple-models/${modelId}/progress`, null, request.headers, null, runtime);
}

async function getModelProgress(appGroupIdentity: string, modelId: string, request: GetModelProgressRequest): GetModelProgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return getModelProgressWithOptions(appGroupIdentity, modelId, request, runtime);
}

model DescribeAppRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model DescribeAppResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    id: string(name='id', description='id'),
    description: string(name='description', description='description'),
    status: string(name='status', description='status'),
    type: string(name='type', description='type'),
    clusterName: string(name='clusterName', description='clusterName'),
    algoDeploymentId: integer(name='algoDeploymentId', description='algoDeploymentId'),
    created: integer(name='created', description='created'),
    autoSwitch: boolean(name='autoSwitch', description='autoSwitch'),
    progressPercent: integer(name='progressPercent', description='progressPercent'),
    schema: map[string]any(name='schema', description='schema'),
    quota: {
      docSize: integer(name='docSize', description='docSize'),
      computeResource: integer(name='computeResource', description='computeResource'),
      qps: integer(name='qps', description='qps'),
      spec: string(name='spec', description='spec'),
    }(name='quota', description='quota'),
    fetchFields: [ string ](name='fetchFields', description='fetchFields'),
  }(name='result', description='result'),
}

model DescribeAppResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: DescribeAppResponseBody(name='body', description='body'),
}

async function describeAppWithOptions(appGroupIdentity: string, appId: string, request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, null, request.headers, null, runtime);
}

async function describeApp(appGroupIdentity: string, appId: string, request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(appGroupIdentity, appId, request, runtime);
}

model DescribeAppGroupRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model DescribeAppGroupResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    id: string(name='id', description='id'),
    name: string(name='name', description='name'),
    currentVersion: string(name='currentVersion', description='currentVersion'),
    switchedTime: integer(name='switchedTime', description='switchedTime'),
    chargingWay: integer(name='chargingWay', description='chargingWay'),
    type: string(name='type', description='type'),
    projectId: string(name='projectId', description='projectId'),
    chargeType: string(name='chargeType', description='chargeType'),
    expireOn: string(name='expireOn', description='expireOn'),
    instanceId: string(name='instanceId', description='instanceId'),
    commodityCode: string(name='commodityCode', description='commodityCode'),
    processingOrderId: string(name='processingOrderId', description='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId', description='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId', description='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId', description='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description', description='description'),
    produced: integer(name='produced', description='produced'),
    lockedByExpiration: integer(name='lockedByExpiration', description='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask', description='hasPendingQuotaReviewTask'),
    created: integer(name='created', description='created'),
    updated: integer(name='updated', description='updated'),
    status: string(name='status', description='status'),
    lockMode: string(name='lockMode', description='lockMode'),
    quota: {
      docSize: integer(name='docSize', description='docSize'),
      computeResource: integer(name='computeResource', description='computeResource'),
      spec: string(name='spec', description='spec'),
    }(name='quota', description='quota'),
  }(name='result', description='result'),
}

model DescribeAppGroupResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: DescribeAppGroupResponseBody(name='body', description='body'),
}

async function describeAppGroupWithOptions(appGroupIdentity: string, request: DescribeAppGroupRequest, runtime: Util.RuntimeOptions): DescribeAppGroupResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function describeAppGroup(appGroupIdentity: string, request: DescribeAppGroupRequest): DescribeAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model CreateAppGroupRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model CreateAppGroupResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    id: string(name='id', description='id'),
    name: string(name='name', description='name'),
    currentVersion: string(name='currentVersion', description='currentVersion'),
    switchedTime: integer(name='switchedTime', description='switchedTime'),
    chargingWay: integer(name='chargingWay', description='chargingWay'),
    type: string(name='type', description='type'),
    projectId: string(name='projectId', description='projectId'),
    chargeType: string(name='chargeType', description='chargeType'),
    expireOn: string(name='expireOn', description='expireOn'),
    instanceId: string(name='instanceId', description='instanceId'),
    commodityCode: string(name='commodityCode', description='commodityCode'),
    processingOrderId: string(name='processingOrderId', description='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId', description='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId', description='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId', description='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description', description='description'),
    produced: integer(name='produced', description='produced'),
    lockedByExpiration: integer(name='lockedByExpiration', description='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask', description='hasPendingQuotaReviewTask'),
    created: integer(name='created', description='created'),
    updated: integer(name='updated', description='updated'),
    status: string(name='status', description='status'),
    lockMode: string(name='lockMode', description='lockMode'),
    quota: {
      docSize: integer(name='docSize', description='docSize'),
      computeResource: integer(name='computeResource', description='computeResource'),
      spec: string(name='spec', description='spec'),
    }(name='quota', description='quota'),
  }(name='result', description='result'),
}

model CreateAppGroupResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: CreateAppGroupResponseBody(name='body', description='body'),
}

async function createAppGroupWithOptions(request: CreateAppGroupRequest, runtime: Util.RuntimeOptions): CreateAppGroupResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups`, null, request.headers, null, runtime);
}

async function createAppGroup(request: CreateAppGroupRequest): CreateAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppGroupWithOptions(request, runtime);
}

model RemoveAppRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model RemoveAppResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: [ integer ](name='result', description='result'),
}

model RemoveAppResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: RemoveAppResponseBody(name='body', description='body'),
}

async function removeAppWithOptions(appGroupIdentity: string, appId: string, request: RemoveAppRequest, runtime: Util.RuntimeOptions): RemoveAppResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appId}`, null, request.headers, null, runtime);
}

async function removeApp(appGroupIdentity: string, appId: string, request: RemoveAppRequest): RemoveAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppWithOptions(appGroupIdentity, appId, request, runtime);
}

model CreateAppQuery = {
  dryRun?: boolean(name='dryRun', description='dryRun'),
}

model CreateAppRequest = {
  headers?: map[string]string(name='headers', description='headers'),
  query?: CreateAppQuery(name='query', description='query'),
}

model CreateAppResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: map[string]any(name='result', description='result'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: CreateAppResponseBody(name='body', description='body'),
}

async function createAppWithOptions(appGroupIdentity: string, request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function createApp(appGroupIdentity: string, request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(appGroupIdentity, request, runtime);
}

model ModifyAppGroupRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model ModifyAppGroupResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    id: string(name='id', description='id'),
    name: string(name='name', description='name'),
    currentVersion: string(name='currentVersion', description='currentVersion'),
    switchedTime: integer(name='switchedTime', description='switchedTime'),
    chargingWay: integer(name='chargingWay', description='chargingWay'),
    type: string(name='type', description='type'),
    projectId: string(name='projectId', description='projectId'),
    chargeType: string(name='chargeType', description='chargeType'),
    expireOn: string(name='expireOn', description='expireOn'),
    instanceId: string(name='instanceId', description='instanceId'),
    commodityCode: string(name='commodityCode', description='commodityCode'),
    processingOrderId: string(name='processingOrderId', description='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId', description='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId', description='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId', description='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description', description='description'),
    produced: integer(name='produced', description='produced'),
    lockedByExpiration: integer(name='lockedByExpiration', description='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask', description='hasPendingQuotaReviewTask'),
    created: integer(name='created', description='created'),
    updated: integer(name='updated', description='updated'),
    status: string(name='status', description='status'),
    lockMode: string(name='lockMode', description='lockMode'),
    quota: {
      docSize: integer(name='docSize', description='docSize'),
      computeResource: integer(name='computeResource', description='computeResource'),
      spec: string(name='spec', description='spec'),
    }(name='quota', description='quota'),
  }(name='result', description='result'),
}

model ModifyAppGroupResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: ModifyAppGroupResponseBody(name='body', description='body'),
}

async function modifyAppGroupWithOptions(appGroupIdentity: string, request: ModifyAppGroupRequest, runtime: Util.RuntimeOptions): ModifyAppGroupResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function modifyAppGroup(appGroupIdentity: string, request: ModifyAppGroupRequest): ModifyAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model ModifyAppGroupQuotaRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model ModifyAppGroupQuotaResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    id: string(name='id', description='id'),
    name: string(name='name', description='name'),
    currentVersion: string(name='currentVersion', description='currentVersion'),
    switchedTime: integer(name='switchedTime', description='switchedTime'),
    chargingWay: integer(name='chargingWay', description='chargingWay'),
    type: string(name='type', description='type'),
    projectId: string(name='projectId', description='projectId'),
    chargeType: string(name='chargeType', description='chargeType'),
    expireOn: string(name='expireOn', description='expireOn'),
    instanceId: string(name='instanceId', description='instanceId'),
    commodityCode: string(name='commodityCode', description='commodityCode'),
    processingOrderId: string(name='processingOrderId', description='processingOrderId'),
    firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId', description='firstRankAlgoDeploymentId'),
    secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId', description='secondRankAlgoDeploymentId'),
    pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId', description='pendingSecondRankAlgoDeploymentId'),
    description: string(name='description', description='description'),
    produced: integer(name='produced', description='produced'),
    lockedByExpiration: integer(name='lockedByExpiration', description='lockedByExpiration'),
    hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask', description='hasPendingQuotaReviewTask'),
    created: integer(name='created', description='created'),
    updated: integer(name='updated', description='updated'),
    status: string(name='status', description='status'),
    lockMode: string(name='lockMode', description='lockMode'),
    quota: {
      docSize: integer(name='docSize', description='docSize'),
      computeResource: integer(name='computeResource', description='computeResource'),
      spec: string(name='spec', description='spec'),
    }(name='quota', description='quota'),
  }(name='result', description='result'),
}

model ModifyAppGroupQuotaResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: ModifyAppGroupQuotaResponseBody(name='body', description='body'),
}

async function modifyAppGroupQuotaWithOptions(appGroupIdentity: string, request: ModifyAppGroupQuotaRequest, runtime: Util.RuntimeOptions): ModifyAppGroupQuotaResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/quota`, null, request.headers, null, runtime);
}

async function modifyAppGroupQuota(appGroupIdentity: string, request: ModifyAppGroupQuotaRequest): ModifyAppGroupQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppGroupQuotaWithOptions(appGroupIdentity, request, runtime);
}

model ListAppGroupsQuery = {
  pageNumber?: integer(name='pageNumber', description='pageNumber'),
  pageSize?: integer(name='pageSize', description='pageSize'),
  instanceId?: string(name='instanceId', description='instanceId'),
  name?: string(name='name', description='name'),
  type?: string(name='type', description='type'),
  sortBy?: integer(name='sortBy', description='sortBy'),
}

model ListAppGroupsRequest = {
  headers?: map[string]string(name='headers', description='headers'),
  query?: ListAppGroupsQuery(name='query', description='query'),
}

model ListAppGroupsResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  totalCount: integer(name='totalCount', description='totalCount'),
  result: [
    {
      id: string(name='id', description='id'),
      name: string(name='name', description='name'),
      currentVersion: string(name='currentVersion', description='currentVersion'),
      switchedTime: integer(name='switchedTime', description='switchedTime'),
      chargingWay: integer(name='chargingWay', description='chargingWay'),
      type: string(name='type', description='type'),
      projectId: string(name='projectId', description='projectId'),
      chargeType: string(name='chargeType', description='chargeType'),
      expireOn: string(name='expireOn', description='expireOn'),
      instanceId: string(name='instanceId', description='instanceId'),
      commodityCode: string(name='commodityCode', description='commodityCode'),
      processingOrderId: string(name='processingOrderId', description='processingOrderId'),
      firstRankAlgoDeploymentId: integer(name='firstRankAlgoDeploymentId', description='firstRankAlgoDeploymentId'),
      secondRankAlgoDeploymentId: integer(name='secondRankAlgoDeploymentId', description='secondRankAlgoDeploymentId'),
      pendingSecondRankAlgoDeploymentId: integer(name='pendingSecondRankAlgoDeploymentId', description='pendingSecondRankAlgoDeploymentId'),
      description: string(name='description', description='description'),
      produced: integer(name='produced', description='produced'),
      lockedByExpiration: integer(name='lockedByExpiration', description='lockedByExpiration'),
      hasPendingQuotaReviewTask: integer(name='hasPendingQuotaReviewTask', description='hasPendingQuotaReviewTask'),
      created: integer(name='created', description='created'),
      updated: integer(name='updated', description='updated'),
      status: string(name='status', description='status'),
      lockMode: string(name='lockMode', description='lockMode'),
      quota: {
        docSize: integer(name='docSize', description='docSize'),
        computeResource: integer(name='computeResource', description='computeResource'),
        spec: string(name='spec', description='spec'),
      }(name='quota', description='quota'),
    }
  ](name='result', description='result'),
}

model ListAppGroupsResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: ListAppGroupsResponseBody(name='body', description='body'),
}

async function listAppGroupsWithOptions(request: ListAppGroupsRequest, runtime: Util.RuntimeOptions): ListAppGroupsResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listAppGroups(request: ListAppGroupsRequest): ListAppGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppGroupsWithOptions(request, runtime);
}

model DescribeAppsRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model DescribeAppsResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: [ map[string]any ](name='result', description='result'),
}

model DescribeAppsResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: DescribeAppsResponseBody(name='body', description='body'),
}

async function describeAppsWithOptions(appGroupIdentity: string, request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps`, null, request.headers, null, runtime);
}

async function describeApps(appGroupIdentity: string, request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(appGroupIdentity, request, runtime);
}

model RemoveAppGroupRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model RemoveAppGroupResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: [ integer ](name='result', description='result'),
}

model RemoveAppGroupResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: RemoveAppGroupResponseBody(name='body', description='body'),
}

async function removeAppGroupWithOptions(appGroupIdentity: string, request: RemoveAppGroupRequest, runtime: Util.RuntimeOptions): RemoveAppGroupResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}`, null, request.headers, null, runtime);
}

async function removeAppGroup(appGroupIdentity: string, request: RemoveAppGroupRequest): RemoveAppGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppGroupWithOptions(appGroupIdentity, request, runtime);
}

model ListSortScriptsRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model ListSortScriptsResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: [
    {
      scriptName: string(name='scriptName', description='scriptName'),
      type: string(name='type', description='type'),
      scope: string(name='scope', description='scope'),
      status: string(name='status', description='status'),
      createTime: string(name='createTime', description='createTime'),
      modifyTime: string(name='modifyTime', description='modifyTime'),
    }
  ](name='result', description='result'),
}

model ListSortScriptsResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: ListSortScriptsResponseBody(name='body', description='body'),
}

async function listSortScriptsWithOptions(appGroupIdentity: string, appVersionId: string, request: ListSortScriptsRequest, runtime: Util.RuntimeOptions): ListSortScriptsResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, null, request.headers, null, runtime);
}

async function listSortScripts(appGroupIdentity: string, appVersionId: string, request: ListSortScriptsRequest): ListSortScriptsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSortScriptsWithOptions(appGroupIdentity, appVersionId, request, runtime);
}

model GetSortScriptRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model GetSortScriptResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    type: string(name='type', description='type'),
    scope: string(name='scope', description='scope'),
    status: string(name='status', description='status'),
    createTime: string(name='createTime', description='createTime'),
    modifyTime: string(name='modifyTime', description='modifyTime'),
  }(name='result', description='result'),
}

model GetSortScriptResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: GetSortScriptResponseBody(name='body', description='body'),
}

async function getSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptRequest, runtime: Util.RuntimeOptions): GetSortScriptResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, null, request.headers, null, runtime);
}

async function getSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptRequest): GetSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model GetSortScriptFileRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model GetSortScriptFileResponseBody = {
  requestId: string(name='requestId', description='requestId'),
  result: {
    content: string(name='content', description='content'),
    version: long(name='version', description='version'),
    createTime: string(name='createTime', description='createTime'),
    modifyTime: string(name='modifyTime', description='modifyTime'),
  }(name='result', description='result'),
}

model GetSortScriptFileResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: GetSortScriptFileResponseBody(name='body', description='body'),
}

async function getSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptFileRequest, runtime: Util.RuntimeOptions): GetSortScriptFileResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/UserScorer.cava`, null, request.headers, null, runtime);
}

async function getSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, request: GetSortScriptFileRequest): GetSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model CompileSortScriptRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model CompileSortScriptResponseBody = {
  requestId: string(name='requestId', description='requestId'),
}

model CompileSortScriptResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: CompileSortScriptResponseBody(name='body', description='body'),
}

async function compileSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: CompileSortScriptRequest, runtime: Util.RuntimeOptions): CompileSortScriptResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/compiling`, null, request.headers, null, runtime);
}

async function compileSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: CompileSortScriptRequest): CompileSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return compileSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model DeleteSortScriptRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model DeleteSortScriptResponseBody = {
  requestId: string(name='requestId', description='requestId'),
}

model DeleteSortScriptResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: DeleteSortScriptResponseBody(name='body', description='body'),
}

async function deleteSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: DeleteSortScriptRequest, runtime: Util.RuntimeOptions): DeleteSortScriptResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'DELETE', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}`, null, request.headers, null, runtime);
}

async function deleteSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: DeleteSortScriptRequest): DeleteSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model CreateSortScriptRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model CreateSortScriptResponseBody = {
  requestId: string(name='requestId', description='requestId'),
}

model CreateSortScriptResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: CreateSortScriptResponseBody(name='body', description='body'),
}

async function createSortScriptWithOptions(appGroupIdentity: string, appVersionId: string, request: CreateSortScriptRequest, runtime: Util.RuntimeOptions): CreateSortScriptResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts`, null, request.headers, null, runtime);
}

async function createSortScript(appGroupIdentity: string, appVersionId: string, request: CreateSortScriptRequest): CreateSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSortScriptWithOptions(appGroupIdentity, appVersionId, request, runtime);
}

model SaveSortScriptFileRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model SaveSortScriptFileResponseBody = {
  requestId: string(name='requestId', description='requestId'),
}

model SaveSortScriptFileResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: SaveSortScriptFileResponseBody(name='body', description='body'),
}

async function saveSortScriptFileWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: SaveSortScriptFileRequest, runtime: Util.RuntimeOptions): SaveSortScriptFileResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'PUT', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/files/src/UserScorer.cava`, null, request.headers, null, runtime);
}

async function saveSortScriptFile(appGroupIdentity: string, scriptName: string, appVersionId: string, request: SaveSortScriptFileRequest): SaveSortScriptFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveSortScriptFileWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model ReleaseSortScriptRequest = {
  headers?: map[string]string(name='headers', description='headers'),
}

model ReleaseSortScriptResponseBody = {
  requestId: string(name='requestId', description='requestId'),
}

model ReleaseSortScriptResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: ReleaseSortScriptResponseBody(name='body', description='body'),
}

async function releaseSortScriptWithOptions(appGroupIdentity: string, scriptName: string, appVersionId: string, request: ReleaseSortScriptRequest, runtime: Util.RuntimeOptions): ReleaseSortScriptResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'POST', 'AK', `/v4/openapi/app-groups/${appGroupIdentity}/apps/${appVersionId}/sort-scripts/${scriptName}/actions/release`, null, request.headers, null, runtime);
}

async function releaseSortScript(appGroupIdentity: string, scriptName: string, appVersionId: string, request: ReleaseSortScriptRequest): ReleaseSortScriptResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseSortScriptWithOptions(appGroupIdentity, scriptName, appVersionId, request, runtime);
}

model DescribeRegionsQuery = {
  acceptLanguage?: string(name='accept_language', description='accept_language'),
}

model DescribeRegionsRequest = {
  headers?: map[string]string(name='headers', description='headers'),
  query?: DescribeRegionsQuery(name='query', description='query'),
}

model DescribeRegionsResponseBody = {
  requestId: string(name='request_id', description='request_id'),
  status: string(name='status', description='status'),
  errors: {
    error: [
      {
        code: integer(name='code', description='code'),
        message: string(name='message', description='message'),
      }
    ](name='error', description='error'),
  }(name='errors', description='errors'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers', description='headers'),
  body: DescribeRegionsResponseBody(name='body', description='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/regions`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListAppsQuery = {
  group?: boolean(name='group', description='group'),
  page?: integer(name='page', description='page'),
  size?: integer(name='size', description='size'),
}

model ListAppsRequest = {
  headers?: map[string]string(name='headers', description='headers'),
  query?: ListAppsQuery(name='query', description='query'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers', description='headers'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  return doRequest('2017-12-25', 'HTTPS', 'GET', 'AK', `/v4/openapi/apps`, Util.stringifyMapValue(request.query), request.headers, null, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
