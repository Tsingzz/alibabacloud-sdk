import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('pailabel', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetDatasetRequest = {
  datasetId: long(name='DatasetId', description='datasetId'),
}

model GetDatasetResponse = {
  requestId: string(name='RequestId', description='requestId'),
  errMsg: string(name='ErrMsg', description='errMsg'),
  errCode: integer(name='ErrCode', description='errCode'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  data: {
    id: long(name='Id', description='id'),
    userId: string(name='UserId', description='userId'),
    ownerId: string(name='OwnerId', description='ownerId'),
    name: string(name='Name', description='name'),
    storageType: string(name='StorageType', description='storageType'),
    registerType: string(name='RegisterType', description='registerType'),
    storagePath: string(name='StoragePath', description='storagePath'),
    dataType: string(name='DataType', description='dataType'),
    sourcePath: string(name='SourcePath', description='sourcePath'),
    status: string(name='Status', description='status'),
    gmtCreate: string(name='GmtCreate', description='gmtCreate'),
    utcCreate: string(name='UtcCreate', description='utcCreate'),
    gmtModified: string(name='GmtModified', description='gmtModified'),
    utcModified: long(name='UtcModified', description='utcModified'),
    uid: string(name='Uid', description='uid'),
    taskId: long(name='TaskId', description='taskId'),
    tmpDownloadUrl: string(name='TmpDownloadUrl', description='tmpDownloadUrl'),
    tags: [ map[string]any ](name='Tags', description='tags'),
  }(name='Data', description='data'),
}

async function getDatasetWithOptions(request: GetDatasetRequest, runtime: Util.RuntimeOptions): GetDatasetResponse {
  Util.validateModel(request);
  return doRequest('GetDataset', 'HTTPS', 'POST', '2020-06-08', 'AK', null, request, runtime);
}

async function getDataset(request: GetDatasetRequest): GetDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDatasetWithOptions(request, runtime);
}

model ListDatasetsRequest = {
  pageNumber: integer(name='PageNumber', description='pageNum'),
  pageSize: integer(name='PageSize', description='pageSize'),
  nameLike?: string(name='NameLike', description='nameLike'),
}

model ListDatasetsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  errMsg: string(name='ErrMsg', description='errMsg'),
  errCode: integer(name='ErrCode', description='errCode'),
  success: boolean(name='Success', description='success'),
  code: string(name='Code', description='code'),
  data: {
    pageIndex: integer(name='PageIndex', description='pageIndex'),
    pageSize: integer(name='PageSize', description='pageSize'),
    totalNum: integer(name='TotalNum', description='totalNum'),
    totalPages: integer(name='TotalPages', description='totalPages'),
    data: [ map[string]any ](name='Data', description='data'),
  }(name='Data', description='data'),
}

async function listDatasetsWithOptions(request: ListDatasetsRequest, runtime: Util.RuntimeOptions): ListDatasetsResponse {
  Util.validateModel(request);
  return doRequest('ListDatasets', 'HTTPS', 'POST', '2020-06-08', 'AK', null, request, runtime);
}

async function listDatasets(request: ListDatasetsRequest): ListDatasetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDatasetsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
