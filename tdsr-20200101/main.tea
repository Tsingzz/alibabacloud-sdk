import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'lyj.cn-hangzhou.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('tdsr', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model SaveHotspotTagRequest = {
  paramTag?: string(name='ParamTag', description='ParamTag'),
  accountId?: string(name='AccountId', description='AccountId'),
}

model SaveHotspotTagResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
}

async function saveHotspotTagWithOptions(request: SaveHotspotTagRequest, runtime: Util.RuntimeOptions): SaveHotspotTagResponse {
  Util.validateModel(request);
  return doRequest('SaveHotspotTag', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function saveHotspotTag(request: SaveHotspotTagRequest): SaveHotspotTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveHotspotTagWithOptions(request, runtime);
}

model GetSceneListRequest = {
  accountId?: string(name='AccountId', description='AccountId'),
}

model GetSceneListResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function getSceneListWithOptions(request: GetSceneListRequest, runtime: Util.RuntimeOptions): GetSceneListResponse {
  Util.validateModel(request);
  return doRequest('GetSceneList', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function getSceneList(request: GetSceneListRequest): GetSceneListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSceneListWithOptions(request, runtime);
}

model SaveFileRequest = {
  paramFile?: string(name='ParamFile', description='ParamFile'),
  accountId?: string(name='AccountId', description='AccountId'),
}

model SaveFileResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function saveFileWithOptions(request: SaveFileRequest, runtime: Util.RuntimeOptions): SaveFileResponse {
  Util.validateModel(request);
  return doRequest('SaveFile', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function saveFile(request: SaveFileRequest): SaveFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveFileWithOptions(request, runtime);
}

model DeleteFileRequest = {
  paramFile?: string(name='ParamFile', description='ParamFile'),
  accountId?: string(name='AccountId', description='AccountId'),
}

model DeleteFileResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
}

async function deleteFileWithOptions(request: DeleteFileRequest, runtime: Util.RuntimeOptions): DeleteFileResponse {
  Util.validateModel(request);
  return doRequest('DeleteFile', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function deleteFile(request: DeleteFileRequest): DeleteFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileWithOptions(request, runtime);
}

model GetHotspotTagRequest = {
  previewToken?: string(name='PreviewToken', description='PreviewToken'),
  subSceneId?: string(name='SubSceneId', description='SubSceneId'),
  type?: string(name='Type', description='Type'),
}

model GetHotspotTagResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function getHotspotTagWithOptions(request: GetHotspotTagRequest, runtime: Util.RuntimeOptions): GetHotspotTagResponse {
  Util.validateModel(request);
  return doRequest('GetHotspotTag', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function getHotspotTag(request: GetHotspotTagRequest): GetHotspotTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return getHotspotTagWithOptions(request, runtime);
}

model GetPolicyRequest = {
  subSceneId?: string(name='SubSceneId', description='SubSceneId'),
  type?: string(name='Type', description='Type'),
  accountId?: string(name='AccountId', description='AccountId'),
}

model GetPolicyResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function getPolicyWithOptions(request: GetPolicyRequest, runtime: Util.RuntimeOptions): GetPolicyResponse {
  Util.validateModel(request);
  return doRequest('GetPolicy', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function getPolicy(request: GetPolicyRequest): GetPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPolicyWithOptions(request, runtime);
}

model PublishHotspotRequest = {
  paramTag?: string(name='ParamTag', description='ParamTag'),
  accountId?: string(name='AccountId', description='AccountId'),
}

model PublishHotspotResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function publishHotspotWithOptions(request: PublishHotspotRequest, runtime: Util.RuntimeOptions): PublishHotspotResponse {
  Util.validateModel(request);
  return doRequest('PublishHotspot', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function publishHotspot(request: PublishHotspotRequest): PublishHotspotResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishHotspotWithOptions(request, runtime);
}

model GetWindowConfigRequest = {
  previewToken?: string(name='PreviewToken', description='PreviewToken'),
}

model GetWindowConfigResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function getWindowConfigWithOptions(request: GetWindowConfigRequest, runtime: Util.RuntimeOptions): GetWindowConfigResponse {
  Util.validateModel(request);
  return doRequest('GetWindowConfig', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function getWindowConfig(request: GetWindowConfigRequest): GetWindowConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWindowConfigWithOptions(request, runtime);
}

model GetSceneDataRequest = {
  token?: string(name='Token', description='Token'),
}

model GetSceneDataResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: string(name='Data', description='Data'),
}

async function getSceneDataWithOptions(request: GetSceneDataRequest, runtime: Util.RuntimeOptions): GetSceneDataResponse {
  Util.validateModel(request);
  return doRequest('GetSceneData', 'HTTPS', 'POST', '2020-01-01', 'AK,APP,PrivateKey,BearerToken', null, request, runtime);
}

async function getSceneData(request: GetSceneDataRequest): GetSceneDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSceneDataWithOptions(request, runtime);
}

model CheckPermissionRequest = {
  aliyunId?: string(name='AliyunId', description='AliyunId'),
}

model CheckPermissionResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
}

async function checkPermissionWithOptions(request: CheckPermissionRequest, runtime: Util.RuntimeOptions): CheckPermissionResponse {
  Util.validateModel(request);
  return doRequest('CheckPermission', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function checkPermission(request: CheckPermissionRequest): CheckPermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkPermissionWithOptions(request, runtime);
}

model CheckResourceRequest = {
  country: string(name='Country', description='country'),
  interrupt?: boolean(name='Interrupt', description='interrupt'),
  invoker: string(name='Invoker', description='invoker'),
  pk: string(name='Pk', description='pk'),
  bid: string(name='Bid', description='bid'),
  hid: long(name='Hid', description='hid'),
  taskIdentifier: string(name='TaskIdentifier', description='taskIdentifier'),
  taskExtraData: string(name='TaskExtraData', description='taskExtraData'),
  gmtWakeup: string(name='GmtWakeup', description='gmtWakeup'),
  success?: boolean(name='Success', description='success'),
  message?: string(name='Message', description='message'),
  level?: long(name='Level', description='level'),
  url?: string(name='Url', description='url'),
  prompt?: string(name='Prompt', description='prompt'),
}

model CheckResourceResponse = {
  interrupt: boolean(name='Interrupt', description='interrupt'),
  invoker: string(name='Invoker', description='invoker'),
  pk: string(name='Pk', description='pk'),
  bid: string(name='Bid', description='bid'),
  hid: long(name='Hid', description='hid'),
  country: string(name='Country', description='country'),
  taskIdentifier: string(name='TaskIdentifier', description='taskIdentifier'),
  taskExtraData: string(name='TaskExtraData', description='taskExtraData'),
  gmtWakeup: string(name='GmtWakeup', description='gmtWakeup'),
  success: boolean(name='Success', description='success'),
  message: string(name='Message', description='message'),
  level: long(name='Level', description='level'),
  url: string(name='Url', description='url'),
  prompt: string(name='Prompt', description='prompt'),
  requestId: string(name='RequestId', description='RequestId'),
}

async function checkResourceWithOptions(request: CheckResourceRequest, runtime: Util.RuntimeOptions): CheckResourceResponse {
  Util.validateModel(request);
  return doRequest('CheckResource', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function checkResource(request: CheckResourceRequest): CheckResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkResourceWithOptions(request, runtime);
}

model CreateSceneRequest = {
  name?: string(name='Name', description='Name'),
  projectId?: string(name='ProjectId', description='ProjectId'),
}

model CreateSceneResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  sceneId: long(name='SceneId', description='SceneId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  previewToken: string(name='PreviewToken', description='PreviewToken'),
}

async function createSceneWithOptions(request: CreateSceneRequest, runtime: Util.RuntimeOptions): CreateSceneResponse {
  Util.validateModel(request);
  return doRequest('CreateScene', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSceneWithOptions(request, runtime);
}

model CreateProjectRequest = {
  name?: string(name='Name', description='Name'),
  businessId?: string(name='BusinessId', description='BusinessId'),
  businessUserIdList?: string(name='BusinessUserIdList', description='BusinessUserIdList'),
  gatherUserIdList?: string(name='GatherUserIdList', description='GatherUserIdList'),
  builderUserIdList?: string(name='BuilderUserIdList', description='BuilderUserIdList'),
}

model CreateProjectResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  id: long(name='Id', description='Id'),
  name: string(name='Name', description='Name'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
}

async function createProjectWithOptions(request: CreateProjectRequest, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  return doRequest('CreateProject', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProjectWithOptions(request, runtime);
}

model DeleteProjectRequest = {
  projectId?: string(name='ProjectId', description='ProjectId'),
}

model DeleteProjectResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
}

async function deleteProjectWithOptions(request: DeleteProjectRequest, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  return doRequest('DeleteProject', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteProjectWithOptions(request, runtime);
}

model ListScenesRequest = {
  projectId?: string(name='ProjectId', description='ProjectId'),
  isPublishQuery?: boolean(name='IsPublishQuery', description='IsPublishQuery'),
}

model ListScenesResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  success: boolean(name='Success', description='Success'),
  errMessage: string(name='ErrMessage', description='ErrMessage'),
  data: [
    {
      sceneId: string(name='SceneId', description='SceneId'),
    }
  ](name='Data', description='Data'),
}

async function listScenesWithOptions(request: ListScenesRequest, runtime: Util.RuntimeOptions): ListScenesResponse {
  Util.validateModel(request);
  return doRequest('ListScenes', 'HTTPS', 'POST', '2020-01-01', 'AK', null, request, runtime);
}

async function listScenes(request: ListScenesRequest): ListScenesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listScenesWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
