import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('kms', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListSecretsRequest = {
  fetchTags?: string(name='FetchTags', description='FetchTags'),
  pageNumber?: integer(name='PageNumber', description='PageNumber'),
  pageSize?: integer(name='PageSize', description='PageSize'),
}

model ListSecretsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  secretList: {
    secret: [
      {
        secretName: string(name='SecretName', description='SecretName'),
        createTime: string(name='CreateTime', description='CreateTime'),
        updateTime: string(name='UpdateTime', description='UpdateTime'),
        plannedDeleteTime: string(name='PlannedDeleteTime', description='PlannedDeleteTime'),
        tags: {
          tag: [
            {
              tagKey: string(name='TagKey', description='TagKey'),
              tagValue: string(name='TagValue', description='TagValue'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='Tags'),
      }
    ](name='Secret', description='Secret'),
  }(name='SecretList', description='SecretList'),
}

async function listSecretsWithOptions(request: ListSecretsRequest, runtime: Util.RuntimeOptions): ListSecretsResponse {
  Util.validateModel(request);
  return doRequest('ListSecrets', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listSecrets(request: ListSecretsRequest): ListSecretsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecretsWithOptions(request, runtime);
}

model ListSecretVersionIdsRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  includeDeprecated?: string(name='IncludeDeprecated', description='IncludeDeprecated'),
  pageNumber?: integer(name='PageNumber', description='PageNumber'),
  pageSize?: integer(name='PageSize', description='PageSize'),
}

model ListSecretVersionIdsResponse = {
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  versionIds: {
    versionId: [
      {
        createTime: string(name='CreateTime', description='CreateTime'),
        versionId: string(name='VersionId', description='VersionId'),
        versionStages: {
          versionStage: [ string ](name='VersionStage', description='VersionStage'),
        }(name='VersionStages', description='VersionStages'),
      }
    ](name='VersionId', description='VersionId'),
  }(name='VersionIds', description='VersionIds'),
}

async function listSecretVersionIdsWithOptions(request: ListSecretVersionIdsRequest, runtime: Util.RuntimeOptions): ListSecretVersionIdsResponse {
  Util.validateModel(request);
  return doRequest('ListSecretVersionIds', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listSecretVersionIds(request: ListSecretVersionIdsRequest): ListSecretVersionIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSecretVersionIdsWithOptions(request, runtime);
}

model DescribeSecretRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  fetchTags?: string(name='FetchTags', description='FetchTags'),
}

model DescribeSecretResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  arn: string(name='Arn', description='Arn'),
  secretName: string(name='SecretName', description='SecretName'),
  encryptionKeyId: string(name='EncryptionKeyId', description='EncryptionKeyId'),
  description: string(name='Description', description='Description'),
  createTime: string(name='CreateTime', description='CreateTime'),
  updateTime: string(name='UpdateTime', description='UpdateTime'),
  plannedDeleteTime: string(name='PlannedDeleteTime', description='PlannedDeleteTime'),
  tags: {
    tag: [
      {
        tagKey: string(name='TagKey', description='TagKey'),
        tagValue: string(name='TagValue', description='TagValue'),
      }
    ](name='Tag', description='Tag'),
  }(name='Tags', description='Tags'),
}

async function describeSecretWithOptions(request: DescribeSecretRequest, runtime: Util.RuntimeOptions): DescribeSecretResponse {
  Util.validateModel(request);
  return doRequest('DescribeSecret', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function describeSecret(request: DescribeSecretRequest): DescribeSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecretWithOptions(request, runtime);
}

model UpdateSecretRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  description?: string(name='Description', description='Description'),
}

model UpdateSecretResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
}

async function updateSecretWithOptions(request: UpdateSecretRequest, runtime: Util.RuntimeOptions): UpdateSecretResponse {
  Util.validateModel(request);
  return doRequest('UpdateSecret', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function updateSecret(request: UpdateSecretRequest): UpdateSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSecretWithOptions(request, runtime);
}

model GetSecretValueRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  versionStage?: string(name='VersionStage', description='VersionStage'),
  versionId?: string(name='VersionId', description='VersionId'),
}

model GetSecretValueResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
  versionId: string(name='VersionId', description='VersionId'),
  createTime: string(name='CreateTime', description='CreateTime'),
  secretData: string(name='SecretData', description='SecretData'),
  secretDataType: string(name='SecretDataType', description='SecretDataType'),
  versionStages: {
    versionStage: [ string ](name='VersionStage', description='VersionStage'),
  }(name='VersionStages', description='VersionStages'),
}

async function getSecretValueWithOptions(request: GetSecretValueRequest, runtime: Util.RuntimeOptions): GetSecretValueResponse {
  Util.validateModel(request);
  return doRequest('GetSecretValue', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function getSecretValue(request: GetSecretValueRequest): GetSecretValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSecretValueWithOptions(request, runtime);
}

model GetRandomPasswordRequest = {
  passwordLength?: string(name='PasswordLength', description='PasswordLength'),
  excludeCharacters?: string(name='ExcludeCharacters', description='ExcludeCharacters'),
  excludeLowercase?: string(name='ExcludeLowercase', description='ExcludeLowercase'),
  excludeUppercase?: string(name='ExcludeUppercase', description='ExcludeUppercase'),
  excludeNumbers?: string(name='ExcludeNumbers', description='ExcludeNumbers'),
  excludePunctuation?: string(name='ExcludePunctuation', description='ExcludePunctuation'),
  requireEachIncludedType?: string(name='RequireEachIncludedType', description='RequireEachIncludedType'),
}

model GetRandomPasswordResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  randomPassword: string(name='RandomPassword', description='RandomPassword'),
}

async function getRandomPasswordWithOptions(request: GetRandomPasswordRequest, runtime: Util.RuntimeOptions): GetRandomPasswordResponse {
  Util.validateModel(request);
  return doRequest('GetRandomPassword', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function getRandomPassword(request: GetRandomPasswordRequest): GetRandomPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRandomPasswordWithOptions(request, runtime);
}

model RestoreSecretRequest = {
  secretName: string(name='SecretName', description='SecretName'),
}

model RestoreSecretResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
}

async function restoreSecretWithOptions(request: RestoreSecretRequest, runtime: Util.RuntimeOptions): RestoreSecretResponse {
  Util.validateModel(request);
  return doRequest('RestoreSecret', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function restoreSecret(request: RestoreSecretRequest): RestoreSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return restoreSecretWithOptions(request, runtime);
}

model CreateSecretRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  versionId: string(name='VersionId', description='VersionId'),
  encryptionKeyId?: string(name='EncryptionKeyId', description='EncryptionKeyId'),
  secretData: string(name='SecretData', description='SecretData'),
  secretDataType?: string(name='SecretDataType', description='SecretDataType'),
  description?: string(name='Description', description='Description'),
  tags?: string(name='Tags', description='Tags'),
}

model CreateSecretResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  arn: string(name='Arn', description='Arn'),
  versionId: string(name='VersionId', description='VersionId'),
  secretName: string(name='SecretName', description='SecretName'),
}

async function createSecretWithOptions(request: CreateSecretRequest, runtime: Util.RuntimeOptions): CreateSecretResponse {
  Util.validateModel(request);
  return doRequest('CreateSecret', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function createSecret(request: CreateSecretRequest): CreateSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecretWithOptions(request, runtime);
}

model PutSecretValueRequest = {
  versionId: string(name='VersionId', description='VersionId'),
  secretName: string(name='SecretName', description='SecretName'),
  secretData: string(name='SecretData', description='SecretData'),
  secretDataType?: string(name='SecretDataType', description='SecretDataType'),
  versionStages?: string(name='VersionStages', description='VersionStages'),
}

model PutSecretValueResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
  versionId: string(name='VersionId', description='VersionId'),
  versionStages: {
    versionStage: [ string ](name='VersionStage', description='VersionStage'),
  }(name='VersionStages', description='VersionStages'),
}

async function putSecretValueWithOptions(request: PutSecretValueRequest, runtime: Util.RuntimeOptions): PutSecretValueResponse {
  Util.validateModel(request);
  return doRequest('PutSecretValue', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function putSecretValue(request: PutSecretValueRequest): PutSecretValueResponse {
  var runtime = new Util.RuntimeOptions{};
  return putSecretValueWithOptions(request, runtime);
}

model DeleteSecretRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  forceDeleteWithoutRecovery?: string(name='ForceDeleteWithoutRecovery', description='ForceDeleteWithoutRecovery'),
  recoveryWindowInDays?: string(name='RecoveryWindowInDays', description='RecoveryWindowInDays'),
}

model DeleteSecretResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  secretName: string(name='SecretName', description='SecretName'),
  plannedDeleteTime: string(name='PlannedDeleteTime', description='PlannedDeleteTime'),
}

async function deleteSecretWithOptions(request: DeleteSecretRequest, runtime: Util.RuntimeOptions): DeleteSecretResponse {
  Util.validateModel(request);
  return doRequest('DeleteSecret', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function deleteSecret(request: DeleteSecretRequest): DeleteSecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecretWithOptions(request, runtime);
}

model UpdateSecretVersionStageRequest = {
  secretName: string(name='SecretName', description='SecretName'),
  versionStage: string(name='VersionStage', description='VersionStage'),
  removeFromVersion?: string(name='RemoveFromVersion', description='RemoveFromVersion'),
  moveToVersion?: string(name='MoveToVersion', description='MoveToVersion'),
}

model UpdateSecretVersionStageResponse = {
  secretName: string(name='SecretName', description='SecretName'),
  requestId: string(name='RequestId', description='RequestId'),
}

async function updateSecretVersionStageWithOptions(request: UpdateSecretVersionStageRequest, runtime: Util.RuntimeOptions): UpdateSecretVersionStageResponse {
  Util.validateModel(request);
  return doRequest('UpdateSecretVersionStage', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function updateSecretVersionStage(request: UpdateSecretVersionStageRequest): UpdateSecretVersionStageResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateSecretVersionStageWithOptions(request, runtime);
}

model AsymmetricDecryptRequest = {
  ciphertextBlob: string(name='CiphertextBlob', description='CiphertextBlob'),
  keyId: string(name='KeyId', description='KeyId'),
  keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
  algorithm: string(name='Algorithm', description='Algorithm'),
}

model AsymmetricDecryptResponse = {
  plaintext: string(name='Plaintext', description='plaintext'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function asymmetricDecryptWithOptions(request: AsymmetricDecryptRequest, runtime: Util.RuntimeOptions): AsymmetricDecryptResponse {
  Util.validateModel(request);
  return doRequest('AsymmetricDecrypt', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function asymmetricDecrypt(request: AsymmetricDecryptRequest): AsymmetricDecryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return asymmetricDecryptWithOptions(request, runtime);
}

model AsymmetricVerifyRequest = {
  keyId: string(name='KeyId', description='KeyId'),
  keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
  algorithm: string(name='Algorithm', description='Algorithm'),
  digest: string(name='Digest', description='Digest'),
  value: string(name='Value', description='Value'),
}

model AsymmetricVerifyResponse = {
  value: boolean(name='Value', description='value'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function asymmetricVerifyWithOptions(request: AsymmetricVerifyRequest, runtime: Util.RuntimeOptions): AsymmetricVerifyResponse {
  Util.validateModel(request);
  return doRequest('AsymmetricVerify', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function asymmetricVerify(request: AsymmetricVerifyRequest): AsymmetricVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return asymmetricVerifyWithOptions(request, runtime);
}

model AsymmetricSignRequest = {
  keyId: string(name='KeyId', description='KeyId'),
  keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
  algorithm: string(name='Algorithm', description='Algorithm'),
  digest: string(name='Digest', description='Digest'),
}

model AsymmetricSignResponse = {
  value: string(name='Value', description='value'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function asymmetricSignWithOptions(request: AsymmetricSignRequest, runtime: Util.RuntimeOptions): AsymmetricSignResponse {
  Util.validateModel(request);
  return doRequest('AsymmetricSign', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function asymmetricSign(request: AsymmetricSignRequest): AsymmetricSignResponse {
  var runtime = new Util.RuntimeOptions{};
  return asymmetricSignWithOptions(request, runtime);
}

model AsymmetricEncryptRequest = {
  plaintext: string(name='Plaintext', description='Plaintext'),
  keyId: string(name='KeyId', description='KeyId'),
  keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
  algorithm: string(name='Algorithm', description='Algorithm'),
}

model AsymmetricEncryptResponse = {
  ciphertextBlob: string(name='CiphertextBlob', description='CiphertextBlob'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function asymmetricEncryptWithOptions(request: AsymmetricEncryptRequest, runtime: Util.RuntimeOptions): AsymmetricEncryptResponse {
  Util.validateModel(request);
  return doRequest('AsymmetricEncrypt', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function asymmetricEncrypt(request: AsymmetricEncryptRequest): AsymmetricEncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return asymmetricEncryptWithOptions(request, runtime);
}

model GetPublicKeyRequest = {
  keyId: string(name='KeyId', description='KeyId'),
  keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
}

model GetPublicKeyResponse = {
  publicKey: string(name='PublicKey', description='publicKey'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function getPublicKeyWithOptions(request: GetPublicKeyRequest, runtime: Util.RuntimeOptions): GetPublicKeyResponse {
  Util.validateModel(request);
  return doRequest('GetPublicKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function getPublicKey(request: GetPublicKeyRequest): GetPublicKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublicKeyWithOptions(request, runtime);
}

model GenerateDataKeyWithoutPlaintextRequest = {
  keyId: string(name='KeyId', description='keyId'),
  keySpec?: string(name='KeySpec', description='keySpec'),
  numberOfBytes?: integer(name='NumberOfBytes', description='bytesNumber'),
  encryptionContext?: map[string]any(name='EncryptionContext', description='encryptionContext'),
}

model GenerateDataKeyWithoutPlaintextResponse = {
  ciphertextBlob: string(name='CiphertextBlob', description='ciphertextBlob'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function generateDataKeyWithoutPlaintextWithOptions(request: GenerateDataKeyWithoutPlaintextRequest, runtime: Util.RuntimeOptions): GenerateDataKeyWithoutPlaintextResponse {
  Util.validateModel(request);
  return doRequest('GenerateDataKeyWithoutPlaintext', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function generateDataKeyWithoutPlaintext(request: GenerateDataKeyWithoutPlaintextRequest): GenerateDataKeyWithoutPlaintextResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDataKeyWithoutPlaintextWithOptions(request, runtime);
}

model UpdateKeyDescriptionRequest = {
  keyId: string(name='KeyId', description='keyId'),
  description: string(name='Description', description='desc'),
}

model UpdateKeyDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateKeyDescriptionWithOptions(request: UpdateKeyDescriptionRequest, runtime: Util.RuntimeOptions): UpdateKeyDescriptionResponse {
  Util.validateModel(request);
  return doRequest('UpdateKeyDescription', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function updateKeyDescription(request: UpdateKeyDescriptionRequest): UpdateKeyDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateKeyDescriptionWithOptions(request, runtime);
}

model DescribeKeyVersionRequest = {
  keyId: string(name='KeyId', description='keyId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

model DescribeKeyVersionResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  keyVersion: {
    keyId: string(name='KeyId', description='KeyId'),
    keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
    creationDate: string(name='CreationDate', description='CreationDate'),
  }(name='KeyVersion', description='KeyVersion'),
}

async function describeKeyVersionWithOptions(request: DescribeKeyVersionRequest, runtime: Util.RuntimeOptions): DescribeKeyVersionResponse {
  Util.validateModel(request);
  return doRequest('DescribeKeyVersion', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function describeKeyVersion(request: DescribeKeyVersionRequest): DescribeKeyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyVersionWithOptions(request, runtime);
}

model UpdateRotationPolicyRequest = {
  keyId: string(name='KeyId', description='KeyId'),
  enableAutomaticRotation: boolean(name='EnableAutomaticRotation', description='EnableAutomaticRotation'),
  rotationInterval?: string(name='RotationInterval', description='RotationInterval'),
}

model UpdateRotationPolicyResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function updateRotationPolicyWithOptions(request: UpdateRotationPolicyRequest, runtime: Util.RuntimeOptions): UpdateRotationPolicyResponse {
  Util.validateModel(request);
  return doRequest('UpdateRotationPolicy', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function updateRotationPolicy(request: UpdateRotationPolicyRequest): UpdateRotationPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateRotationPolicyWithOptions(request, runtime);
}

model ListKeyVersionsRequest = {
  keyId: string(name='KeyId', description='KeyIdKeyId'),
  pageNumber?: integer(name='PageNumber', description='PageNumber'),
  pageSize?: integer(name='PageSize', description='PageSize'),
}

model ListKeyVersionsResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  totalCount: integer(name='TotalCount', description='TotalCount'),
  pageNumber: integer(name='PageNumber', description='PageNumber'),
  pageSize: integer(name='PageSize', description='PageSize'),
  keyVersions: {
    keyVersion: [
      {
        keyId: string(name='KeyId', description='KeyId'),
        keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
        creationDate: string(name='CreationDate', description='CreationDate'),
      }
    ](name='KeyVersion', description='KeyVersion'),
  }(name='KeyVersions', description='KeyVersions'),
}

async function listKeyVersionsWithOptions(request: ListKeyVersionsRequest, runtime: Util.RuntimeOptions): ListKeyVersionsResponse {
  Util.validateModel(request);
  return doRequest('ListKeyVersions', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listKeyVersions(request: ListKeyVersionsRequest): ListKeyVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listKeyVersionsWithOptions(request, runtime);
}

model CreateKeyVersionRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model CreateKeyVersionResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  keyVersion: {
    keyId: string(name='KeyId', description='KeyId'),
    keyVersionId: string(name='KeyVersionId', description='KeyVersionId'),
    creationDate: string(name='CreationDate', description='CreationDate'),
  }(name='KeyVersion', description='KeyVersion'),
}

async function createKeyVersionWithOptions(request: CreateKeyVersionRequest, runtime: Util.RuntimeOptions): CreateKeyVersionResponse {
  Util.validateModel(request);
  return doRequest('CreateKeyVersion', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function createKeyVersion(request: CreateKeyVersionRequest): CreateKeyVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyVersionWithOptions(request, runtime);
}

model DescribeServiceRequest = {
}

model DescribeServiceResponse = {
  requestId: string(name='RequestId', description='RequestId'),
  protectionLevels: {
    protectionLevel: [
      {
        type: string(name='Type', description='Type'),
      }
    ](name='ProtectionLevel', description='ProtectionLevel'),
  }(name='ProtectionLevels', description='ProtectionLevels'),
  keySpecs: {
    keySpec: [
      {
        name: string(name='Name', description='Name'),
        supportedProtectionLevels: {
          supportedProtectionLevel: [ string ](name='SupportedProtectionLevel', description='SupportedProtectionLevel'),
        }(name='SupportedProtectionLevels', description='SupportedProtectionLevels'),
        usages: {
          usage: [ string ](name='Usage', description='Usage'),
        }(name='Usages', description='Usages'),
      }
    ](name='KeySpec', description='KeySpec'),
  }(name='KeySpecs', description='KeySpecs'),
}

async function describeServiceWithOptions(request: DescribeServiceRequest, runtime: Util.RuntimeOptions): DescribeServiceResponse {
  Util.validateModel(request);
  return doRequest('DescribeService', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function describeService(request: DescribeServiceRequest): DescribeServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServiceWithOptions(request, runtime);
}

model UpdateAliasRequest = {
  keyId: string(name='KeyId', description='keyId'),
  aliasName: string(name='AliasName', description='aliasName'),
}

model UpdateAliasResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateAliasWithOptions(request: UpdateAliasRequest, runtime: Util.RuntimeOptions): UpdateAliasResponse {
  Util.validateModel(request);
  return doRequest('UpdateAlias', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function updateAlias(request: UpdateAliasRequest): UpdateAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAliasWithOptions(request, runtime);
}

model UntagResourceRequest = {
  keyId?: string(name='KeyId', description='keyId'),
  tagKeys: string(name='TagKeys', description='tagKeys'),
  secretName?: string(name='SecretName', description='SecretName'),
}

model UntagResourceResponse = {
  requestId: string(name='RequestId', description='RequestId'),
}

async function untagResourceWithOptions(request: UntagResourceRequest, runtime: Util.RuntimeOptions): UntagResourceResponse {
  Util.validateModel(request);
  return doRequest('UntagResource', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function untagResource(request: UntagResourceRequest): UntagResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourceWithOptions(request, runtime);
}

model TagResourceRequest = {
  keyId?: string(name='KeyId', description='keyId'),
  tags: string(name='Tags', description='tags'),
  secretName?: string(name='SecretName', description='SecretName'),
}

model TagResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourceWithOptions(request: TagResourceRequest, runtime: Util.RuntimeOptions): TagResourceResponse {
  Util.validateModel(request);
  return doRequest('TagResource', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function tagResource(request: TagResourceRequest): TagResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourceWithOptions(request, runtime);
}

model ScheduleKeyDeletionRequest = {
  keyId: string(name='KeyId', description='keyId'),
  pendingWindowInDays?: integer(name='PendingWindowInDays', description='pendingWindowInDays'),
}

model ScheduleKeyDeletionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function scheduleKeyDeletionWithOptions(request: ScheduleKeyDeletionRequest, runtime: Util.RuntimeOptions): ScheduleKeyDeletionResponse {
  Util.validateModel(request);
  return doRequest('ScheduleKeyDeletion', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function scheduleKeyDeletion(request: ScheduleKeyDeletionRequest): ScheduleKeyDeletionResponse {
  var runtime = new Util.RuntimeOptions{};
  return scheduleKeyDeletionWithOptions(request, runtime);
}

model ListResourceTagsRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model ListResourceTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  tags: {
    tag: [
      {
        keyId: string(name='KeyId', description='keyId'),
        tagKey: string(name='TagKey', description='TagKey'),
        tagValue: string(name='TagValue', description='TagValue'),
      }
    ](name='Tag', description='Tag'),
  }(name='Tags', description='data.tags'),
}

async function listResourceTagsWithOptions(request: ListResourceTagsRequest, runtime: Util.RuntimeOptions): ListResourceTagsResponse {
  Util.validateModel(request);
  return doRequest('ListResourceTags', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listResourceTags(request: ListResourceTagsRequest): ListResourceTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listResourceTagsWithOptions(request, runtime);
}

model ListKeysRequest = {
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model ListKeysResponse = {
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  pageSize: integer(name='PageSize', description='pageSize'),
  requestId: string(name='RequestId', description='requestId'),
}

async function listKeysWithOptions(request: ListKeysRequest, runtime: Util.RuntimeOptions): ListKeysResponse {
  Util.validateModel(request);
  return doRequest('ListKeys', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listKeys(request: ListKeysRequest): ListKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listKeysWithOptions(request, runtime);
}

model ListAliasesByKeyIdRequest = {
  keyId: string(name='KeyId', description='keyId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model ListAliasesByKeyIdResponse = {
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  pageSize: integer(name='PageSize', description='pageSize'),
  requestId: string(name='RequestId', description='requestId'),
  aliases: {
    alias: [
      {
        keyId: string(name='KeyId', description='keyId'),
        aliasName: string(name='AliasName', description='AliasName'),
        aliasArn: string(name='AliasArn', description='AliasArn'),
      }
    ](name='Alias', description='Alias'),
  }(name='Aliases', description='data.Aliases'),
}

async function listAliasesByKeyIdWithOptions(request: ListAliasesByKeyIdRequest, runtime: Util.RuntimeOptions): ListAliasesByKeyIdResponse {
  Util.validateModel(request);
  return doRequest('ListAliasesByKeyId', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listAliasesByKeyId(request: ListAliasesByKeyIdRequest): ListAliasesByKeyIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAliasesByKeyIdWithOptions(request, runtime);
}

model ListAliasesRequest = {
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model ListAliasesResponse = {
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  pageSize: integer(name='PageSize', description='pageSize'),
  requestId: string(name='RequestId', description='requestId'),
  aliases: {
    alias: [
      {
        keyId: string(name='KeyId', description='keyId'),
        aliasName: string(name='AliasName', description='AliasName'),
        aliasArn: string(name='AliasArn', description='AliasArn'),
      }
    ](name='Alias', description='Alias'),
  }(name='Aliases', description='data.Aliases'),
}

async function listAliasesWithOptions(request: ListAliasesRequest, runtime: Util.RuntimeOptions): ListAliasesResponse {
  Util.validateModel(request);
  return doRequest('ListAliases', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function listAliases(request: ListAliasesRequest): ListAliasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAliasesWithOptions(request, runtime);
}

model ImportKeyMaterialRequest = {
  keyId: string(name='KeyId', description='keyId'),
  encryptedKeyMaterial: string(name='EncryptedKeyMaterial', description='encryptedKeyMaterial'),
  importToken: string(name='ImportToken', description='importToken'),
  keyMaterialExpireUnix: long(name='KeyMaterialExpireUnix', description='keyMaterialExpireUnix'),
}

model ImportKeyMaterialResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function importKeyMaterialWithOptions(request: ImportKeyMaterialRequest, runtime: Util.RuntimeOptions): ImportKeyMaterialResponse {
  Util.validateModel(request);
  return doRequest('ImportKeyMaterial', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function importKeyMaterial(request: ImportKeyMaterialRequest): ImportKeyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyMaterialWithOptions(request, runtime);
}

model GetParametersForImportRequest = {
  keyId: string(name='KeyId', description='keyId'),
  wrappingAlgorithm: string(name='WrappingAlgorithm', description='wrappingAlgorithm'),
  wrappingKeySpec: string(name='WrappingKeySpec', description='wrappingKeySpec'),
}

model GetParametersForImportResponse = {
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  importToken: string(name='ImportToken', description='importToken'),
  publicKey: string(name='PublicKey', description='publicKey'),
  tokenExpireTime: string(name='TokenExpireTime', description='tokenExpireTime'),
}

async function getParametersForImportWithOptions(request: GetParametersForImportRequest, runtime: Util.RuntimeOptions): GetParametersForImportResponse {
  Util.validateModel(request);
  return doRequest('GetParametersForImport', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function getParametersForImport(request: GetParametersForImportRequest): GetParametersForImportResponse {
  var runtime = new Util.RuntimeOptions{};
  return getParametersForImportWithOptions(request, runtime);
}

model GenerateDataKeyRequest = {
  keyId: string(name='KeyId', description='keyId'),
  keySpec?: string(name='KeySpec', description='keySpec'),
  numberOfBytes?: integer(name='NumberOfBytes', description='bytesNumber'),
  encryptionContext?: map[string]any(name='EncryptionContext', description='encryptionContext'),
}

model GenerateDataKeyResponse = {
  ciphertextBlob: string(name='CiphertextBlob', description='ciphertextBlob'),
  keyId: string(name='KeyId', description='keyId'),
  plaintext: string(name='Plaintext', description='plaintext'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function generateDataKeyWithOptions(request: GenerateDataKeyRequest, runtime: Util.RuntimeOptions): GenerateDataKeyResponse {
  Util.validateModel(request);
  return doRequest('GenerateDataKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function generateDataKey(request: GenerateDataKeyRequest): GenerateDataKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return generateDataKeyWithOptions(request, runtime);
}

model EncryptRequest = {
  keyId: string(name='KeyId', description='keyId'),
  plaintext: string(name='Plaintext', description='plaintext'),
  encryptionContext?: map[string]any(name='EncryptionContext', description='encryptionContext'),
}

model EncryptResponse = {
  ciphertextBlob: string(name='CiphertextBlob', description='ciphertextBlob'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function encryptWithOptions(request: EncryptRequest, runtime: Util.RuntimeOptions): EncryptResponse {
  Util.validateModel(request);
  return doRequest('Encrypt', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function encrypt(request: EncryptRequest): EncryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return encryptWithOptions(request, runtime);
}

model EnableKeyRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model EnableKeyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function enableKeyWithOptions(request: EnableKeyRequest, runtime: Util.RuntimeOptions): EnableKeyResponse {
  Util.validateModel(request);
  return doRequest('EnableKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function enableKey(request: EnableKeyRequest): EnableKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableKeyWithOptions(request, runtime);
}

model DisableKeyRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model DisableKeyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function disableKeyWithOptions(request: DisableKeyRequest, runtime: Util.RuntimeOptions): DisableKeyResponse {
  Util.validateModel(request);
  return doRequest('DisableKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function disableKey(request: DisableKeyRequest): DisableKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableKeyWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='RegionId'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data.regions'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeKeyRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model DescribeKeyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  keyMetadata: {
    creationDate: string(name='CreationDate', description='creationDate'),
    description: string(name='Description', description='desc'),
    keyId: string(name='KeyId', description='keyId'),
    keyState: string(name='KeyState', description='state'),
    keyUsage: string(name='KeyUsage', description='usage'),
    deleteDate: string(name='DeleteDate', description='deleteDate'),
    creator: string(name='Creator', description='creator'),
    arn: string(name='Arn', description='Arn'),
    origin: string(name='Origin', description='origin'),
    materialExpireTime: string(name='MaterialExpireTime', description='materialExpireTime'),
    protectionLevel: string(name='ProtectionLevel', description='protectionLevel'),
    primaryKeyVersion: string(name='PrimaryKeyVersion', description='primaryKeyVersion'),
    lastRotationDate: string(name='LastRotationDate', description='lastRotationDate'),
    automaticRotation: string(name='AutomaticRotation', description='automaticRotation'),
    rotationInterval: string(name='RotationInterval', description='rotationInterval'),
    nextRotationDate: string(name='NextRotationDate', description='nextRotationDate'),
    keySpec: string(name='KeySpec', description='keySpec'),
  }(name='KeyMetadata', description='keyMetadataResponse'),
}

async function describeKeyWithOptions(request: DescribeKeyRequest, runtime: Util.RuntimeOptions): DescribeKeyResponse {
  Util.validateModel(request);
  return doRequest('DescribeKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function describeKey(request: DescribeKeyRequest): DescribeKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyWithOptions(request, runtime);
}

model DeleteKeyMaterialRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model DeleteKeyMaterialResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteKeyMaterialWithOptions(request: DeleteKeyMaterialRequest, runtime: Util.RuntimeOptions): DeleteKeyMaterialResponse {
  Util.validateModel(request);
  return doRequest('DeleteKeyMaterial', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function deleteKeyMaterial(request: DeleteKeyMaterialRequest): DeleteKeyMaterialResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyMaterialWithOptions(request, runtime);
}

model DeleteAliasRequest = {
  aliasName: string(name='AliasName', description='aliasName'),
}

model DeleteAliasResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAliasWithOptions(request: DeleteAliasRequest, runtime: Util.RuntimeOptions): DeleteAliasResponse {
  Util.validateModel(request);
  return doRequest('DeleteAlias', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function deleteAlias(request: DeleteAliasRequest): DeleteAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAliasWithOptions(request, runtime);
}

model DecryptRequest = {
  ciphertextBlob: string(name='CiphertextBlob', description='ciphertextBlob'),
  encryptionContext?: map[string]any(name='EncryptionContext', description='encryptionContext'),
}

model DecryptResponse = {
  plaintext: string(name='Plaintext', description='plaintext'),
  keyId: string(name='KeyId', description='keyId'),
  requestId: string(name='RequestId', description='requestId'),
  keyVersionId: string(name='KeyVersionId', description='keyVersionId'),
}

async function decryptWithOptions(request: DecryptRequest, runtime: Util.RuntimeOptions): DecryptResponse {
  Util.validateModel(request);
  return doRequest('Decrypt', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function decrypt(request: DecryptRequest): DecryptResponse {
  var runtime = new Util.RuntimeOptions{};
  return decryptWithOptions(request, runtime);
}

model CreateKeyRequest = {
  description?: string(name='Description', description='desc'),
  keyUsage?: string(name='KeyUsage', description='keyUsage'),
  origin?: string(name='Origin', description='origin'),
  protectionLevel?: string(name='ProtectionLevel', description='protectionLevel'),
  enableAutomaticRotation?: boolean(name='EnableAutomaticRotation', description='enableAutomaticRotation'),
  rotationInterval?: string(name='RotationInterval', description='rotationInterval'),
  keySpec?: string(name='KeySpec', description='keySpec'),
}

model CreateKeyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  keyMetadata: {
    creationDate: string(name='CreationDate', description='creationDate'),
    description: string(name='Description', description='keyDesc'),
    keyId: string(name='KeyId', description='maskterKeyId'),
    keyState: string(name='KeyState', description='state'),
    keyUsage: string(name='KeyUsage', description='keyUsage'),
    deleteDate: string(name='DeleteDate', description='deleteDate'),
    creator: string(name='Creator', description='creator'),
    arn: string(name='Arn', description='Arn'),
    origin: string(name='Origin', description='origin'),
    materialExpireTime: string(name='MaterialExpireTime', description='materialExpireTime'),
    protectionLevel: string(name='ProtectionLevel', description='protectionLevel'),
    primaryKeyVersion: string(name='PrimaryKeyVersion', description='primaryKeyVersion'),
    lastRotationDate: string(name='LastRotationDate', description='lastRotationDate'),
    automaticRotation: string(name='AutomaticRotation', description='automaticRotation'),
    rotationInterval: string(name='RotationInterval', description='rotationInterval'),
    nextRotationDate: string(name='NextRotationDate', description='nextRotationDate'),
    keySpec: string(name='KeySpec', description='keySpec'),
  }(name='KeyMetadata', description='keyMetadataResponse'),
}

async function createKeyWithOptions(request: CreateKeyRequest, runtime: Util.RuntimeOptions): CreateKeyResponse {
  Util.validateModel(request);
  return doRequest('CreateKey', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function createKey(request: CreateKeyRequest): CreateKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyWithOptions(request, runtime);
}

model CreateAliasRequest = {
  keyId: string(name='KeyId', description='keyId'),
  aliasName: string(name='AliasName', description='aliasName'),
}

model CreateAliasResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createAliasWithOptions(request: CreateAliasRequest, runtime: Util.RuntimeOptions): CreateAliasResponse {
  Util.validateModel(request);
  return doRequest('CreateAlias', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function createAlias(request: CreateAliasRequest): CreateAliasResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAliasWithOptions(request, runtime);
}

model CancelKeyDeletionRequest = {
  keyId: string(name='KeyId', description='keyId'),
}

model CancelKeyDeletionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelKeyDeletionWithOptions(request: CancelKeyDeletionRequest, runtime: Util.RuntimeOptions): CancelKeyDeletionResponse {
  Util.validateModel(request);
  return doRequest('CancelKeyDeletion', 'HTTPS', 'POST', '2016-01-20', 'AK', null, request, runtime);
}

async function cancelKeyDeletion(request: CancelKeyDeletionRequest): CancelKeyDeletionResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelKeyDeletionWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
