import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('alinlp', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetNerChMedicalRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='input'),
}

model GetNerChMedicalResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getNerChMedicalWithOptions(request: GetNerChMedicalRequest, runtime: Util.RuntimeOptions): GetNerChMedicalResponse {
  Util.validateModel(request);
  return doRequest('GetNerChMedical', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getNerChMedical(request: GetNerChMedicalRequest): GetNerChMedicalResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerChMedicalWithOptions(request, runtime);
}

model GetNerCustomizedChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
  uuid: string(name='Uuid', description='uuid'),
  lexerId?: string(name='LexerId', description='lexer_id'),
}

model GetNerCustomizedChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getNerCustomizedChEcomWithOptions(request: GetNerCustomizedChEcomRequest, runtime: Util.RuntimeOptions): GetNerCustomizedChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetNerCustomizedChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getNerCustomizedChEcom(request: GetNerCustomizedChEcomRequest): GetNerCustomizedChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNerCustomizedChEcomWithOptions(request, runtime);
}

model GetWsCustomizedChGeneralRequest = {
  uuid: string(name='Uuid', description='uuid'),
  tokenizerId?: string(name='TokenizerId', description='tokenizer_id'),
  text: string(name='Text', description='text'),
  outType?: string(name='OutType', description='out_type'),
  serviceCode: string(name='ServiceCode', description='serviceCode'),
}

model GetWsCustomizedChGeneralResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getWsCustomizedChGeneralWithOptions(request: GetWsCustomizedChGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedChGeneral(request: GetWsCustomizedChGeneralRequest): GetWsCustomizedChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedChGeneralWithOptions(request, runtime);
}

model GetSummaryChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
}

model GetSummaryChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getSummaryChEcomWithOptions(request: GetSummaryChEcomRequest, runtime: Util.RuntimeOptions): GetSummaryChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetSummaryChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getSummaryChEcom(request: GetSummaryChEcomRequest): GetSummaryChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSummaryChEcomWithOptions(request, runtime);
}

model GetDpChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='input'),
}

model GetDpChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getDpChEcomWithOptions(request: GetDpChEcomRequest, runtime: Util.RuntimeOptions): GetDpChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetDpChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getDpChEcom(request: GetDpChEcomRequest): GetDpChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDpChEcomWithOptions(request, runtime);
}

model GetWsCustomizedSeaGeneralRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
  language: string(name='Language', description='lang'),
}

model GetWsCustomizedSeaGeneralResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getWsCustomizedSeaGeneralWithOptions(request: GetWsCustomizedSeaGeneralRequest, runtime: Util.RuntimeOptions): GetWsCustomizedSeaGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetWsCustomizedSeaGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWsCustomizedSeaGeneral(request: GetWsCustomizedSeaGeneralRequest): GetWsCustomizedSeaGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWsCustomizedSeaGeneralWithOptions(request, runtime);
}

model GetWeChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
  uuid: string(name='Uuid', description='uuid'),
  token: string(name='Token', description='token'),
  size?: string(name='Size', description='size'),
  type?: string(name='Type', description='type'),
  operation?: string(name='Operation', description='operation'),
  delimiter?: string(name='Delimiter', description='delimiter'),
  wordVectorDelimiter?: string(name='WordVectorDelimiter', description='word_vec_delimiter'),
  wordDelimiter?: string(name='WordDelimiter', description='word_delimiter'),
}

model GetWeChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getWeChEcomWithOptions(request: GetWeChEcomRequest, runtime: Util.RuntimeOptions): GetWeChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetWeChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getWeChEcom(request: GetWeChEcomRequest): GetWeChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWeChEcomWithOptions(request, runtime);
}

model GetTsChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  originQ: string(name='OriginQ', description='org_q'),
  originT: string(name='OriginT', description='org_t'),
  type: string(name='Type', description='type'),
}

model GetTsChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getTsChEcomWithOptions(request: GetTsChEcomRequest, runtime: Util.RuntimeOptions): GetTsChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetTsChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getTsChEcom(request: GetTsChEcomRequest): GetTsChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTsChEcomWithOptions(request, runtime);
}

model GetEcChGeneralRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
}

model GetEcChGeneralResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getEcChGeneralWithOptions(request: GetEcChGeneralRequest, runtime: Util.RuntimeOptions): GetEcChGeneralResponse {
  Util.validateModel(request);
  return doRequest('GetEcChGeneral', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getEcChGeneral(request: GetEcChGeneralRequest): GetEcChGeneralResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEcChGeneralWithOptions(request, runtime);
}

model GetPosChEcomRequest = {
  serviceCode: string(name='ServiceCode', description='serviceCode'),
  text: string(name='Text', description='text'),
  uuid: string(name='Uuid', description='uuid'),
  tokenizerId?: string(name='TokenizerId', description='tokenizer_id'),
  outType?: string(name='OutType', description='out_type'),
}

model GetPosChEcomResponse = {
  data: string(name='Data', description='data'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getPosChEcomWithOptions(request: GetPosChEcomRequest, runtime: Util.RuntimeOptions): GetPosChEcomResponse {
  Util.validateModel(request);
  return doRequest('GetPosChEcom', 'HTTPS', 'POST', '2020-06-29', 'AK', null, request, runtime);
}

async function getPosChEcom(request: GetPosChEcomRequest): GetPosChEcomResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPosChEcomWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
