import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('alidns', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model ListTagResourcesRequest = {
  lang?: string(name='Lang', description='lang'),
  resourceType: string(name='ResourceType', description='resourceType'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  resourceId?: [ string ](name='ResourceId', description='resourceIds'),
  nextToken?: string(name='NextToken', description='nextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextToken: string(name='NextToken', description='module.nextToken'),
  tagResources: [
    {
      tagKey: string(name='TagKey', description='keyName'),
      tagValue: string(name='TagValue', description='valueName'),
      resourceId: string(name='ResourceId', description='resourceId'),
      resourceType: string(name='ResourceType', description='resourceType'),
    }
  ](name='TagResources', description='module.data'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  lang?: string(name='Lang', description='lang'),
  resourceType: string(name='ResourceType', description='resourceType'),
  tag: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  lang?: string(name='Lang', description='lang'),
  resourceType: string(name='ResourceType', description='resourceType'),
  all?: boolean(name='All', description='all'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  tagKey?: [ string ](name='TagKey', description='tagKeys'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model DescribeTagsRequest = {
  lang?: string(name='Lang', description='lang'),
  resourceType: string(name='ResourceType', description='resourceType'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  tags: [
    {
      key: string(name='Key', description='key'),
    }
  ](name='Tags', description='module.data'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTags', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model CopyGtmConfigRequest = {
  lang?: string(name='Lang', description='lang'),
  sourceId: string(name='SourceId', description='sourceId'),
  targetId: string(name='TargetId', description='targetId'),
  copyType: string(name='CopyType', description='copyType'),
}

model CopyGtmConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function copyGtmConfigWithOptions(request: CopyGtmConfigRequest, runtime: Util.RuntimeOptions): CopyGtmConfigResponse {
  Util.validateModel(request);
  return doRequest('CopyGtmConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function copyGtmConfig(request: CopyGtmConfigRequest): CopyGtmConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyGtmConfigWithOptions(request, runtime);
}

model DescribeDomainDnssecInfoRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
}

model DescribeDomainDnssecInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='module.domainName'),
  status: string(name='Status', description='module.status'),
  dsRecord: string(name='DsRecord', description='module.dsRecord'),
  digest: string(name='Digest', description='module.digest'),
  digestType: string(name='DigestType', description='module.digestType'),
  algorithm: string(name='Algorithm', description='module.algorithm'),
  publicKey: string(name='PublicKey', description='module.publicKey'),
  keyTag: string(name='KeyTag', description='module.keyTag'),
  flags: string(name='Flags', description='module.flags'),
}

async function describeDomainDnssecInfoWithOptions(request: DescribeDomainDnssecInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainDnssecInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainDnssecInfo', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainDnssecInfo(request: DescribeDomainDnssecInfoRequest): DescribeDomainDnssecInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainDnssecInfoWithOptions(request, runtime);
}

model SetDomainDnssecStatusRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  status: string(name='Status', description='status'),
}

model SetDomainDnssecStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setDomainDnssecStatusWithOptions(request: SetDomainDnssecStatusRequest, runtime: Util.RuntimeOptions): SetDomainDnssecStatusResponse {
  Util.validateModel(request);
  return doRequest('SetDomainDnssecStatus', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function setDomainDnssecStatus(request: SetDomainDnssecStatusRequest): SetDomainDnssecStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainDnssecStatusWithOptions(request, runtime);
}

model TransferDomainRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainNames: string(name='DomainNames', description='domainNames'),
  remark?: string(name='Remark', description='remark'),
  targetUserId: long(name='TargetUserId', description='targetUserId'),
}

model TransferDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: long(name='TaskId', description='module'),
}

async function transferDomainWithOptions(request: TransferDomainRequest, runtime: Util.RuntimeOptions): TransferDomainResponse {
  Util.validateModel(request);
  return doRequest('TransferDomain', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function transferDomain(request: TransferDomainRequest): TransferDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return transferDomainWithOptions(request, runtime);
}

model DescribeTransferDomainsRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  transferType: string(name='TransferType', description='transferType'),
  domainName?: string(name='DomainName', description='domainName'),
  fromUserId?: long(name='FromUserId', description='fromUserId'),
  targetUserId?: long(name='TargetUserId', description='targetUserId'),
}

model DescribeTransferDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domainTransfers: {
    domainTransfer: [
      {
        domainName: string(name='DomainName', description='domainName'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        fromUserId: long(name='FromUserId', description='fromUserId'),
        targetUserId: long(name='TargetUserId', description='targetUserId'),
        id: long(name='Id', description='id'),
      }
    ](name='DomainTransfer', description='DomainTransfer'),
  }(name='DomainTransfers', description='module.data'),
}

async function describeTransferDomainsWithOptions(request: DescribeTransferDomainsRequest, runtime: Util.RuntimeOptions): DescribeTransferDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTransferDomains', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeTransferDomains(request: DescribeTransferDomainsRequest): DescribeTransferDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTransferDomainsWithOptions(request, runtime);
}

model AddDomainBackupRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  periodType: string(name='PeriodType', description='periodType'),
}

model AddDomainBackupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='module.domainName'),
  periodType: string(name='PeriodType', description='module.periodType'),
}

async function addDomainBackupWithOptions(request: AddDomainBackupRequest, runtime: Util.RuntimeOptions): AddDomainBackupResponse {
  Util.validateModel(request);
  return doRequest('AddDomainBackup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addDomainBackup(request: AddDomainBackupRequest): AddDomainBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainBackupWithOptions(request, runtime);
}

model RetrieveDomainRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
}

model RetrieveDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function retrieveDomainWithOptions(request: RetrieveDomainRequest, runtime: Util.RuntimeOptions): RetrieveDomainResponse {
  Util.validateModel(request);
  return doRequest('RetrieveDomain', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function retrieveDomain(request: RetrieveDomainRequest): RetrieveDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return retrieveDomainWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
}

model DescribeGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recoveryPlanId: long(name='RecoveryPlanId', description='module.id'),
  name: string(name='Name', description='module.name'),
  remark: string(name='Remark', description='module.remark'),
  faultAddrPoolNum: integer(name='FaultAddrPoolNum', description='module.faultAddrPoolNum'),
  status: string(name='Status', description='module.status'),
  lastExecuteTime: string(name='LastExecuteTime', description='module.lastExecuteTime'),
  lastExecuteTimestamp: long(name='LastExecuteTimestamp', description='module.lastExecuteTimestamp'),
  lastRollbackTime: string(name='LastRollbackTime', description='module.lastRollbackTime'),
  lastRollbackTimestamp: long(name='LastRollbackTimestamp', description='module.lastRollbackTimestamp'),
  createTime: string(name='CreateTime', description='module.createTime'),
  createTimestamp: long(name='CreateTimestamp', description='module.createTimestamp'),
  updateTime: string(name='UpdateTime', description='module.updateTime'),
  updateTimestamp: long(name='UpdateTimestamp', description='module.updateTimestamp'),
  faultAddrPools: {
    faultAddrPool: [
      {
        addrPoolId: string(name='AddrPoolId', description='id'),
        addrPoolName: string(name='AddrPoolName', description='name'),
        instanceId: string(name='InstanceId', description='instanceId'),
        addrs: {
          addr: [
            {
              id: long(name='Id', description='id'),
              mode: string(name='Mode', description='mode'),
              value: string(name='Value', description='value'),
            }
          ](name='Addr', description='Addr'),
        }(name='Addrs', description='poolAddrList'),
      }
    ](name='FaultAddrPool', description='FaultAddrPool'),
  }(name='FaultAddrPools', description='module.faultAddrPools'),
}

async function describeGtmRecoveryPlanWithOptions(request: DescribeGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmRecoveryPlan(request: DescribeGtmRecoveryPlanRequest): DescribeGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlanWithOptions(request, runtime);
}

model AddGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  name: string(name='Name', description='name'),
  remark?: string(name='Remark', description='remark'),
  faultAddrPool: string(name='FaultAddrPool', description='faultAddrPool'),
}

model AddGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recoveryPlanId: string(name='RecoveryPlanId', description='module.id'),
}

async function addGtmRecoveryPlanWithOptions(request: AddGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): AddGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('AddGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addGtmRecoveryPlan(request: AddGtmRecoveryPlanRequest): AddGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmRecoveryPlanWithOptions(request, runtime);
}

model UpdateGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
  name?: string(name='Name', description='name'),
  remark?: string(name='Remark', description='remark'),
  faultAddrPool?: string(name='FaultAddrPool', description='faultAddrPool'),
}

model UpdateGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateGtmRecoveryPlanWithOptions(request: UpdateGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): UpdateGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('UpdateGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateGtmRecoveryPlan(request: UpdateGtmRecoveryPlanRequest): UpdateGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmRecoveryPlanWithOptions(request, runtime);
}

model DeleteGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
}

model DeleteGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteGtmRecoveryPlanWithOptions(request: DeleteGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): DeleteGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('DeleteGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteGtmRecoveryPlan(request: DeleteGtmRecoveryPlanRequest): DeleteGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmRecoveryPlanWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlansRequest = {
  lang?: string(name='Lang', description='lang'),
  keyword?: string(name='Keyword', description='keyword'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeGtmRecoveryPlansResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  recoveryPlans: {
    recoveryPlan: [
      {
        recoveryPlanId: long(name='RecoveryPlanId', description='id'),
        name: string(name='Name', description='name'),
        remark: string(name='Remark', description='remark'),
        faultAddrPoolNum: integer(name='FaultAddrPoolNum', description='faultAddrPoolNum'),
        lastExecuteTime: string(name='LastExecuteTime', description='lastExecuteTime'),
        lastExecuteTimestamp: long(name='LastExecuteTimestamp', description='lastExecuteTimestamp'),
        lastRollbackTime: string(name='LastRollbackTime', description='lastRollbackTime'),
        lastRollbackTimestamp: long(name='LastRollbackTimestamp', description='lastRollbackTimestamp'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        updateTime: string(name='UpdateTime', description='updateTime'),
        updateTimestamp: long(name='UpdateTimestamp', description='updateTimestamp'),
        status: string(name='Status', description='status'),
      }
    ](name='RecoveryPlan', description='RecoveryPlan'),
  }(name='RecoveryPlans', description='module.data'),
}

async function describeGtmRecoveryPlansWithOptions(request: DescribeGtmRecoveryPlansRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlansResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmRecoveryPlans', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmRecoveryPlans(request: DescribeGtmRecoveryPlansRequest): DescribeGtmRecoveryPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlansWithOptions(request, runtime);
}

model DescribeGtmRecoveryPlanAvailableConfigRequest = {
  lang?: string(name='Lang', description='lang'),
}

model DescribeGtmRecoveryPlanAvailableConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instances: {
    instance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceName: string(name='InstanceName', description='instanceName'),
        addrPools: {
          addrPool: [
            {
              addrPoolId: string(name='AddrPoolId', description='id'),
              name: string(name='Name', description='name'),
            }
          ](name='AddrPool', description='AddrPool'),
        }(name='AddrPools', description='addrPools'),
      }
    ](name='Instance', description='Instance'),
  }(name='Instances', description='module.gtmInstances'),
}

async function describeGtmRecoveryPlanAvailableConfigWithOptions(request: DescribeGtmRecoveryPlanAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmRecoveryPlanAvailableConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmRecoveryPlanAvailableConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmRecoveryPlanAvailableConfig(request: DescribeGtmRecoveryPlanAvailableConfigRequest): DescribeGtmRecoveryPlanAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmRecoveryPlanAvailableConfigWithOptions(request, runtime);
}

model ExecuteGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
}

model ExecuteGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function executeGtmRecoveryPlanWithOptions(request: ExecuteGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): ExecuteGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('ExecuteGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function executeGtmRecoveryPlan(request: ExecuteGtmRecoveryPlanRequest): ExecuteGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeGtmRecoveryPlanWithOptions(request, runtime);
}

model RollbackGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
}

model RollbackGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function rollbackGtmRecoveryPlanWithOptions(request: RollbackGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): RollbackGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('RollbackGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function rollbackGtmRecoveryPlan(request: RollbackGtmRecoveryPlanRequest): RollbackGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackGtmRecoveryPlanWithOptions(request, runtime);
}

model PreviewGtmRecoveryPlanRequest = {
  lang?: string(name='Lang', description='lang'),
  recoveryPlanId: long(name='RecoveryPlanId', description='recoveryPlanId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model PreviewGtmRecoveryPlanResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  previews: {
    preview: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        name: string(name='Name', description='instanceName'),
        userDomainName: string(name='UserDomainName', description='userDomainName'),
        switchInfos: {
          switchInfo: [
            {
              strategyName: string(name='StrategyName', description='strategyName'),
              content: string(name='Content', description='content'),
            }
          ](name='SwitchInfo', description='SwitchInfo'),
        }(name='SwitchInfos', description='switchInfos'),
      }
    ](name='Preview', description='Preview'),
  }(name='Previews', description='module.data'),
}

async function previewGtmRecoveryPlanWithOptions(request: PreviewGtmRecoveryPlanRequest, runtime: Util.RuntimeOptions): PreviewGtmRecoveryPlanResponse {
  Util.validateModel(request);
  return doRequest('PreviewGtmRecoveryPlan', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function previewGtmRecoveryPlan(request: PreviewGtmRecoveryPlanRequest): PreviewGtmRecoveryPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return previewGtmRecoveryPlanWithOptions(request, runtime);
}

model GetTxtRecordForVerifyRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName?: string(name='DomainName', description='domainName'),
  type: string(name='Type', description='type'),
}

model GetTxtRecordForVerifyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='module.domainName'),
  RR: string(name='RR', description='module.rr'),
  value: string(name='Value', description='module.value'),
}

async function getTxtRecordForVerifyWithOptions(request: GetTxtRecordForVerifyRequest, runtime: Util.RuntimeOptions): GetTxtRecordForVerifyResponse {
  Util.validateModel(request);
  return doRequest('GetTxtRecordForVerify', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function getTxtRecordForVerify(request: GetTxtRecordForVerifyRequest): GetTxtRecordForVerifyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTxtRecordForVerifyWithOptions(request, runtime);
}

model DescribeDomainStatisticsRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  startDate: string(name='StartDate', description='startDate'),
  endDate?: string(name='EndDate', description='endDate'),
}

model DescribeDomainStatisticsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  statistics: {
    statistic: [
      {
        timestamp: long(name='Timestamp', description='timestamp'),
        count: long(name='Count', description='count'),
      }
    ](name='Statistic', description='Statistic'),
  }(name='Statistics', description='module'),
}

async function describeDomainStatisticsWithOptions(request: DescribeDomainStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDomainStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainStatistics', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainStatistics(request: DescribeDomainStatisticsRequest): DescribeDomainStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatisticsWithOptions(request, runtime);
}

model DescribeRecordStatisticsRequest = {
  lang?: string(name='Lang', description='lang'),
  startDate: string(name='StartDate', description='startDate'),
  endDate?: string(name='EndDate', description='endDate'),
  domainName: string(name='DomainName', description='domainName'),
  rr: string(name='Rr', description='rr'),
}

model DescribeRecordStatisticsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  statistics: {
    statistic: [
      {
        timestamp: long(name='Timestamp', description='timestamp'),
        count: long(name='Count', description='count'),
      }
    ](name='Statistic', description='Statistic'),
  }(name='Statistics', description='module'),
}

async function describeRecordStatisticsWithOptions(request: DescribeRecordStatisticsRequest, runtime: Util.RuntimeOptions): DescribeRecordStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecordStatistics', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeRecordStatistics(request: DescribeRecordStatisticsRequest): DescribeRecordStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordStatisticsWithOptions(request, runtime);
}

model DescribeGtmInstanceSystemCnameRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeGtmInstanceSystemCnameResponse = {
  requestId: string(name='RequestId', description='requestId'),
  systemCname: string(name='SystemCname', description='module'),
}

async function describeGtmInstanceSystemCnameWithOptions(request: DescribeGtmInstanceSystemCnameRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceSystemCnameResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstanceSystemCname', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstanceSystemCname(request: DescribeGtmInstanceSystemCnameRequest): DescribeGtmInstanceSystemCnameResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceSystemCnameWithOptions(request, runtime);
}

model DescribeInstanceDomainsRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeInstanceDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  instanceDomains: [
    {
      domainName: string(name='DomainName', description='domainName'),
      createTime: string(name='CreateTime', description='createTime'),
      createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
    }
  ](name='InstanceDomains', description='module.data'),
}

async function describeInstanceDomainsWithOptions(request: DescribeInstanceDomainsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeInstanceDomains', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeInstanceDomains(request: DescribeInstanceDomainsRequest): DescribeInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDomainsWithOptions(request, runtime);
}

model BindInstanceDomainsRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  domainNames: string(name='DomainNames', description='domainNames'),
}

model BindInstanceDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  successCount: integer(name='SuccessCount', description='module.successCount'),
  failedCount: integer(name='FailedCount', description='module.failedCount'),
}

async function bindInstanceDomainsWithOptions(request: BindInstanceDomainsRequest, runtime: Util.RuntimeOptions): BindInstanceDomainsResponse {
  Util.validateModel(request);
  return doRequest('BindInstanceDomains', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function bindInstanceDomains(request: BindInstanceDomainsRequest): BindInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return bindInstanceDomainsWithOptions(request, runtime);
}

model UnbindInstanceDomainsRequest = {
  lang?: string(name='Lang', description='lang'),
  domainNames: string(name='DomainNames', description='domainNames'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model UnbindInstanceDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  successCount: integer(name='SuccessCount', description='module.successCount'),
  failedCount: integer(name='FailedCount', description='module.failedCount'),
}

async function unbindInstanceDomainsWithOptions(request: UnbindInstanceDomainsRequest, runtime: Util.RuntimeOptions): UnbindInstanceDomainsResponse {
  Util.validateModel(request);
  return doRequest('UnbindInstanceDomains', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function unbindInstanceDomains(request: UnbindInstanceDomainsRequest): UnbindInstanceDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return unbindInstanceDomainsWithOptions(request, runtime);
}

model UpdateCustomLineRequest = {
  lang?: string(name='Lang', description='lang'),
  lineName?: string(name='LineName', description='lineName'),
  ipSegment?: [
    {
      startIp?: string(name='StartIp', description='startIp'),
      endIp?: string(name='EndIp', description='endIp'),
    }
  ](name='IpSegment', description='ipSegments'),
  lineId: long(name='LineId', description='lineId'),
}

model UpdateCustomLineResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateCustomLineWithOptions(request: UpdateCustomLineRequest, runtime: Util.RuntimeOptions): UpdateCustomLineResponse {
  Util.validateModel(request);
  return doRequest('UpdateCustomLine', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateCustomLine(request: UpdateCustomLineRequest): UpdateCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCustomLineWithOptions(request, runtime);
}

model AddCustomLineRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  lineName: string(name='LineName', description='lineName'),
  ipSegment: [
    {
      startIp?: string(name='StartIp', description='startIp'),
      endIp?: string(name='EndIp', description='endIp'),
    }
  ](name='IpSegment', description='ipSegments'),
}

model AddCustomLineResponse = {
  requestId: string(name='RequestId', description='requestId'),
  lineId: long(name='LineId', description='module.id'),
  lineCode: string(name='LineCode', description='module.code'),
}

async function addCustomLineWithOptions(request: AddCustomLineRequest, runtime: Util.RuntimeOptions): AddCustomLineResponse {
  Util.validateModel(request);
  return doRequest('AddCustomLine', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addCustomLine(request: AddCustomLineRequest): AddCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCustomLineWithOptions(request, runtime);
}

model DeleteCustomLinesRequest = {
  lang?: string(name='Lang', description='lang'),
  lineIds: string(name='LineIds', description='lineIds'),
}

model DeleteCustomLinesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteCustomLinesWithOptions(request: DeleteCustomLinesRequest, runtime: Util.RuntimeOptions): DeleteCustomLinesResponse {
  Util.validateModel(request);
  return doRequest('DeleteCustomLines', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteCustomLines(request: DeleteCustomLinesRequest): DeleteCustomLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCustomLinesWithOptions(request, runtime);
}

model DescribeCustomLineRequest = {
  lineId?: long(name='LineId', description='lineId'),
  lang?: string(name='Lang', description='lang'),
}

model DescribeCustomLineResponse = {
  requestId: string(name='RequestId', description='requestId'),
  id: long(name='Id', description='module.id'),
  name: string(name='Name', description='module.name'),
  domainName: string(name='DomainName', description='module.domainName'),
  createTime: string(name='CreateTime', description='module.createTime'),
  createTimestamp: long(name='CreateTimestamp', description='module.createTimestamp'),
  ipSegments: string(name='IpSegments', description='module.ipSegments'),
  code: string(name='Code', description='module.code'),
  ipSegmentList: [
    {
      name: string(name='Name', description='name'),
      startIp: string(name='StartIp', description='startIp'),
      endIp: string(name='EndIp', description='endIp'),
    }
  ](name='IpSegmentList', description='module.ipSegmentList'),
}

async function describeCustomLineWithOptions(request: DescribeCustomLineRequest, runtime: Util.RuntimeOptions): DescribeCustomLineResponse {
  Util.validateModel(request);
  return doRequest('DescribeCustomLine', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeCustomLine(request: DescribeCustomLineRequest): DescribeCustomLineResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLineWithOptions(request, runtime);
}

model DescribeCustomLinesRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  domainName: string(name='DomainName', description='domainName'),
}

model DescribeCustomLinesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  customLines: [
    {
      id: long(name='Id', description='id'),
      name: string(name='Name', description='name'),
      createTime: string(name='CreateTime', description='createTime'),
      createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
      ipSegments: string(name='IpSegments', description='ipSegments'),
      code: string(name='Code', description='code'),
    }
  ](name='CustomLines', description='module.data'),
}

async function describeCustomLinesWithOptions(request: DescribeCustomLinesRequest, runtime: Util.RuntimeOptions): DescribeCustomLinesResponse {
  Util.validateModel(request);
  return doRequest('DescribeCustomLines', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeCustomLines(request: DescribeCustomLinesRequest): DescribeCustomLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCustomLinesWithOptions(request, runtime);
}

model DescribeDomainStatisticsSummaryRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  startDate: string(name='StartDate', description='startDate'),
  endDate?: string(name='EndDate', description='endDate'),
  searchMode?: string(name='SearchMode', description='searchMode'),
  keyword?: string(name='Keyword', description='keyword'),
  threshold?: long(name='Threshold', description='threshold'),
}

model DescribeDomainStatisticsSummaryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  statistics: {
    statistic: [
      {
        domainName: string(name='DomainName', description='name'),
        count: long(name='Count', description='count'),
      }
    ](name='Statistic', description='Statistic'),
  }(name='Statistics', description='module.data'),
}

async function describeDomainStatisticsSummaryWithOptions(request: DescribeDomainStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeDomainStatisticsSummaryResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainStatisticsSummary', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainStatisticsSummary(request: DescribeDomainStatisticsSummaryRequest): DescribeDomainStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatisticsSummaryWithOptions(request, runtime);
}

model DescribeRecordStatisticsSummaryRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  startDate: string(name='StartDate', description='startDate'),
  endDate?: string(name='EndDate', description='endDate'),
  domainName: string(name='DomainName', description='domainName'),
  searchMode?: string(name='SearchMode', description='searchMode'),
  keyword?: string(name='Keyword', description='keyword'),
  threshold?: long(name='Threshold', description='threshold'),
}

model DescribeRecordStatisticsSummaryResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  statistics: {
    statistic: [
      {
        subDomain: string(name='SubDomain', description='name'),
        count: long(name='Count', description='count'),
      }
    ](name='Statistic', description='Statistic'),
  }(name='Statistics', description='module.data'),
}

async function describeRecordStatisticsSummaryWithOptions(request: DescribeRecordStatisticsSummaryRequest, runtime: Util.RuntimeOptions): DescribeRecordStatisticsSummaryResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecordStatisticsSummary', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeRecordStatisticsSummary(request: DescribeRecordStatisticsSummaryRequest): DescribeRecordStatisticsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordStatisticsSummaryWithOptions(request, runtime);
}

model OperateBatchDomainRequest = {
  lang?: string(name='Lang', description='lang'),
  type: string(name='Type', description='type'),
  domainRecordInfo: [
    {
      domain: string(name='Domain', description='domainName'),
      type?: string(name='Type', description='type'),
      rr?: string(name='Rr', description='rr'),
      value?: string(name='Value', description='value'),
      ttl?: integer(name='Ttl', description='ttl'),
      priority?: integer(name='Priority', description='priority'),
      line?: string(name='Line', description='line'),
      newRr?: string(name='NewRr', description='newRr'),
      newType?: string(name='NewType', description='newType'),
      newValue?: string(name='NewValue', description='newValue'),
    }
  ](name='DomainRecordInfo', description='data'),
}

model OperateBatchDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  taskId: long(name='TaskId', description='module'),
}

async function operateBatchDomainWithOptions(request: OperateBatchDomainRequest, runtime: Util.RuntimeOptions): OperateBatchDomainResponse {
  Util.validateModel(request);
  return doRequest('OperateBatchDomain', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function operateBatchDomain(request: OperateBatchDomainRequest): OperateBatchDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateBatchDomainWithOptions(request, runtime);
}

model DescribeBatchResultDetailRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  taskId?: long(name='TaskId', description='taskId'),
  batchType?: string(name='BatchType', description='batchType'),
  status?: string(name='Status', description='status'),
}

model DescribeBatchResultDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItemNum'),
  pageNumber: long(name='PageNumber', description='module.currentPageNum'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  batchResultDetails: {
    batchResultDetail: [
      {
        domain: string(name='Domain', description='domain'),
        type: string(name='Type', description='type'),
        rr: string(name='Rr', description='rr'),
        value: string(name='Value', description='value'),
        status: boolean(name='Status', description='status'),
        reason: string(name='Reason', description='reason'),
        newRr: string(name='NewRr', description='newRr'),
        newValue: string(name='NewValue', description='newValue'),
        batchType: string(name='BatchType', description='batchType'),
        operateDateStr: string(name='OperateDateStr', description='operateDateStr'),
        line: string(name='Line', description='line'),
        priority: string(name='Priority', description='priority'),
        ttl: string(name='Ttl', description='ttl'),
        recordId: string(name='RecordId', description='rrId'),
        remark: string(name='Remark', description='remark'),
        rrStatus: string(name='RrStatus', description='rrStatus'),
      }
    ](name='BatchResultDetail', description='BatchResultDetail'),
  }(name='BatchResultDetails', description='module.data'),
}

async function describeBatchResultDetailWithOptions(request: DescribeBatchResultDetailRequest, runtime: Util.RuntimeOptions): DescribeBatchResultDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeBatchResultDetail', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeBatchResultDetail(request: DescribeBatchResultDetailRequest): DescribeBatchResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchResultDetailWithOptions(request, runtime);
}

model DescribeBatchResultCountRequest = {
  lang?: string(name='Lang', description='lang'),
  taskId?: long(name='TaskId', description='taskId'),
  batchType?: string(name='BatchType', description='batchType'),
}

model DescribeBatchResultCountResponse = {
  requestId: string(name='RequestId', description='requestId'),
  status: integer(name='Status', description='module.status'),
  totalCount: integer(name='TotalCount', description='module.totalCount'),
  successCount: integer(name='SuccessCount', description='module.successCount'),
  failedCount: integer(name='FailedCount', description='module.failedCount'),
  reason: string(name='Reason', description='module.reason'),
  batchType: string(name='BatchType', description='module.batchType'),
  taskId: long(name='TaskId', description='module.taskId'),
}

async function describeBatchResultCountWithOptions(request: DescribeBatchResultCountRequest, runtime: Util.RuntimeOptions): DescribeBatchResultCountResponse {
  Util.validateModel(request);
  return doRequest('DescribeBatchResultCount', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeBatchResultCount(request: DescribeBatchResultCountRequest): DescribeBatchResultCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBatchResultCountWithOptions(request, runtime);
}

model SetGtmAccessModeRequest = {
  lang?: string(name='Lang', description='lang'),
  strategyId: string(name='StrategyId', description='strategyId'),
  accessMode: string(name='AccessMode', description='accessMode'),
}

model SetGtmAccessModeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setGtmAccessModeWithOptions(request: SetGtmAccessModeRequest, runtime: Util.RuntimeOptions): SetGtmAccessModeResponse {
  Util.validateModel(request);
  return doRequest('SetGtmAccessMode', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function setGtmAccessMode(request: SetGtmAccessModeRequest): SetGtmAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGtmAccessModeWithOptions(request, runtime);
}

model SetGtmMonitorStatusRequest = {
  lang?: string(name='Lang', description='lang'),
  monitorConfigId: string(name='MonitorConfigId', description='monitorConfigId'),
  status: string(name='Status', description='monitorStatus'),
}

model SetGtmMonitorStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function setGtmMonitorStatusWithOptions(request: SetGtmMonitorStatusRequest, runtime: Util.RuntimeOptions): SetGtmMonitorStatusResponse {
  Util.validateModel(request);
  return doRequest('SetGtmMonitorStatus', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function setGtmMonitorStatus(request: SetGtmMonitorStatusRequest): SetGtmMonitorStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setGtmMonitorStatusWithOptions(request, runtime);
}

model UpdateGtmInstanceGlobalConfigRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  instanceName?: string(name='InstanceName', description='instanceName'),
  ttl?: integer(name='Ttl', description='ttl'),
  userDomainName?: string(name='UserDomainName', description='userDomainName'),
  lbaStrategy?: string(name='LbaStrategy', description='lbaStrategy'),
  alertGroup?: string(name='AlertGroup', description='alertGroup'),
  cnameMode?: string(name='CnameMode', description='cnameMode'),
  cnameCustomDomainName?: string(name='CnameCustomDomainName', description='cnameCustomDomainName'),
}

model UpdateGtmInstanceGlobalConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateGtmInstanceGlobalConfigWithOptions(request: UpdateGtmInstanceGlobalConfigRequest, runtime: Util.RuntimeOptions): UpdateGtmInstanceGlobalConfigResponse {
  Util.validateModel(request);
  return doRequest('UpdateGtmInstanceGlobalConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateGtmInstanceGlobalConfig(request: UpdateGtmInstanceGlobalConfigRequest): UpdateGtmInstanceGlobalConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmInstanceGlobalConfigWithOptions(request, runtime);
}

model DescribeGtmLogsRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  keyword?: string(name='Keyword', description='keyword'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  startTimestamp?: long(name='StartTimestamp', description='startTime'),
  endTimestamp?: long(name='EndTimestamp', description='endTime'),
}

model DescribeGtmLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  logs: {
    log: [
      {
        operTime: string(name='OperTime', description='createTime'),
        operAction: string(name='OperAction', description='action'),
        entityType: string(name='EntityType', description='entityType'),
        entityId: string(name='EntityId', description='instanceId'),
        entityName: string(name='EntityName', description='entityKey'),
        operIp: string(name='OperIp', description='userClientIp'),
        operTimestamp: long(name='OperTimestamp', description='createTimestamp'),
        id: long(name='Id', description='id'),
        content: string(name='Content', description='content'),
      }
    ](name='Log', description='Log'),
  }(name='Logs', description='module.data'),
}

async function describeGtmLogsWithOptions(request: DescribeGtmLogsRequest, runtime: Util.RuntimeOptions): DescribeGtmLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmLogs', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmLogs(request: DescribeGtmLogsRequest): DescribeGtmLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmLogsWithOptions(request, runtime);
}

model DeleteGtmAccessStrategyRequest = {
  lang?: string(name='Lang', description='lang'),
  strategyId?: string(name='StrategyId', description='strategyId'),
}

model DeleteGtmAccessStrategyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteGtmAccessStrategyWithOptions(request: DeleteGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DeleteGtmAccessStrategyResponse {
  Util.validateModel(request);
  return doRequest('DeleteGtmAccessStrategy', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteGtmAccessStrategy(request: DeleteGtmAccessStrategyRequest): DeleteGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmAccessStrategyWithOptions(request, runtime);
}

model AddGtmMonitorRequest = {
  lang?: string(name='Lang', description='lang'),
  addrPoolId: string(name='AddrPoolId', description='addrPoolId'),
  protocolType: string(name='ProtocolType', description='protocol'),
  interval: integer(name='Interval', description='interval'),
  evaluationCount: integer(name='EvaluationCount', description='evaluationCount'),
  timeout: integer(name='Timeout', description='timeout'),
  monitorExtendInfo: string(name='MonitorExtendInfo', description='extend'),
  ispCityNode: [
    {
      cityCode: string(name='CityCode', description='cityCode'),
      ispCode: string(name='IspCode', description='ispCode'),
    }
  ](name='IspCityNode', description='nodes'),
}

model AddGtmMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
  monitorConfigId: string(name='MonitorConfigId', description='module.id'),
}

async function addGtmMonitorWithOptions(request: AddGtmMonitorRequest, runtime: Util.RuntimeOptions): AddGtmMonitorResponse {
  Util.validateModel(request);
  return doRequest('AddGtmMonitor', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addGtmMonitor(request: AddGtmMonitorRequest): AddGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmMonitorWithOptions(request, runtime);
}

model AddGtmAddressPoolRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  name: string(name='Name', description='name'),
  type: string(name='Type', description='type'),
  minAvailableAddrNum: integer(name='MinAvailableAddrNum', description='minAvailableAddrNum'),
  addr: [
    {
      value: string(name='Value', description='value'),
      lbaWeight: integer(name='LbaWeight', description='lbaWeight'),
      mode: string(name='Mode', description='mode'),
    }
  ](name='Addr', description='poolAddrList'),
  monitorStatus?: string(name='MonitorStatus', description='monitorStatus'),
  protocolType?: string(name='ProtocolType', description='protocol'),
  interval?: integer(name='Interval', description='interval'),
  evaluationCount?: integer(name='EvaluationCount', description='evaluationCount'),
  timeout?: integer(name='Timeout', description='timeout'),
  monitorExtendInfo?: string(name='MonitorExtendInfo', description='extend'),
  ispCityNode?: [
    {
      cityCode?: string(name='CityCode', description='cityCode'),
      ispCode?: string(name='IspCode', description='ispCode'),
    }
  ](name='IspCityNode', description='nodes'),
}

model AddGtmAddressPoolResponse = {
  requestId: string(name='RequestId', description='requestId'),
  addrPoolId: string(name='AddrPoolId', description='module.id'),
  monitorConfigId: string(name='MonitorConfigId', description='module.monitorConfigId'),
}

async function addGtmAddressPoolWithOptions(request: AddGtmAddressPoolRequest, runtime: Util.RuntimeOptions): AddGtmAddressPoolResponse {
  Util.validateModel(request);
  return doRequest('AddGtmAddressPool', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addGtmAddressPool(request: AddGtmAddressPoolRequest): AddGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmAddressPoolWithOptions(request, runtime);
}

model AddGtmAccessStrategyRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  strategyName: string(name='StrategyName', description='strategyName'),
  defaultAddrPoolId: string(name='DefaultAddrPoolId', description='defaultAddrPoolId'),
  failoverAddrPoolId: string(name='FailoverAddrPoolId', description='failoverAddrPoolId'),
  accessLines: string(name='AccessLines', description='accessLines'),
}

model AddGtmAccessStrategyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  strategyId: string(name='StrategyId', description='module.id'),
}

async function addGtmAccessStrategyWithOptions(request: AddGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): AddGtmAccessStrategyResponse {
  Util.validateModel(request);
  return doRequest('AddGtmAccessStrategy', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addGtmAccessStrategy(request: AddGtmAccessStrategyRequest): AddGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addGtmAccessStrategyWithOptions(request, runtime);
}

model DescribeGtmInstancesRequest = {
  lang?: string(name='Lang', description='lang'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  keyword?: string(name='Keyword', description='keyword'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes', description='needDetailAttributes'),
}

model DescribeGtmInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  gtmInstances: {
    gtmInstance: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        instanceName: string(name='InstanceName', description='instanceName'),
        cname: string(name='Cname', description='cname'),
        userDomainName: string(name='UserDomainName', description='userDomainName'),
        versionCode: string(name='VersionCode', description='versionCode'),
        ttl: integer(name='Ttl', description='ttl'),
        lbaStrategy: string(name='LbaStrategy', description='lbaStrategy'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        expireTime: string(name='ExpireTime', description='expireTime'),
        expireTimestamp: long(name='ExpireTimestamp', description='expireTimestamp'),
        alertGroup: string(name='AlertGroup', description='alertGroup'),
        cnameMode: string(name='CnameMode', description='cnameMode'),
        accessStrategyNum: integer(name='AccessStrategyNum', description='accessStrategyNum'),
        addressPoolNum: integer(name='AddressPoolNum', description='addressPoolNum'),
      }
    ](name='GtmInstance', description='GtmInstance'),
  }(name='GtmInstances', description='module.data'),
}

async function describeGtmInstancesWithOptions(request: DescribeGtmInstancesRequest, runtime: Util.RuntimeOptions): DescribeGtmInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstances', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstances(request: DescribeGtmInstancesRequest): DescribeGtmInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstancesWithOptions(request, runtime);
}

model DeleteGtmAddressPoolRequest = {
  lang?: string(name='Lang', description='lang'),
  addrPoolId: string(name='AddrPoolId', description='addrPoolId'),
}

model DeleteGtmAddressPoolResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteGtmAddressPoolWithOptions(request: DeleteGtmAddressPoolRequest, runtime: Util.RuntimeOptions): DeleteGtmAddressPoolResponse {
  Util.validateModel(request);
  return doRequest('DeleteGtmAddressPool', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteGtmAddressPool(request: DeleteGtmAddressPoolRequest): DeleteGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGtmAddressPoolWithOptions(request, runtime);
}

model DescribeGtmAccessStrategiesRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId?: string(name='InstanceId', description='instanceId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeGtmAccessStrategiesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  strategies: {
    strategy: [
      {
        strategyId: string(name='StrategyId', description='id'),
        strategyName: string(name='StrategyName', description='name'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        defaultAddrPoolId: string(name='DefaultAddrPoolId', description='defaultAddrPoolId'),
        defaultAddrPoolName: string(name='DefaultAddrPoolName', description='defaultAddrPoolName'),
        failoverAddrPoolId: string(name='FailoverAddrPoolId', description='failoverAddrPoolId'),
        failoverAddrPoolName: string(name='FailoverAddrPoolName', description='failoverAddrPoolName'),
        accessMode: string(name='AccessMode', description='accessMode'),
        accessStatus: string(name='AccessStatus', description='accessStatus'),
        strategyMode: string(name='StrategyMode', description='strategyMode'),
        instanceId: string(name='InstanceId', description='instanceId'),
        defaultAddrPoolStatus: string(name='DefaultAddrPoolStatus', description='defaultAddrPoolStatus'),
        failoverAddrPoolStatus: string(name='FailoverAddrPoolStatus', description='failoverAddrPoolStatus'),
        defaultAddrPoolMonitorStatus: string(name='DefaultAddrPoolMonitorStatus', description='defaultAddrPoolMonitorStatus'),
        failoverAddrPoolMonitorStatus: string(name='FailoverAddrPoolMonitorStatus', description='failoverAddrPoolMonitorStatus'),
        lines: {
          line: [
            {
              lineCode: string(name='LineCode', description='lineCode'),
              lineName: string(name='LineName', description='lineName'),
              groupCode: string(name='GroupCode', description='groupCode'),
              groupName: string(name='GroupName', description='groupName'),
            }
          ](name='Line', description='Line'),
        }(name='Lines', description='lines'),
      }
    ](name='Strategy', description='Strategy'),
  }(name='Strategies', description='module.data'),
}

async function describeGtmAccessStrategiesWithOptions(request: DescribeGtmAccessStrategiesRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategiesResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmAccessStrategies', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmAccessStrategies(request: DescribeGtmAccessStrategiesRequest): DescribeGtmAccessStrategiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategiesWithOptions(request, runtime);
}

model DescribeGtmAccessStrategyRequest = {
  lang?: string(name='Lang', description='lang'),
  strategyId: string(name='StrategyId', description='strategyId'),
}

model DescribeGtmAccessStrategyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  strategyId: string(name='StrategyId', description='module.id'),
  strategyName: string(name='StrategyName', description='module.name'),
  defultAddrPoolId: string(name='DefultAddrPoolId', description='module.defaultAddrPoolId'),
  defaultAddrPoolName: string(name='DefaultAddrPoolName', description='module.defaultAddrPoolName'),
  failoverAddrPoolId: string(name='FailoverAddrPoolId', description='module.failoverAddrPoolId'),
  failoverAddrPoolName: string(name='FailoverAddrPoolName', description='module.failoverAddrPoolName'),
  strategyMode: string(name='StrategyMode', description='module.strategyMode'),
  accessMode: string(name='AccessMode', description='module.accessMode'),
  accessStatus: string(name='AccessStatus', description='module.accessStatus'),
  instanceId: string(name='InstanceId', description='module.instanceId'),
  defaultAddrPoolStatus: string(name='DefaultAddrPoolStatus', description='module.defaultAddrPoolStatus'),
  failoverAddrPoolStatus: string(name='FailoverAddrPoolStatus', description='module.failoverAddrPoolStatus'),
  defaultAddrPoolMonitorStatus: string(name='DefaultAddrPoolMonitorStatus', description='module.defaultAddrPoolMonitorStatus'),
  failoverAddrPoolMonitorStatus: string(name='FailoverAddrPoolMonitorStatus', description='module.failoverAddrPoolMonitorStatus'),
  lines: {
    line: [
      {
        lineCode: string(name='LineCode', description='lineCode'),
        lineName: string(name='LineName', description='lineName'),
        groupCode: string(name='GroupCode', description='groupCode'),
        groupName: string(name='GroupName', description='groupName'),
      }
    ](name='Line', description='Line'),
  }(name='Lines', description='module.lines'),
}

async function describeGtmAccessStrategyWithOptions(request: DescribeGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategyResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmAccessStrategy', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmAccessStrategy(request: DescribeGtmAccessStrategyRequest): DescribeGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategyWithOptions(request, runtime);
}

model DescribeGtmAccessStrategyAvailableConfigRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeGtmAccessStrategyAvailableConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  addrPools: {
    addrPool: [
      {
        addrPoolId: string(name='AddrPoolId', description='id'),
        addrPoolName: string(name='AddrPoolName', description='name'),
      }
    ](name='AddrPool', description='AddrPool'),
  }(name='AddrPools', description='module.addrPools'),
  lines: {
    line: [
      {
        lineCode: string(name='LineCode', description='lineCode'),
        lineName: string(name='LineName', description='lineName'),
        groupCode: string(name='GroupCode', description='groupCode'),
        groupName: string(name='GroupName', description='groupName'),
        status: string(name='Status', description='status'),
        fatherCode: string(name='FatherCode', description='fatherCode'),
      }
    ](name='Line', description='Line'),
  }(name='Lines', description='module.lines'),
}

async function describeGtmAccessStrategyAvailableConfigWithOptions(request: DescribeGtmAccessStrategyAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmAccessStrategyAvailableConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmAccessStrategyAvailableConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmAccessStrategyAvailableConfig(request: DescribeGtmAccessStrategyAvailableConfigRequest): DescribeGtmAccessStrategyAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAccessStrategyAvailableConfigWithOptions(request, runtime);
}

model DescribeGtmAvailableAlertGroupRequest = {
  lang?: string(name='Lang', description='lang'),
}

model DescribeGtmAvailableAlertGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableAlertGroup: string(name='AvailableAlertGroup', description='module'),
}

async function describeGtmAvailableAlertGroupWithOptions(request: DescribeGtmAvailableAlertGroupRequest, runtime: Util.RuntimeOptions): DescribeGtmAvailableAlertGroupResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmAvailableAlertGroup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmAvailableAlertGroup(request: DescribeGtmAvailableAlertGroupRequest): DescribeGtmAvailableAlertGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmAvailableAlertGroupWithOptions(request, runtime);
}

model DescribeGtmInstanceRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes', description='needDetailAttributes'),
}

model DescribeGtmInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='module.instanceId'),
  instanceName: string(name='InstanceName', description='module.instanceName'),
  versionCode: string(name='VersionCode', description='module.versionCode'),
  expireTime: string(name='ExpireTime', description='module.expireTime'),
  expireTimestamp: long(name='ExpireTimestamp', description='module.expireTimestamp'),
  cname: string(name='Cname', description='module.cname'),
  userDomainName: string(name='UserDomainName', description='module.userDomainName'),
  ttl: integer(name='Ttl', description='module.ttl'),
  lbaStrategy: string(name='LbaStrategy', description='module.lbaStrategy'),
  createTime: string(name='CreateTime', description='module.createTime'),
  createTimestamp: long(name='CreateTimestamp', description='module.createTimestamp'),
  alertGroup: string(name='AlertGroup', description='module.alertGroup'),
  cnameMode: string(name='CnameMode', description='module.cnameMode'),
  accessStrategyNum: integer(name='AccessStrategyNum', description='module.accessStrategyNum'),
  addressPoolNum: integer(name='AddressPoolNum', description='module.addressPoolNum'),
}

async function describeGtmInstanceWithOptions(request: DescribeGtmInstanceRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstance', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstance(request: DescribeGtmInstanceRequest): DescribeGtmInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceWithOptions(request, runtime);
}

model DescribeGtmInstanceAddressPoolRequest = {
  lang?: string(name='Lang', description='lang'),
  addrPoolId: string(name='AddrPoolId', description='addrPoolId'),
}

model DescribeGtmInstanceAddressPoolResponse = {
  requestId: string(name='RequestId', description='requestId'),
  addrPoolId: string(name='AddrPoolId', description='module.id'),
  createTime: string(name='CreateTime', description='module.createTime'),
  createTimestamp: long(name='CreateTimestamp', description='module.createTimestamp'),
  updateTime: string(name='UpdateTime', description='module.updateTime'),
  updateTimestamp: long(name='UpdateTimestamp', description='module.updateTimestamp'),
  addrCount: integer(name='AddrCount', description='module.addrCount'),
  minAvailableAddrNum: integer(name='MinAvailableAddrNum', description='module.minAvailableAddrNum'),
  monitorConfigId: string(name='MonitorConfigId', description='module.monitorConfigId'),
  monitorStatus: string(name='MonitorStatus', description='module.monitorStatus'),
  name: string(name='Name', description='module.name'),
  status: string(name='Status', description='module.status'),
  type: string(name='Type', description='module.type'),
  addrs: {
    addr: [
      {
        addrId: long(name='AddrId', description='id'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        updateTime: string(name='UpdateTime', description='updateTime'),
        updateTimestamp: long(name='UpdateTimestamp', description='updateTimestamp'),
        value: string(name='Value', description='value'),
        lbaWeight: integer(name='LbaWeight', description='lbaWeight'),
        mode: string(name='Mode', description='mode'),
        alertStatus: string(name='AlertStatus', description='alertStatus'),
      }
    ](name='Addr', description='Addr'),
  }(name='Addrs', description='module.poolAddrList'),
}

async function describeGtmInstanceAddressPoolWithOptions(request: DescribeGtmInstanceAddressPoolRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceAddressPoolResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstanceAddressPool', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstanceAddressPool(request: DescribeGtmInstanceAddressPoolRequest): DescribeGtmInstanceAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceAddressPoolWithOptions(request, runtime);
}

model DescribeGtmInstanceAddressPoolsRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  pageSize?: integer(name='PageSize', description='pageSize'),
}

model DescribeGtmInstanceAddressPoolsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalItems: integer(name='TotalItems', description='module.totalItems'),
  totalPages: integer(name='TotalPages', description='module.totalPages'),
  pageNumber: integer(name='PageNumber', description='module.pageNumber'),
  pageSize: integer(name='PageSize', description='module.pageSize'),
  addrPools: {
    addrPool: [
      {
        addrPoolId: string(name='AddrPoolId', description='id'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        updateTime: string(name='UpdateTime', description='updateTime'),
        updateTimestamp: long(name='UpdateTimestamp', description='updateTimestamp'),
        addrCount: integer(name='AddrCount', description='addrCount'),
        minAvailableAddrNum: integer(name='MinAvailableAddrNum', description='minAvailableAddrNum'),
        monitorConfigId: string(name='MonitorConfigId', description='monitorConfigId'),
        monitorStatus: string(name='MonitorStatus', description='monitorStatus'),
        name: string(name='Name', description='name'),
        status: string(name='Status', description='status'),
        type: string(name='Type', description='type'),
      }
    ](name='AddrPool', description='AddrPool'),
  }(name='AddrPools', description='module.data'),
}

async function describeGtmInstanceAddressPoolsWithOptions(request: DescribeGtmInstanceAddressPoolsRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceAddressPoolsResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstanceAddressPools', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstanceAddressPools(request: DescribeGtmInstanceAddressPoolsRequest): DescribeGtmInstanceAddressPoolsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceAddressPoolsWithOptions(request, runtime);
}

model DescribeGtmInstanceStatusRequest = {
  lang?: string(name='Lang', description='lang'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeGtmInstanceStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  addrNotAvailableNum: integer(name='AddrNotAvailableNum', description='module.addrNotAvailableNum'),
  addrPoolNotAvailableNum: integer(name='AddrPoolNotAvailableNum', description='module.addrPoolNotAvailableNum'),
  switchToFailoverStrategyNum: integer(name='SwitchToFailoverStrategyNum', description='module.switchToFailoverStrategyNum'),
  strategyNotAvailableNum: integer(name='StrategyNotAvailableNum', description='module.strategyNotAvailableNum'),
  status: string(name='Status', description='module.status'),
  statusReason: string(name='StatusReason', description='module.statusReasons'),
}

async function describeGtmInstanceStatusWithOptions(request: DescribeGtmInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeGtmInstanceStatusResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmInstanceStatus', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmInstanceStatus(request: DescribeGtmInstanceStatusRequest): DescribeGtmInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmInstanceStatusWithOptions(request, runtime);
}

model DescribeGtmMonitorAvailableConfigRequest = {
  lang?: string(name='Lang', description='lang'),
}

model DescribeGtmMonitorAvailableConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  ispCityNodes: {
    ispCityNode: [
      {
        ispName: string(name='IspName', description='ispName'),
        ispCode: string(name='IspCode', description='ispCode'),
        cityName: string(name='CityName', description='cityName'),
        cityCode: string(name='CityCode', description='cityCode'),
        defaultSelected: boolean(name='DefaultSelected', description='defaultSelected'),
        mainland: boolean(name='Mainland', description='mainland'),
        groupType: string(name='GroupType', description='groupType'),
        groupName: string(name='GroupName', description='groupName'),
      }
    ](name='IspCityNode', description='IspCityNode'),
  }(name='IspCityNodes', description='module.nodes'),
}

async function describeGtmMonitorAvailableConfigWithOptions(request: DescribeGtmMonitorAvailableConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmMonitorAvailableConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmMonitorAvailableConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmMonitorAvailableConfig(request: DescribeGtmMonitorAvailableConfigRequest): DescribeGtmMonitorAvailableConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmMonitorAvailableConfigWithOptions(request, runtime);
}

model DescribeGtmMonitorConfigRequest = {
  lang?: string(name='Lang', description='lang'),
  monitorConfigId: string(name='MonitorConfigId', description='monitorConfigId'),
}

model DescribeGtmMonitorConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  monitorConfigId: string(name='MonitorConfigId', description='module.id'),
  createTime: string(name='CreateTime', description='module.createTime'),
  createTimestamp: long(name='CreateTimestamp', description='module.createTimestamp'),
  updateTime: string(name='UpdateTime', description='module.updateTime'),
  updateTimestamp: long(name='UpdateTimestamp', description='module.updateTimestamp'),
  protocolType: string(name='ProtocolType', description='module.protocol'),
  interval: integer(name='Interval', description='module.interval'),
  evaluationCount: integer(name='EvaluationCount', description='module.evaluationCount'),
  timeout: integer(name='Timeout', description='module.timeout'),
  monitorExtendInfo: string(name='MonitorExtendInfo', description='module.extend'),
  ispCityNodes: {
    ispCityNode: [
      {
        countryName: string(name='CountryName', description='countryName'),
        countryCode: string(name='CountryCode', description='countryCode'),
        cityName: string(name='CityName', description='cityName'),
        cityCode: string(name='CityCode', description='cityCode'),
        ispCode: string(name='IspCode', description='ispCode'),
        ispName: string(name='IspName', description='ispName'),
      }
    ](name='IspCityNode', description='IspCityNode'),
  }(name='IspCityNodes', description='module.nodes'),
}

async function describeGtmMonitorConfigWithOptions(request: DescribeGtmMonitorConfigRequest, runtime: Util.RuntimeOptions): DescribeGtmMonitorConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeGtmMonitorConfig', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeGtmMonitorConfig(request: DescribeGtmMonitorConfigRequest): DescribeGtmMonitorConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGtmMonitorConfigWithOptions(request, runtime);
}

model UpdateGtmAccessStrategyRequest = {
  lang?: string(name='Lang', description='lang'),
  strategyId: string(name='StrategyId', description='strategyId'),
  strategyName?: string(name='StrategyName', description='strategyName'),
  defaultAddrPoolId?: string(name='DefaultAddrPoolId', description='defaultAddrPoolId'),
  failoverAddrPoolId?: string(name='FailoverAddrPoolId', description='failoverAddrPoolId'),
  accessLines?: string(name='AccessLines', description='accessLines'),
}

model UpdateGtmAccessStrategyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateGtmAccessStrategyWithOptions(request: UpdateGtmAccessStrategyRequest, runtime: Util.RuntimeOptions): UpdateGtmAccessStrategyResponse {
  Util.validateModel(request);
  return doRequest('UpdateGtmAccessStrategy', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateGtmAccessStrategy(request: UpdateGtmAccessStrategyRequest): UpdateGtmAccessStrategyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmAccessStrategyWithOptions(request, runtime);
}

model UpdateGtmAddressPoolRequest = {
  lang?: string(name='Lang', description='lang'),
  addrPoolId: string(name='AddrPoolId', description='addrPoolId'),
  name?: string(name='Name', description='name'),
  type: string(name='Type', description='type'),
  minAvailableAddrNum?: integer(name='MinAvailableAddrNum', description='minAvailableAddrNum'),
  addr: [
    {
      value: string(name='Value', description='value'),
      lbaWeight: integer(name='LbaWeight', description='lbaWeight'),
      mode: string(name='Mode', description='mode'),
    }
  ](name='Addr', description='poolAddrList'),
}

model UpdateGtmAddressPoolResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateGtmAddressPoolWithOptions(request: UpdateGtmAddressPoolRequest, runtime: Util.RuntimeOptions): UpdateGtmAddressPoolResponse {
  Util.validateModel(request);
  return doRequest('UpdateGtmAddressPool', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateGtmAddressPool(request: UpdateGtmAddressPoolRequest): UpdateGtmAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmAddressPoolWithOptions(request, runtime);
}

model UpdateGtmMonitorRequest = {
  lang?: string(name='Lang', description='lang'),
  monitorConfigId: string(name='MonitorConfigId', description='monitorConfigId'),
  protocolType: string(name='ProtocolType', description='protocol'),
  interval?: integer(name='Interval', description='interval'),
  evaluationCount?: integer(name='EvaluationCount', description='evaluationCount'),
  timeout?: integer(name='Timeout', description='timeout'),
  monitorExtendInfo: string(name='MonitorExtendInfo', description='extend'),
  ispCityNode: [
    {
      cityCode: string(name='CityCode', description='cityCode'),
      ispCode: string(name='IspCode', description='ispCode'),
    }
  ](name='IspCityNode', description='nodes'),
}

model UpdateGtmMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateGtmMonitorWithOptions(request: UpdateGtmMonitorRequest, runtime: Util.RuntimeOptions): UpdateGtmMonitorResponse {
  Util.validateModel(request);
  return doRequest('UpdateGtmMonitor', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateGtmMonitor(request: UpdateGtmMonitorRequest): UpdateGtmMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateGtmMonitorWithOptions(request, runtime);
}

model UpdateDomainRemarkRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  remark?: string(name='Remark', description='remark'),
}

model UpdateDomainRemarkResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateDomainRemarkWithOptions(request: UpdateDomainRemarkRequest, runtime: Util.RuntimeOptions): UpdateDomainRemarkResponse {
  Util.validateModel(request);
  return doRequest('UpdateDomainRemark', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateDomainRemark(request: UpdateDomainRemarkRequest): UpdateDomainRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRemarkWithOptions(request, runtime);
}

model UpdateDomainRecordRemarkRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='recordId'),
  remark?: string(name='Remark', description='remark'),
}

model UpdateDomainRecordRemarkResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function updateDomainRecordRemarkWithOptions(request: UpdateDomainRecordRemarkRequest, runtime: Util.RuntimeOptions): UpdateDomainRecordRemarkResponse {
  Util.validateModel(request);
  return doRequest('UpdateDomainRecordRemark', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateDomainRecordRemark(request: UpdateDomainRecordRemarkRequest): UpdateDomainRecordRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRecordRemarkWithOptions(request, runtime);
}

model DescribeSupportLinesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName?: string(name='DomainName', description='domainName'),
}

model DescribeSupportLinesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordLines: {
    recordLine: [
      {
        lineCode: string(name='LineCode', description='lineCode'),
        fatherCode: string(name='FatherCode', description='fatherCode'),
        lineName: string(name='LineName', description='lineName'),
        lineDisplayName: string(name='LineDisplayName', description='lineDisplayName'),
      }
    ](name='RecordLine', description='RecordLine'),
  }(name='RecordLines', description='module'),
}

async function describeSupportLinesWithOptions(request: DescribeSupportLinesRequest, runtime: Util.RuntimeOptions): DescribeSupportLinesResponse {
  Util.validateModel(request);
  return doRequest('DescribeSupportLines', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeSupportLines(request: DescribeSupportLinesRequest): DescribeSupportLinesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSupportLinesWithOptions(request, runtime);
}

model DescribeDomainNsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
}

model DescribeDomainNsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  allAliDns: boolean(name='AllAliDns', description='module.allAliDns'),
  includeAliDns: boolean(name='IncludeAliDns', description='module.includeAliDns'),
  dnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='DnsServers', description='module.dnsList'),
  expectDnsServers: {
    expectDnsServer: [ string ](name='ExpectDnsServer', description='ExpectDnsServer'),
  }(name='ExpectDnsServers', description='module.expectDnsList'),
}

async function describeDomainNsWithOptions(request: DescribeDomainNsRequest, runtime: Util.RuntimeOptions): DescribeDomainNsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainNs', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainNs(request: DescribeDomainNsRequest): DescribeDomainNsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainNsWithOptions(request, runtime);
}

model DescribeDnsProductInstanceRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  instanceId: string(name='InstanceId', description='instanceId'),
}

model DescribeDnsProductInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  instanceId: string(name='InstanceId', description='module.instanceId'),
  versionCode: string(name='VersionCode', description='module.versionCode'),
  versionName: string(name='VersionName', description='module.versionName'),
  startTime: string(name='StartTime', description='module.startTime'),
  startTimestamp: long(name='StartTimestamp', description='module.startTimestamp'),
  endTime: string(name='EndTime', description='module.endTime'),
  endTimestamp: long(name='EndTimestamp', description='module.endTimestamp'),
  domain: string(name='Domain', description='module.domain'),
  bindCount: long(name='BindCount', description='module.bindCount'),
  bindUsedCount: long(name='BindUsedCount', description='module.bindUsedCount'),
  TTLMinValue: long(name='TTLMinValue', description='module.ttlMinValue'),
  subDomainLevel: long(name='SubDomainLevel', description='module.subDomainLevel'),
  dnsSLBCount: long(name='DnsSLBCount', description='module.dnsSLBCount'),
  URLForwardCount: long(name='URLForwardCount', description='module.urlForwardCount'),
  DDosDefendFlow: long(name='DDosDefendFlow', description='module.ddosDefendFlow'),
  DDosDefendQuery: long(name='DDosDefendQuery', description='module.ddosDefendQuery'),
  overseaDDosDefendFlow: long(name='OverseaDDosDefendFlow', description='module.overseaDDosDefendFlow'),
  searchEngineLines: string(name='SearchEngineLines', description='module.searchEngineLines'),
  ISPLines: string(name='ISPLines', description='module.ispLines'),
  ISPRegionLines: string(name='ISPRegionLines', description='module.ispRegionLines'),
  overseaLine: string(name='OverseaLine', description='module.overseaLine'),
  monitorNodeCount: long(name='MonitorNodeCount', description='module.monitorNodeCount'),
  monitorFrequency: long(name='MonitorFrequency', description='module.monitorFrequency'),
  monitorTaskCount: long(name='MonitorTaskCount', description='module.monitorTaskCount'),
  regionLines: boolean(name='RegionLines', description='module.regionLines'),
  gslb: boolean(name='Gslb', description='module.gslb'),
  inClean: boolean(name='InClean', description='module.inClean'),
  inBlackHole: boolean(name='InBlackHole', description='module.inBlackHole'),
  bindDomainCount: long(name='BindDomainCount', description='module.bindDomainCount'),
  bindDomainUsedCount: long(name='BindDomainUsedCount', description='module.bindDomainUsedCount'),
  dnsSecurity: string(name='DnsSecurity', description='module.dnsSecurity'),
  dnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='DnsServers', description='module.nsList'),
}

async function describeDnsProductInstanceWithOptions(request: DescribeDnsProductInstanceRequest, runtime: Util.RuntimeOptions): DescribeDnsProductInstanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDnsProductInstance', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDnsProductInstance(request: DescribeDnsProductInstanceRequest): DescribeDnsProductInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsProductInstanceWithOptions(request, runtime);
}

model UpdateDomainRecordRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='rrId'),
  RR: string(name='RR', description='rr'),
  type: string(name='Type', description='type'),
  value: string(name='Value', description='value'),
  TTL?: long(name='TTL', description='ttl'),
  priority?: long(name='Priority', description='priority'),
  line?: string(name='Line', description='line'),
}

model UpdateDomainRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordId: string(name='RecordId', description='module'),
}

async function updateDomainRecordWithOptions(request: UpdateDomainRecordRequest, runtime: Util.RuntimeOptions): UpdateDomainRecordResponse {
  Util.validateModel(request);
  return doRequest('UpdateDomainRecord', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function updateDomainRecord(request: UpdateDomainRecordRequest): UpdateDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainRecordWithOptions(request, runtime);
}

model UpdateDomainGroupRequest = {
  lang?: string(name='Lang', description='lang'),
  groupId: string(name='GroupId', description='groupId'),
  groupName: string(name='GroupName', description='groupName'),
}

model UpdateDomainGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
}

async function updateDomainGroupWithOptions(request: UpdateDomainGroupRequest, runtime: Util.RuntimeOptions): UpdateDomainGroupResponse {
  Util.validateModel(request);
  return doRequest('UpdateDomainGroup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateDomainGroup(request: UpdateDomainGroupRequest): UpdateDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDomainGroupWithOptions(request, runtime);
}

model UpdateDNSSLBWeightRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='rrId'),
  weight: integer(name='Weight', description='weight'),
}

model UpdateDNSSLBWeightResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordId: string(name='RecordId', description='module.rrId'),
  weight: integer(name='Weight', description='module.weight'),
}

async function updateDNSSLBWeightWithOptions(request: UpdateDNSSLBWeightRequest, runtime: Util.RuntimeOptions): UpdateDNSSLBWeightResponse {
  Util.validateModel(request);
  return doRequest('UpdateDNSSLBWeight', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function updateDNSSLBWeight(request: UpdateDNSSLBWeightRequest): UpdateDNSSLBWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDNSSLBWeightWithOptions(request, runtime);
}

model SetDomainRecordStatusRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='rrId'),
  status: string(name='Status', description='status'),
}

model SetDomainRecordStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordId: string(name='RecordId', description='module.rrId'),
  status: string(name='Status', description='module.status'),
}

async function setDomainRecordStatusWithOptions(request: SetDomainRecordStatusRequest, runtime: Util.RuntimeOptions): SetDomainRecordStatusResponse {
  Util.validateModel(request);
  return doRequest('SetDomainRecordStatus', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function setDomainRecordStatus(request: SetDomainRecordStatusRequest): SetDomainRecordStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainRecordStatusWithOptions(request, runtime);
}

model SetDNSSLBStatusRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  subDomain: string(name='SubDomain', description='subDomain'),
  open?: boolean(name='Open', description='open'),
  domainName?: string(name='DomainName', description='domainName'),
  type?: string(name='Type', description='type'),
}

model SetDNSSLBStatusResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordCount: long(name='RecordCount', description='module.recordCount'),
  open: boolean(name='Open', description='module.open'),
}

async function setDNSSLBStatusWithOptions(request: SetDNSSLBStatusRequest, runtime: Util.RuntimeOptions): SetDNSSLBStatusResponse {
  Util.validateModel(request);
  return doRequest('SetDNSSLBStatus', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function setDNSSLBStatus(request: SetDNSSLBStatusRequest): SetDNSSLBStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDNSSLBStatusWithOptions(request, runtime);
}

model ModifyHichinaDomainDNSRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName: string(name='DomainName', description='domainName'),
}

model ModifyHichinaDomainDNSResponse = {
  requestId: string(name='RequestId', description='requestId'),
  originalDnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='OriginalDnsServers', description='module.originalDnsServers'),
  newDnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='NewDnsServers', description='module.newDnsServers'),
}

async function modifyHichinaDomainDNSWithOptions(request: ModifyHichinaDomainDNSRequest, runtime: Util.RuntimeOptions): ModifyHichinaDomainDNSResponse {
  Util.validateModel(request);
  return doRequest('ModifyHichinaDomainDNS', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function modifyHichinaDomainDNS(request: ModifyHichinaDomainDNSRequest): ModifyHichinaDomainDNSResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHichinaDomainDNSWithOptions(request, runtime);
}

model GetMainDomainNameRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  inputString: string(name='InputString', description='commonName'),
}

model GetMainDomainNameResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='module.domainName'),
  RR: string(name='RR', description='module.rr'),
  domainLevel: long(name='DomainLevel', description='module.domainLevel'),
}

async function getMainDomainNameWithOptions(request: GetMainDomainNameRequest, runtime: Util.RuntimeOptions): GetMainDomainNameResponse {
  Util.validateModel(request);
  return doRequest('GetMainDomainName', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function getMainDomainName(request: GetMainDomainNameRequest): GetMainDomainNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMainDomainNameWithOptions(request, runtime);
}

model DescribeSubDomainRecordsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  subDomain: string(name='SubDomain', description='subDomain'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  type?: string(name='Type', description='type'),
  line?: string(name='Line', description='line'),
  domainName?: string(name='DomainName', description='domainName'),
}

model DescribeSubDomainRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domainRecords: {
    record: [
      {
        domainName: string(name='DomainName', description='domainName'),
        recordId: string(name='RecordId', description='rrId'),
        RR: string(name='RR', description='rr'),
        type: string(name='Type', description='type'),
        value: string(name='Value', description='value'),
        TTL: long(name='TTL', description='ttl'),
        priority: long(name='Priority', description='priority'),
        line: string(name='Line', description='line'),
        status: string(name='Status', description='status'),
        locked: boolean(name='Locked', description='locked'),
        weight: integer(name='Weight', description='weight'),
      }
    ](name='Record', description='Record'),
  }(name='DomainRecords', description='module.data'),
}

async function describeSubDomainRecordsWithOptions(request: DescribeSubDomainRecordsRequest, runtime: Util.RuntimeOptions): DescribeSubDomainRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSubDomainRecords', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeSubDomainRecords(request: DescribeSubDomainRecordsRequest): DescribeSubDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSubDomainRecordsWithOptions(request, runtime);
}

model DescribeRecordLogsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName: string(name='DomainName', description='domainName'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  keyWord?: string(name='KeyWord', description='keyword'),
  startDate?: string(name='StartDate', description='startDate'),
  endDate?: string(name='endDate', description='endDate'),
}

model DescribeRecordLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  recordLogs: {
    recordLog: [
      {
        actionTime: string(name='ActionTime', description='actionTime'),
        actionTimestamp: long(name='ActionTimestamp', description='actionTimestamp'),
        action: string(name='Action', description='action'),
        message: string(name='Message', description='message'),
        clientIp: string(name='ClientIp', description='clientIp'),
      }
    ](name='RecordLog', description='RecordLog'),
  }(name='RecordLogs', description='module.data'),
}

async function describeRecordLogsWithOptions(request: DescribeRecordLogsRequest, runtime: Util.RuntimeOptions): DescribeRecordLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRecordLogs', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeRecordLogs(request: DescribeRecordLogsRequest): DescribeRecordLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRecordLogsWithOptions(request, runtime);
}

model DescribeDomainsRequest = {
  lang?: string(name='Lang', description='lang'),
  keyWord?: string(name='KeyWord', description='keyword'),
  groupId?: string(name='GroupId', description='groupId'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  searchMode?: string(name='SearchMode', description='searchMode'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  starmark?: boolean(name='Starmark', description='starmark'),
}

model DescribeDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domains: {
    domain: [
      {
        domainId: string(name='DomainId', description='domainId'),
        domainName: string(name='DomainName', description='domainName'),
        punyCode: string(name='PunyCode', description='punyCode'),
        aliDomain: boolean(name='AliDomain', description='aliDomain'),
        recordCount: long(name='RecordCount', description='recordCount'),
        registrantEmail: string(name='RegistrantEmail', description='registrantEmail'),
        remark: string(name='Remark', description='remark'),
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        instanceId: string(name='InstanceId', description='instanceId'),
        versionCode: string(name='VersionCode', description='versionCode'),
        versionName: string(name='VersionName', description='versionName'),
        instanceEndTime: string(name='InstanceEndTime', description='instanceEndTime'),
        instanceExpired: boolean(name='InstanceExpired', description='instanceExpired'),
        starmark: boolean(name='Starmark', description='starmark'),
        createTime: string(name='CreateTime', description='createTime'),
        createTimestamp: long(name='CreateTimestamp', description='createTimestamp'),
        tags: {
          tag: [
            {
              key: string(name='Key', description='key'),
              value: string(name='Value', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
        dnsServers: {
          dnsServer: [ string ](name='DnsServer', description='DnsServer'),
        }(name='DnsServers', description='dnsList'),
      }
    ](name='Domain', description='Domain'),
  }(name='Domains', description='module.data'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomains', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeDomainRecordsRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  keyWord?: string(name='KeyWord', description='keyword'),
  RRKeyWord?: string(name='RRKeyWord', description='rrKeyword'),
  typeKeyWord?: string(name='TypeKeyWord', description='typeKeyword'),
  valueKeyWord?: string(name='ValueKeyWord', description='valueKeyword'),
  orderBy?: string(name='OrderBy', description='orderBy'),
  direction?: string(name='Direction', description='direction'),
  searchMode?: string(name='SearchMode', description='searchMode'),
  groupId?: long(name='GroupId', description='groupId'),
  type?: string(name='Type', description='type'),
  line?: string(name='Line', description='line'),
  status?: string(name='Status', description='status'),
}

model DescribeDomainRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domainRecords: {
    record: [
      {
        domainName: string(name='DomainName', description='domainName'),
        recordId: string(name='RecordId', description='rrId'),
        RR: string(name='RR', description='rr'),
        type: string(name='Type', description='type'),
        value: string(name='Value', description='value'),
        TTL: long(name='TTL', description='ttl'),
        priority: long(name='Priority', description='priority'),
        line: string(name='Line', description='line'),
        status: string(name='Status', description='status'),
        locked: boolean(name='Locked', description='locked'),
        weight: integer(name='Weight', description='weight'),
        remark: string(name='Remark', description='remark'),
      }
    ](name='Record', description='Record'),
  }(name='DomainRecords', description='module.data'),
}

async function describeDomainRecordsWithOptions(request: DescribeDomainRecordsRequest, runtime: Util.RuntimeOptions): DescribeDomainRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainRecords', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function describeDomainRecords(request: DescribeDomainRecordsRequest): DescribeDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRecordsWithOptions(request, runtime);
}

model DescribeDomainRecordInfoRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='rrId'),
}

model DescribeDomainRecordInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainId: string(name='DomainId', description='module.domainId'),
  domainName: string(name='DomainName', description='module.domainName'),
  punyCode: string(name='PunyCode', description='module.punyCode'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
  recordId: string(name='RecordId', description='module.rrId'),
  RR: string(name='RR', description='module.rr'),
  type: string(name='Type', description='module.type'),
  value: string(name='Value', description='module.value'),
  TTL: long(name='TTL', description='module.ttl'),
  priority: long(name='Priority', description='module.priority'),
  line: string(name='Line', description='module.line'),
  status: string(name='Status', description='module.status'),
  locked: boolean(name='Locked', description='module.locked'),
}

async function describeDomainRecordInfoWithOptions(request: DescribeDomainRecordInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainRecordInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainRecordInfo', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function describeDomainRecordInfo(request: DescribeDomainRecordInfoRequest): DescribeDomainRecordInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainRecordInfoWithOptions(request, runtime);
}

model DescribeDomainLogsRequest = {
  lang?: string(name='Lang', description='lang'),
  keyWord?: string(name='KeyWord', description='keyword'),
  groupId?: string(name='GroupId', description='groupId'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  startDate?: string(name='StartDate', description='startDate'),
  endDate?: string(name='endDate', description='endDate'),
  type?: string(name='Type', description='type'),
}

model DescribeDomainLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domainLogs: {
    domainLog: [
      {
        actionTime: string(name='ActionTime', description='actionTime'),
        actionTimestamp: long(name='ActionTimestamp', description='actionTimestamp'),
        domainName: string(name='DomainName', description='domainName'),
        action: string(name='Action', description='action'),
        message: string(name='Message', description='message'),
        clientIp: string(name='ClientIp', description='clientIp'),
        zoneId: string(name='ZoneId', description='zoneId'),
      }
    ](name='DomainLog', description='DomainLog'),
  }(name='DomainLogs', description='module.data'),
}

async function describeDomainLogsWithOptions(request: DescribeDomainLogsRequest, runtime: Util.RuntimeOptions): DescribeDomainLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainLogs', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainLogs(request: DescribeDomainLogsRequest): DescribeDomainLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainLogsWithOptions(request, runtime);
}

model DescribeDomainInfoRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  needDetailAttributes?: boolean(name='NeedDetailAttributes', description='needDetailAttributes'),
}

model DescribeDomainInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainId: string(name='DomainId', description='module.domainId'),
  domainName: string(name='DomainName', description='module.domainName'),
  punyCode: string(name='PunyCode', description='module.punyCode'),
  aliDomain: boolean(name='AliDomain', description='module.aliDomain'),
  remark: string(name='Remark', description='module.remark'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
  instanceId: string(name='InstanceId', description='module.instanceId'),
  versionCode: string(name='VersionCode', description='module.versionCode'),
  versionName: string(name='VersionName', description='module.versionName'),
  minTtl: long(name='MinTtl', description='module.minTtl'),
  recordLineTreeJson: string(name='RecordLineTreeJson', description='module.recordLineTree'),
  lineType: string(name='LineType', description='module.lineType'),
  regionLines: boolean(name='RegionLines', description='module.regionLines'),
  inBlackHole: boolean(name='InBlackHole', description='module.inBlackHole'),
  inClean: boolean(name='InClean', description='module.inClean'),
  slaveDns: boolean(name='SlaveDns', description='module.slaveDns'),
  recordLines: {
    recordLine: [
      {
        lineCode: string(name='LineCode', description='lineCode'),
        fatherCode: string(name='FatherCode', description='fatherCode'),
        lineName: string(name='LineName', description='lineName'),
        lineDisplayName: string(name='LineDisplayName', description='lineDisplayName'),
      }
    ](name='RecordLine', description='RecordLine'),
  }(name='RecordLines', description='module.recordLines'),
  dnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='DnsServers', description='module.dnsList'),
  availableTtls: {
    availableTtl: [ string ](name='AvailableTtl', description='AvailableTtl'),
  }(name='AvailableTtls', description='module.availableTtl'),
}

async function describeDomainInfoWithOptions(request: DescribeDomainInfoRequest, runtime: Util.RuntimeOptions): DescribeDomainInfoResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainInfo', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainInfo(request: DescribeDomainInfoRequest): DescribeDomainInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainInfoWithOptions(request, runtime);
}

model DescribeDomainGroupsRequest = {
  lang?: string(name='Lang', description='lang'),
  keyWord?: string(name='KeyWord', description='keyword'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeDomainGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItems'),
  pageNumber: long(name='PageNumber', description='module.pageNumber'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  domainGroups: {
    domainGroup: [
      {
        groupId: string(name='GroupId', description='groupId'),
        groupName: string(name='GroupName', description='groupName'),
        domainCount: long(name='DomainCount', description='domainCount'),
      }
    ](name='DomainGroup', description='DomainGroup'),
  }(name='DomainGroups', description='module.data'),
}

async function describeDomainGroupsWithOptions(request: DescribeDomainGroupsRequest, runtime: Util.RuntimeOptions): DescribeDomainGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDomainGroups', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDomainGroups(request: DescribeDomainGroupsRequest): DescribeDomainGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainGroupsWithOptions(request, runtime);
}

model DescribeDNSSLBSubDomainsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName: string(name='DomainName', description='domainName'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
}

model DescribeDNSSLBSubDomainsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItemNum'),
  pageNumber: long(name='PageNumber', description='module.currentPageNum'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  slbSubDomains: {
    slbSubDomain: [
      {
        subDomain: string(name='SubDomain', description='subDomain'),
        recordCount: long(name='RecordCount', description='recordCount'),
        open: boolean(name='Open', description='open'),
        type: string(name='Type', description='type'),
      }
    ](name='SlbSubDomain', description='SlbSubDomain'),
  }(name='SlbSubDomains', description='module.data'),
}

async function describeDNSSLBSubDomainsWithOptions(request: DescribeDNSSLBSubDomainsRequest, runtime: Util.RuntimeOptions): DescribeDNSSLBSubDomainsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDNSSLBSubDomains', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDNSSLBSubDomains(request: DescribeDNSSLBSubDomainsRequest): DescribeDNSSLBSubDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDNSSLBSubDomainsWithOptions(request, runtime);
}

model DescribeDnsProductInstancesRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  pageNumber?: long(name='PageNumber', description='pageNumber'),
  pageSize?: long(name='PageSize', description='pageSize'),
  versionCode?: string(name='VersionCode', description='versionCode'),
}

model DescribeDnsProductInstancesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: long(name='TotalCount', description='module.totalItemNum'),
  pageNumber: long(name='PageNumber', description='module.currentPageNum'),
  pageSize: long(name='PageSize', description='module.pageSize'),
  dnsProducts: {
    dnsProduct: [
      {
        instanceId: string(name='InstanceId', description='instanceId'),
        versionCode: string(name='VersionCode', description='versionCode'),
        versionName: string(name='VersionName', description='versionName'),
        startTime: string(name='StartTime', description='startTime'),
        endTime: string(name='EndTime', description='endTime'),
        startTimestamp: long(name='StartTimestamp', description='startTimestamp'),
        endTimestamp: long(name='EndTimestamp', description='endTimestamp'),
        domain: string(name='Domain', description='domain'),
        bindCount: long(name='BindCount', description='bindCount'),
        bindUsedCount: long(name='BindUsedCount', description='bindUsedCount'),
        TTLMinValue: long(name='TTLMinValue', description='ttlMinValue'),
        subDomainLevel: long(name='SubDomainLevel', description='subDomainLevel'),
        dnsSLBCount: long(name='DnsSLBCount', description='dnsSLBCount'),
        URLForwardCount: long(name='URLForwardCount', description='urlForwardCount'),
        DDosDefendFlow: long(name='DDosDefendFlow', description='ddosDefendFlow'),
        DDosDefendQuery: long(name='DDosDefendQuery', description='ddosDefendQuery'),
        overseaDDosDefendFlow: long(name='OverseaDDosDefendFlow', description='overseaDDosDefendFlow'),
        searchEngineLines: string(name='SearchEngineLines', description='searchEngineLines'),
        ISPLines: string(name='ISPLines', description='ispLines'),
        ISPRegionLines: string(name='ISPRegionLines', description='ispRegionLines'),
        overseaLine: string(name='OverseaLine', description='overseaLine'),
        monitorNodeCount: long(name='MonitorNodeCount', description='monitorNodeCount'),
        monitorFrequency: long(name='MonitorFrequency', description='monitorFrequency'),
        monitorTaskCount: long(name='MonitorTaskCount', description='monitorTaskCount'),
        regionLines: boolean(name='RegionLines', description='regionLines'),
        gslb: boolean(name='Gslb', description='gslb'),
        inClean: boolean(name='InClean', description='inClean'),
        inBlackHole: boolean(name='InBlackHole', description='inBlackHole'),
        bindDomainCount: long(name='BindDomainCount', description='bindDomainCount'),
        bindDomainUsedCount: long(name='BindDomainUsedCount', description='bindDomainUsedCount'),
        dnsSecurity: string(name='DnsSecurity', description='dnsSecurity'),
      }
    ](name='DnsProduct', description='DnsProduct'),
  }(name='DnsProducts', description='module.data'),
}

async function describeDnsProductInstancesWithOptions(request: DescribeDnsProductInstancesRequest, runtime: Util.RuntimeOptions): DescribeDnsProductInstancesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDnsProductInstances', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function describeDnsProductInstances(request: DescribeDnsProductInstancesRequest): DescribeDnsProductInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDnsProductInstancesWithOptions(request, runtime);
}

model DeleteSubDomainRecordsRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName: string(name='DomainName', description='domainName'),
  RR: string(name='RR', description='rr'),
  type?: string(name='Type', description='type'),
}

model DeleteSubDomainRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  RR: string(name='RR', description='module.subDomain'),
  totalCount: string(name='TotalCount', description='module.totalCount'),
}

async function deleteSubDomainRecordsWithOptions(request: DeleteSubDomainRecordsRequest, runtime: Util.RuntimeOptions): DeleteSubDomainRecordsResponse {
  Util.validateModel(request);
  return doRequest('DeleteSubDomainRecords', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteSubDomainRecords(request: DeleteSubDomainRecordsRequest): DeleteSubDomainRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubDomainRecordsWithOptions(request, runtime);
}

model DeleteDomainRecordRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  recordId: string(name='RecordId', description='rrId'),
}

model DeleteDomainRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordId: string(name='RecordId', description='module'),
}

async function deleteDomainRecordWithOptions(request: DeleteDomainRecordRequest, runtime: Util.RuntimeOptions): DeleteDomainRecordResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomainRecord', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function deleteDomainRecord(request: DeleteDomainRecordRequest): DeleteDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainRecordWithOptions(request, runtime);
}

model DeleteDomainGroupRequest = {
  lang?: string(name='Lang', description='lang'),
  groupId: string(name='GroupId', description='groupId'),
}

model DeleteDomainGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupName: string(name='GroupName', description='module.groupName'),
}

async function deleteDomainGroupWithOptions(request: DeleteDomainGroupRequest, runtime: Util.RuntimeOptions): DeleteDomainGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomainGroup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function deleteDomainGroup(request: DeleteDomainGroupRequest): DeleteDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainGroupWithOptions(request, runtime);
}

model DeleteDomainRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
}

model DeleteDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainName: string(name='DomainName', description='module.domainName'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  return doRequest('DeleteDomain', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model ChangeDomainOfDnsProductRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  instanceId: string(name='InstanceId', description='instanceId'),
  newDomain?: string(name='NewDomain', description='newDomain'),
  force?: boolean(name='Force', description='force'),
}

model ChangeDomainOfDnsProductResponse = {
  requestId: string(name='RequestId', description='requestId'),
  originalDomain: string(name='OriginalDomain', description='module'),
}

async function changeDomainOfDnsProductWithOptions(request: ChangeDomainOfDnsProductRequest, runtime: Util.RuntimeOptions): ChangeDomainOfDnsProductResponse {
  Util.validateModel(request);
  return doRequest('ChangeDomainOfDnsProduct', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function changeDomainOfDnsProduct(request: ChangeDomainOfDnsProductRequest): ChangeDomainOfDnsProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeDomainOfDnsProductWithOptions(request, runtime);
}

model ChangeDomainGroupRequest = {
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  groupId?: string(name='GroupId', description='groupId'),
}

model ChangeDomainGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
}

async function changeDomainGroupWithOptions(request: ChangeDomainGroupRequest, runtime: Util.RuntimeOptions): ChangeDomainGroupResponse {
  Util.validateModel(request);
  return doRequest('ChangeDomainGroup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function changeDomainGroup(request: ChangeDomainGroupRequest): ChangeDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeDomainGroupWithOptions(request, runtime);
}

model AddDomainRecordRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  userClientIp?: string(name='UserClientIp', description='userClientIp'),
  domainName: string(name='DomainName', description='domainName'),
  RR: string(name='RR', description='rr'),
  type: string(name='Type', description='type'),
  value: string(name='Value', description='value'),
  TTL?: long(name='TTL', description='ttl'),
  priority?: long(name='Priority', description='priority'),
  line?: string(name='Line', description='line'),
}

model AddDomainRecordResponse = {
  requestId: string(name='RequestId', description='requestId'),
  recordId: string(name='RecordId', description='module'),
}

async function addDomainRecordWithOptions(request: AddDomainRecordRequest, runtime: Util.RuntimeOptions): AddDomainRecordResponse {
  Util.validateModel(request);
  return doRequest('AddDomainRecord', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function addDomainRecord(request: AddDomainRecordRequest): AddDomainRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainRecordWithOptions(request, runtime);
}

model AddDomainGroupRequest = {
  lang?: string(name='Lang', description='lang'),
  groupName: string(name='GroupName', description='groupName'),
}

model AddDomainGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
}

async function addDomainGroupWithOptions(request: AddDomainGroupRequest, runtime: Util.RuntimeOptions): AddDomainGroupResponse {
  Util.validateModel(request);
  return doRequest('AddDomainGroup', 'HTTPS', 'POST', '2015-01-09', 'AK', null, request, runtime);
}

async function addDomainGroup(request: AddDomainGroupRequest): AddDomainGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainGroupWithOptions(request, runtime);
}

model AddDomainRequest = {
  accessKeyId?: string(name='AccessKeyId', description='accessKeyId'),
  lang?: string(name='Lang', description='lang'),
  domainName: string(name='DomainName', description='domainName'),
  groupId?: string(name='GroupId', description='groupId'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model AddDomainResponse = {
  requestId: string(name='RequestId', description='requestId'),
  domainId: string(name='DomainId', description='module.domainId'),
  domainName: string(name='DomainName', description='module.domainName'),
  punyCode: string(name='PunyCode', description='module.punyCode'),
  groupId: string(name='GroupId', description='module.groupId'),
  groupName: string(name='GroupName', description='module.groupName'),
  dnsServers: {
    dnsServer: [ string ](name='DnsServer', description='DnsServer'),
  }(name='DnsServers', description='module.dnsList'),
}

async function addDomainWithOptions(request: AddDomainRequest, runtime: Util.RuntimeOptions): AddDomainResponse {
  Util.validateModel(request);
  return doRequest('AddDomain', 'HTTPS', 'POST', '2015-01-09', 'AK,BearerToken', null, request, runtime);
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
