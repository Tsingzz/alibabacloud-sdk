import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'clickhouse.aliyuncs.com',
    ap-southeast-1 = 'clickhouse.aliyuncs.com',
    cn-beijing = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-finance-pop = 'clickhouse.aliyuncs.com',
    cn-beijing-gov-1 = 'clickhouse.aliyuncs.com',
    cn-beijing-nu16-b01 = 'clickhouse.aliyuncs.com',
    cn-edge-1 = 'clickhouse.aliyuncs.com',
    cn-fujian = 'clickhouse.aliyuncs.com',
    cn-haidian-cm12-c01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou = 'clickhouse.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-finance = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'clickhouse.aliyuncs.com',
    cn-hangzhou-test-306 = 'clickhouse.aliyuncs.com',
    cn-hongkong = 'clickhouse.aliyuncs.com',
    cn-hongkong-finance-pop = 'clickhouse.aliyuncs.com',
    cn-north-2-gov-1 = 'clickhouse.aliyuncs.com',
    cn-qingdao = 'clickhouse.aliyuncs.com',
    cn-qingdao-nebula = 'clickhouse.aliyuncs.com',
    cn-shanghai = 'clickhouse.aliyuncs.com',
    cn-shanghai-et15-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-et2-b01 = 'clickhouse.aliyuncs.com',
    cn-shanghai-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shanghai-inner = 'clickhouse.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen = 'clickhouse.aliyuncs.com',
    cn-shenzhen-finance-1 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-inner = 'clickhouse.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'clickhouse.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'clickhouse.aliyuncs.com',
    cn-wuhan = 'clickhouse.aliyuncs.com',
    cn-yushanfang = 'clickhouse.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'clickhouse.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'clickhouse.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'clickhouse.aliyuncs.com',
    eu-west-1-oxs = 'clickhouse.aliyuncs.com',
    me-east-1 = 'clickhouse.aliyuncs.com',
    rus-west-1-pop = 'clickhouse.aliyuncs.com',
    us-east-1 = 'clickhouse.aliyuncs.com',
    us-west-1 = 'clickhouse.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('clickhouse', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeAllDataSourceRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  schemaName?: string(name='SchemaName', description='schemaName'),
  tableName?: string(name='TableName', description='tableName'),
}

model DescribeAllDataSourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  schemas: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
      }
    ](name='Schema', description='Schema'),
  }(name='Schemas', description='data.schemas'),
  tables: {
    table: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
      }
    ](name='Table', description='Table'),
  }(name='Tables', description='data.tables'),
  columns: {
    column: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
        columnName: string(name='ColumnName', description='columnName'),
        type: string(name='Type', description='type'),
        primaryKey: boolean(name='PrimaryKey', description='primaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn', description='autoIncrementColumn'),
      }
    ](name='Column', description='Column'),
  }(name='Columns', description='data.columns'),
}

async function describeAllDataSourceWithOptions(request: DescribeAllDataSourceRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAllDataSource', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAllDataSource(request: DescribeAllDataSourceRequest): DescribeAllDataSourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourceWithOptions(request, runtime);
}

model DescribeColumnsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  schemaName: string(name='SchemaName', description='schemaName'),
  tableName: string(name='TableName', description='tableName'),
}

model DescribeColumnsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    column: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
        columnName: string(name='ColumnName', description='columnName'),
        type: string(name='Type', description='type'),
        primaryKey: boolean(name='PrimaryKey', description='primaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn', description='autoIncrementColumn'),
      }
    ](name='Column', description='Column'),
  }(name='Items', description='data.columns'),
}

async function describeColumnsWithOptions(request: DescribeColumnsRequest, runtime: Util.RuntimeOptions): DescribeColumnsResponse {
  Util.validateModel(request);
  return doRequest('DescribeColumns', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeColumns(request: DescribeColumnsRequest): DescribeColumnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeColumnsWithOptions(request, runtime);
}

model DescribeTablesRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  schemaName: string(name='SchemaName', description='schemaName'),
  tableName?: string(name='TableName', description='tableName'),
}

model DescribeTablesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    table: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
      }
    ](name='Table', description='Table'),
  }(name='Items', description='data.tables'),
}

async function describeTablesWithOptions(request: DescribeTablesRequest, runtime: Util.RuntimeOptions): DescribeTablesResponse {
  Util.validateModel(request);
  return doRequest('DescribeTables', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeTables(request: DescribeTablesRequest): DescribeTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTablesWithOptions(request, runtime);
}

model DescribeSchemasRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  schemaName?: string(name='SchemaName', description='schemaName'),
  tableName?: string(name='TableName', description='tableName'),
}

model DescribeSchemasResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
      }
    ](name='Schema', description='Schema'),
  }(name='Items', description='data.schemas'),
}

async function describeSchemasWithOptions(request: DescribeSchemasRequest, runtime: Util.RuntimeOptions): DescribeSchemasResponse {
  Util.validateModel(request);
  return doRequest('DescribeSchemas', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeSchemas(request: DescribeSchemasRequest): DescribeSchemasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSchemasWithOptions(request, runtime);
}

model DescribeAllDataSourcesRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  schemaName?: string(name='SchemaName', description='schemaName'),
  tableName?: string(name='TableName', description='tableName'),
}

model DescribeAllDataSourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  schemas: {
    schema: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
      }
    ](name='Schema', description='Schema'),
  }(name='Schemas', description='data.schemas'),
  tables: {
    table: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
      }
    ](name='Table', description='Table'),
  }(name='Tables', description='data.tables'),
  columns: {
    column: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        schemaName: string(name='SchemaName', description='schemaName'),
        tableName: string(name='TableName', description='tableName'),
        columnName: string(name='ColumnName', description='columnName'),
        type: string(name='Type', description='type'),
        primaryKey: boolean(name='PrimaryKey', description='primaryKey'),
        autoIncrementColumn: boolean(name='AutoIncrementColumn', description='autoIncrementColumn'),
      }
    ](name='Column', description='Column'),
  }(name='Columns', description='data.columns'),
}

async function describeAllDataSourcesWithOptions(request: DescribeAllDataSourcesRequest, runtime: Util.RuntimeOptions): DescribeAllDataSourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAllDataSources', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAllDataSources(request: DescribeAllDataSourcesRequest): DescribeAllDataSourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAllDataSourcesWithOptions(request, runtime);
}

model DescribeLoghubDetailRequest = {
  regionId: string(name='RegionId', description='regionId'),
  projectName?: string(name='ProjectName', description='projectName'),
  exportName?: string(name='ExportName', description='exportName'),
}

model DescribeLoghubDetailResponse = {
  requestId: string(name='RequestId', description='requestId'),
  loghubInfo: {
    projectName: string(name='ProjectName', description='projectName'),
    logStoreName: string(name='LogStoreName', description='logStoreName'),
    deliverName: string(name='DeliverName', description='deliverName'),
    deliverTime: string(name='DeliverTime', description='deliverTime'),
    domainUrl: string(name='DomainUrl', description='domainUrl'),
    description: string(name='Description', description='description'),
    schemaName: string(name='SchemaName', description='schemaName'),
    tableName: string(name='TableName', description='tableName'),
    regionId: string(name='RegionId', description='regionId'),
    zoneId: string(name='ZoneId', description='zoneId'),
    userName: string(name='UserName', description='userName'),
    password: string(name='Password', description='password'),
    filterDirtyData: boolean(name='FilterDirtyData', description='filterDirty'),
    accessKey: string(name='AccessKey', description='accessKey'),
    accessSecret: string(name='AccessSecret', description='accessSecret'),
    DBType: string(name='DBType', description='dbType'),
    DBClusterId: string(name='DBClusterId', description='dbClusterId'),
    logHubStores: {
      logHubStore: [
        {
          logKey: string(name='LogKey', description='logKey'),
          fieldKey: string(name='FieldKey', description='fieldKey'),
          type: string(name='Type', description='type'),
        }
      ](name='LogHubStore', description='LogHubStore'),
    }(name='LogHubStores', description='logHubStores'),
  }(name='LoghubInfo', description='data.loghubInfo'),
}

async function describeLoghubDetailWithOptions(request: DescribeLoghubDetailRequest, runtime: Util.RuntimeOptions): DescribeLoghubDetailResponse {
  Util.validateModel(request);
  return doRequest('DescribeLoghubDetail', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLoghubDetail(request: DescribeLoghubDetailRequest): DescribeLoghubDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLoghubDetailWithOptions(request, runtime);
}

model OperateLogHubRequest = {
  create: boolean(name='Create', description='create'),
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  projectName: string(name='ProjectName', description='projectName'),
  logStoreName: string(name='LogStoreName', description='logStoreName'),
  deliverName: string(name='DeliverName', description='deliverName'),
  deliverTime: string(name='DeliverTime', description='deliverTime'),
  description: string(name='Description', description='description'),
  domainUrl: string(name='DomainUrl', description='domainUrl'),
  schemaName: string(name='SchemaName', description='schemaName'),
  tableName: string(name='TableName', description='tableName'),
  userName: string(name='UserName', description='userName'),
  password: string(name='Password', description='password'),
  filterDirty?: boolean(name='FilterDirty', description='filterDirty'),
  logHubStores: [
    {
      logKey: string(name='LogKey', description='logKey'),
      fieldKey: string(name='FieldKey', description='fieldKey'),
      type: string(name='Type', description='type'),
    }
  ](name='LogHubStores', description='logHubStores'),
  accessKey?: string(name='AccessKey', description='accessKey'),
  accessSecret?: string(name='AccessSecret', description='accessSecret'),
}

model OperateLogHubResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function operateLogHubWithOptions(request: OperateLogHubRequest, runtime: Util.RuntimeOptions): OperateLogHubResponse {
  Util.validateModel(request);
  return doRequest('OperateLogHub', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function operateLogHub(request: OperateLogHubRequest): OperateLogHubResponse {
  var runtime = new Util.RuntimeOptions{};
  return operateLogHubWithOptions(request, runtime);
}

model DescribeLogStoreKeysRequest = {
  regionId: string(name='RegionId', description='regionId'),
  projectName: string(name='ProjectName', description='projectName'),
  logStoreName: string(name='LogStoreName', description='logStoreName'),
}

model DescribeLogStoreKeysResponse = {
  requestId: string(name='RequestId', description='requestId'),
  logStoreKeys: {
    logStoreKey: [ string ](name='LogStoreKey', description='LogStoreKey'),
  }(name='LogStoreKeys', description='data.logStoreKeys'),
}

async function describeLogStoreKeysWithOptions(request: DescribeLogStoreKeysRequest, runtime: Util.RuntimeOptions): DescribeLogStoreKeysResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogStoreKeys', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeLogStoreKeys(request: DescribeLogStoreKeysRequest): DescribeLogStoreKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreKeysWithOptions(request, runtime);
}

model CreateDBInstanceRequest = {
  regionId: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  DBClusterVersion: string(name='DBClusterVersion', description='dbClusterVersion'),
  DBClusterCategory: string(name='DBClusterCategory', description='dbClusterCategory'),
  DBClusterClass: string(name='DBClusterClass', description='dbClusterClass'),
  DBNodeGroupCount: string(name='DBNodeGroupCount', description='dbNodeGroupCount'),
  DBNodeStorage: string(name='DBNodeStorage', description='dbNodeStorage'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', description='dbClusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription', description='dbClusterDescription'),
  payType: string(name='PayType', description='payType'),
  period?: string(name='Period', description='period'),
  usedTime?: string(name='UsedTime', description='usedTime'),
  VPCId?: string(name='VPCId', description='vpcId'),
  vSwitchId?: string(name='VSwitchId', description='vswitchId'),
  clientToken?: string(name='ClientToken', description='token'),
  dbNodeStorageType: string(name='DbNodeStorageType', description='dbNodeStorageType'),
}

model CreateDBInstanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function createDBInstanceWithOptions(request: CreateDBInstanceRequest, runtime: Util.RuntimeOptions): CreateDBInstanceResponse {
  Util.validateModel(request);
  return doRequest('CreateDBInstance', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createDBInstance(request: CreateDBInstanceRequest): CreateDBInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBInstanceWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest = {
  regionId: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
  chargeType?: string(name='ChargeType', description='chargeType'),
  acceptLanguage?: string(name='AcceptLanguage', description='acceptLanguage'),
}

model DescribeAvailableResourceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  availableZoneList: {
    availableZone: [
      {
        zoneId: string(name='ZoneId', description='zoneId'),
        supportedSerialList: {
          supportedSerial: [
            {
              serial: string(name='Serial', description='serial'),
              supportedInstanceClassList: {
                supportedInstanceClass: [
                  {
                    instanceClass: string(name='InstanceClass', description='instanceClass'),
                    tips: string(name='Tips', description='tips'),
                    supportedNodeCountList: {
                      supportedNodeCount: [
                        {
                          nodeCount: {
                            minCount: string(name='MinCount', description='min'),
                            maxCount: string(name='MaxCount', description='max'),
                            step: string(name='Step', description='step'),
                          }(name='NodeCount', description='nodeCount'),
                          storageSize: {
                            storageSize: [ string ](name='StorageSize', description='StorageSize'),
                          }(name='StorageSize', description='storageSize'),
                        }
                      ](name='SupportedNodeCount', description='SupportedNodeCount'),
                    }(name='SupportedNodeCountList', description='supportedNodeCountList'),
                    supportedExecutorList: {
                      supportedExecutor: [
                        {
                          nodeCount: {
                            minCount: string(name='MinCount', description='min'),
                            maxCount: string(name='MaxCount', description='max'),
                            step: string(name='Step', description='step'),
                          }(name='NodeCount', description='nodeCount'),
                        }
                      ](name='SupportedExecutor', description='SupportedExecutor'),
                    }(name='SupportedExecutorList', description='supportedExecutorList'),
                  }
                ](name='SupportedInstanceClass', description='SupportedInstanceClass'),
              }(name='SupportedInstanceClassList', description='supportedInstanceClassList'),
            }
          ](name='SupportedSerial', description='SupportedSerial'),
        }(name='SupportedSerialList', description='supportedSerialList'),
      }
    ](name='AvailableZone', description='AvailableZone'),
  }(name='AvailableZoneList', description='data.availableZoneList'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  return doRequest('DescribeAvailableResource', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  key?: string(name='Key', description='key'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeDBClusterPerformanceResponse = {
  DBClusterId: string(name='DBClusterId', description='data.dBClusterId'),
  endTime: string(name='EndTime', description='data.endTime'),
  requestId: string(name='RequestId', description='requestId'),
  startTime: string(name='StartTime', description='data.startTime'),
  performances: [
    {
      key: string(name='Key', description='key'),
      unit: string(name='Unit', description='unit'),
      name: string(name='Name', description='name'),
      series: [
        {
          name: string(name='Name', description='name'),
        }
      ](name='Series', description='series'),
    }
  ](name='Performances', description='data.performances'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterPerformance', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model AllocateClusterPublicConnectionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
}

model AllocateClusterPublicConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function allocateClusterPublicConnectionWithOptions(request: AllocateClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): AllocateClusterPublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('AllocateClusterPublicConnection', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function allocateClusterPublicConnection(request: AllocateClusterPublicConnectionRequest): AllocateClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateClusterPublicConnectionWithOptions(request, runtime);
}

model ReleaseClusterPublicConnectionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model ReleaseClusterPublicConnectionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function releaseClusterPublicConnectionWithOptions(request: ReleaseClusterPublicConnectionRequest, runtime: Util.RuntimeOptions): ReleaseClusterPublicConnectionResponse {
  Util.validateModel(request);
  return doRequest('ReleaseClusterPublicConnection', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function releaseClusterPublicConnection(request: ReleaseClusterPublicConnectionRequest): ReleaseClusterPublicConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseClusterPublicConnectionWithOptions(request, runtime);
}

model DeleteAccountRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
}

model DeleteAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccount', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model CreateAccountRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
  accountDescription?: string(name='AccountDescription', description='accountDescription'),
}

model CreateAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAccount', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model DescribeAccountsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName?: string(name='AccountName', description='accountName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeAccountsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalCount: integer(name='TotalCount', description='data.totalRecordCount'),
  pageSize: integer(name='PageSize', description='data.pageRecordCount'),
  accounts: {
    account: [
      {
        accountName: string(name='AccountName', description='accountName'),
        accountStatus: string(name='AccountStatus', description='accountStatus'),
        accountDescription: string(name='AccountDescription', description='accountDescription'),
        accountType: string(name='AccountType', description='accountType'),
      }
    ](name='Account', description='Account'),
  }(name='Accounts', description='data.accounts'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccounts', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhiteListRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  securityIps: string(name='SecurityIps', description='securityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', description='groupName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', description='groupTag'),
  modifyMode?: string(name='ModifyMode', description='modifyMode'),
}

model ModifyDBClusterAccessWhiteListResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterAccessWhiteListWithOptions(request: ModifyDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterAccessWhiteList', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterAccessWhiteList(request: ModifyDBClusterAccessWhiteListRequest): ModifyDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhiteListWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhiteListRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterAccessWhiteListResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterAccessWhiteList: {
    IPArray: [
      {
        DBClusterIPArrayName: string(name='DBClusterIPArrayName', description='groupName'),
        securityIPList: string(name='SecurityIPList', description='securityIPList'),
        DBClusterIPArrayAttribute: string(name='DBClusterIPArrayAttribute', description='groupTag'),
      }
    ](name='IPArray', description='IPArray'),
  }(name='DBClusterAccessWhiteList', description='data.groupItems'),
}

async function describeDBClusterAccessWhiteListWithOptions(request: DescribeDBClusterAccessWhiteListRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhiteListResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAccessWhiteList', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterAccessWhiteList(request: DescribeDBClusterAccessWhiteListRequest): DescribeDBClusterAccessWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhiteListWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  maintainTime: string(name='MaintainTime', description='maintainTime'),
}

model ModifyDBClusterMaintainTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterMaintainTime', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
}

model ModifyDBClusterDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterDescription', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model DeleteDBClusterRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DeleteDBClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBCluster', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountDescription: string(name='AccountDescription', description='accountDescription'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model ResetAccountPasswordRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
}

model ResetAccountPasswordResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAccountPasswordWithOptions(request: ResetAccountPasswordRequest, runtime: Util.RuntimeOptions): ResetAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ResetAccountPassword', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function resetAccountPassword(request: ResetAccountPasswordRequest): ResetAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountPasswordWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBCluster: {
    regionId: string(name='RegionId', description='regionId'),
    zoneId: string(name='ZoneId', description='zoneId'),
    DBClusterId: string(name='DBClusterId', description='dbClusterId'),
    DBClusterType: string(name='DBClusterType', description='dbClusterType'),
    DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
    category: string(name='Category', description='category'),
    lockMode: string(name='LockMode', description='lockMode'),
    lockReason: string(name='LockReason', description='lockReason'),
    payType: string(name='PayType', description='payType'),
    DBClusterStatus: string(name='DBClusterStatus', description='dbClusterStatus'),
    DBNodeStorage: long(name='DBNodeStorage', description='dbNodeStorage'),
    DBNodeClass: string(name='DBNodeClass', description='dbNodeClass'),
    DBNodeCount: long(name='DBNodeCount', description='dbNodeCount'),
    createTime: string(name='CreateTime', description='createTime'),
    engine: string(name='Engine', description='engine'),
    engineVersion: string(name='EngineVersion', description='engineVersion'),
    expireTime: string(name='ExpireTime', description='expireTime'),
    isExpired: string(name='IsExpired', description='expired'),
    maintainTime: string(name='MaintainTime', description='maintainTime'),
    vpcId: string(name='VpcId', description='vpcId'),
    vSwitchId: string(name='VSwitchId', description='vswitchId'),
    vpcCloudInstanceId: string(name='VpcCloudInstanceId', description='vpcCloudInstanceId'),
    commodityCode: string(name='CommodityCode', description='commodityCode'),
    DBClusterNetworkType: string(name='DBClusterNetworkType', description='clusterNetworkType'),
    storageType: string(name='StorageType', description='storageType'),
    publicConnectionString: string(name='PublicConnectionString', description='publicConnectionString'),
    publicPort: string(name='PublicPort', description='publicPort'),
    connectionString: string(name='ConnectionString', description='connectionString'),
    port: integer(name='Port', description='port'),
    aliUid: string(name='AliUid', description='aliUid'),
    bid: string(name='Bid', description='bid'),
    tags: {
      tag: [
        {
          key: string(name='Key', description='key'),
          value: string(name='Value', description='value'),
        }
      ](name='Tag', description='Tag'),
    }(name='Tags', description='tags'),
  }(name='DBCluster', description='data'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAttribute', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

model DescribeDBClustersRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterIds?: string(name='DBClusterIds', description='dbClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription', description='dbClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus', description='dbClusterStatus'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DescribeDBClustersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalCount: integer(name='TotalCount', description='data.totalRecordCount'),
  pageSize: integer(name='PageSize', description='data.pageRecordCount'),
  DBClusters: {
    DBCluster: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        category: string(name='Category', description='category'),
        DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
        payType: string(name='PayType', description='payType'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        expireTime: string(name='ExpireTime', description='expireTime'),
        isExpired: string(name='IsExpired', description='expired'),
        DBClusterStatus: string(name='DBClusterStatus', description='dbClusterStatus'),
        lockMode: string(name='LockMode', description='lockMode'),
        lockReason: string(name='LockReason', description='lockReason'),
        createTime: string(name='CreateTime', description='createTime'),
        DBNodeStorage: long(name='DBNodeStorage', description='dbNodeStorage'),
        DBNodeClass: string(name='DBNodeClass', description='dbNodeClass'),
        DBNodeCount: long(name='DBNodeCount', description='dbNodeCount'),
        storageType: string(name='StorageType', description='storageType'),
        connectionString: string(name='ConnectionString', description='connectionString'),
        port: integer(name='Port', description='port'),
        aliUid: string(name='AliUid', description='aliUid'),
        bid: string(name='Bid', description='bid'),
        DBClusterNetworkType: string(name='DBClusterNetworkType', description='clusterNetworkType'),
        vpcId: string(name='VpcId', description='vpcId'),
        vSwitchId: string(name='VSwitchId', description='vswitchId'),
        vpcCloudInstanceId: string(name='VpcCloudInstanceId', description='vpcCloudInstanceId'),
        commodityCode: string(name='CommodityCode', description='commodityCode'),
        tags: {
          tag: [
            {
              key: string(name='Key', description='key'),
              value: string(name='Value', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='DBCluster', description='DBCluster'),
  }(name='DBClusters', description='data.items'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusters', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='regionId'),
        zones: {
          zone: [
            {
              zoneId: string(name='ZoneId', description='zoneId'),
              vpcEnabled: boolean(name='VpcEnabled', description='vpcEnabled'),
            }
          ](name='Zone', description='Zone'),
        }(name='Zones', description='zones'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeDBClusterNetInfoItemsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterNetInfoItemsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  clusterNetworkType: string(name='ClusterNetworkType', description='data.instanceNetworkType'),
  netInfoItems: {
    netInfoItem: [
      {
        connectionString: string(name='ConnectionString', description='connectionString'),
        IPAddress: string(name='IPAddress', description='ipAddress'),
        netType: string(name='NetType', description='ipType'),
        httpPort: string(name='HttpPort', description='httpPort'),
        vpcId: string(name='VpcId', description='vpcId'),
        vSwitchId: string(name='VSwitchId', description='vswitchId'),
        jdbcPort: string(name='JdbcPort', description='jdbcPort'),
      }
    ](name='NetInfoItem', description='NetInfoItem'),
  }(name='NetInfoItems', description='data.netInfoItems'),
}

async function describeDBClusterNetInfoItemsWithOptions(request: DescribeDBClusterNetInfoItemsRequest, runtime: Util.RuntimeOptions): DescribeDBClusterNetInfoItemsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterNetInfoItems', 'HTTPS', 'POST', '2019-11-11', 'AK', null, request, runtime);
}

async function describeDBClusterNetInfoItems(request: DescribeDBClusterNetInfoItemsRequest): DescribeDBClusterNetInfoItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterNetInfoItemsWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
