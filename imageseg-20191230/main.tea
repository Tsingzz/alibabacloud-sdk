import OSS;
import OpenPlatform;
import RPCUtil;
import RPC;
import OSSUtil;
import Util;
import FileForm;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageseg', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model SegmentLogoRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentLogoResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentLogo(request: SegmentLogoRequest, runtime: Util.RuntimeOptions): SegmentLogoResponse {
  Util.validateModel(request);
  return doRequest('SegmentLogo', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentLogoAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentLogoAdvance(request: SegmentLogoAdvanceRequest, runtime: Util.RuntimeOptions): SegmentLogoResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentLogoreq = new SegmentLogoRequest{};
  RPCUtil.convert(request, segmentLogoreq);
  segmentLogoreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentLogoResp = segmentLogo(segmentLogoreq, runtime);
  return segmentLogoResp;
}

model SegmentSceneRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentSceneResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentScene(request: SegmentSceneRequest, runtime: Util.RuntimeOptions): SegmentSceneResponse {
  Util.validateModel(request);
  return doRequest('SegmentScene', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentSceneAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentSceneAdvance(request: SegmentSceneAdvanceRequest, runtime: Util.RuntimeOptions): SegmentSceneResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentScenereq = new SegmentSceneRequest{};
  RPCUtil.convert(request, segmentScenereq);
  segmentScenereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentSceneResp = segmentScene(segmentScenereq, runtime);
  return segmentSceneResp;
}

model SegmentFoodRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentFoodResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentFood(request: SegmentFoodRequest, runtime: Util.RuntimeOptions): SegmentFoodResponse {
  Util.validateModel(request);
  return doRequest('SegmentFood', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentFoodAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentFoodAdvance(request: SegmentFoodAdvanceRequest, runtime: Util.RuntimeOptions): SegmentFoodResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentFoodreq = new SegmentFoodRequest{};
  RPCUtil.convert(request, segmentFoodreq);
  segmentFoodreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentFoodResp = segmentFood(segmentFoodreq, runtime);
  return segmentFoodResp;
}

model SegmentClothRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentClothResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentCloth(request: SegmentClothRequest, runtime: Util.RuntimeOptions): SegmentClothResponse {
  Util.validateModel(request);
  return doRequest('SegmentCloth', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentClothAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentClothAdvance(request: SegmentClothAdvanceRequest, runtime: Util.RuntimeOptions): SegmentClothResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentClothreq = new SegmentClothRequest{};
  RPCUtil.convert(request, segmentClothreq);
  segmentClothreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentClothResp = segmentCloth(segmentClothreq, runtime);
  return segmentClothResp;
}

model SegmentAnimalRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentAnimalResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentAnimal(request: SegmentAnimalRequest, runtime: Util.RuntimeOptions): SegmentAnimalResponse {
  Util.validateModel(request);
  return doRequest('SegmentAnimal', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentAnimalAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentAnimalAdvance(request: SegmentAnimalAdvanceRequest, runtime: Util.RuntimeOptions): SegmentAnimalResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentAnimalreq = new SegmentAnimalRequest{};
  RPCUtil.convert(request, segmentAnimalreq);
  segmentAnimalreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentAnimalResp = segmentAnimal(segmentAnimalreq, runtime);
  return segmentAnimalResp;
}

model SegmentHDBodyRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentHDBodyResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentHDBody(request: SegmentHDBodyRequest, runtime: Util.RuntimeOptions): SegmentHDBodyResponse {
  Util.validateModel(request);
  return doRequest('SegmentHDBody', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentHDBodyAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentHDBodyAdvance(request: SegmentHDBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHDBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHDBodyreq = new SegmentHDBodyRequest{};
  RPCUtil.convert(request, segmentHDBodyreq);
  segmentHDBodyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHDBodyResp = segmentHDBody(segmentHDBodyreq, runtime);
  return segmentHDBodyResp;
}

model SegmentSkyRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentSkyResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentSky(request: SegmentSkyRequest, runtime: Util.RuntimeOptions): SegmentSkyResponse {
  Util.validateModel(request);
  return doRequest('SegmentSky', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentSkyAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentSkyAdvance(request: SegmentSkyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentSkyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentSkyreq = new SegmentSkyRequest{};
  RPCUtil.convert(request, segmentSkyreq);
  segmentSkyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentSkyResp = segmentSky(segmentSkyreq, runtime);
  return segmentSkyResp;
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId'),
  data: {
    errorCode: string(name='ErrorCode'),
    errorMessage: string(name='ErrorMessage'),
    jobId: string(name='JobId'),
    result: string(name='Result'),
    status: string(name='Status'),
  }(name='Data'),
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentFurnitureRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentFurnitureResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentFurniture(request: SegmentFurnitureRequest, runtime: Util.RuntimeOptions): SegmentFurnitureResponse {
  Util.validateModel(request);
  return doRequest('SegmentFurniture', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentFurnitureAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentFurnitureAdvance(request: SegmentFurnitureAdvanceRequest, runtime: Util.RuntimeOptions): SegmentFurnitureResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentFurniturereq = new SegmentFurnitureRequest{};
  RPCUtil.convert(request, segmentFurniturereq);
  segmentFurniturereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentFurnitureResp = segmentFurniture(segmentFurniturereq, runtime);
  return segmentFurnitureResp;
}

model RefineMaskRequest = {
  maskImageURL: string(name='MaskImageURL'),
  imageURL: string(name='ImageURL'),
}

model RefineMaskResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function refineMask(request: RefineMaskRequest, runtime: Util.RuntimeOptions): RefineMaskResponse {
  Util.validateModel(request);
  return doRequest('RefineMask', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model RefineMaskAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  maskImageURL: string(name='MaskImageURL'),
}

async function refineMaskAdvance(request: RefineMaskAdvanceRequest, runtime: Util.RuntimeOptions): RefineMaskResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var refineMaskreq = new RefineMaskRequest{};
  RPCUtil.convert(request, refineMaskreq);
  refineMaskreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var refineMaskResp = refineMask(refineMaskreq, runtime);
  return refineMaskResp;
}

model ParseFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model ParseFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    originImageURL: string(name='OriginImageURL'),
    elements: [
      {
        name: string(name='Name'),
        imageURL: string(name='ImageURL'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function parseFace(request: ParseFaceRequest, runtime: Util.RuntimeOptions): ParseFaceResponse {
  Util.validateModel(request);
  return doRequest('ParseFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model ParseFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function parseFaceAdvance(request: ParseFaceAdvanceRequest, runtime: Util.RuntimeOptions): ParseFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var parseFacereq = new ParseFaceRequest{};
  RPCUtil.convert(request, parseFacereq);
  parseFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var parseFaceResp = parseFace(parseFacereq, runtime);
  return parseFaceResp;
}

model SegmentVehicleRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentVehicleResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        originImageURL: string(name='OriginImageURL'),
        imageURL: string(name='ImageURL'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentVehicle(request: SegmentVehicleRequest, runtime: Util.RuntimeOptions): SegmentVehicleResponse {
  Util.validateModel(request);
  return doRequest('SegmentVehicle', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentVehicleAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentVehicleAdvance(request: SegmentVehicleAdvanceRequest, runtime: Util.RuntimeOptions): SegmentVehicleResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentVehiclereq = new SegmentVehicleRequest{};
  RPCUtil.convert(request, segmentVehiclereq);
  segmentVehiclereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentVehicleResp = segmentVehicle(segmentVehiclereq, runtime);
  return segmentVehicleResp;
}

model SegmentHairRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentHairResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
        x: integer(name='X'),
        y: integer(name='Y'),
        width: integer(name='Width'),
        height: integer(name='Height'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentHair(request: SegmentHairRequest, runtime: Util.RuntimeOptions): SegmentHairResponse {
  Util.validateModel(request);
  return doRequest('SegmentHair', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentHairAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentHairAdvance(request: SegmentHairAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHairResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHairreq = new SegmentHairRequest{};
  RPCUtil.convert(request, segmentHairreq);
  segmentHairreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHairResp = segmentHair(segmentHairreq, runtime);
  return segmentHairResp;
}

model SegmentFaceRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentFaceResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
        x: integer(name='X'),
        y: integer(name='Y'),
        width: integer(name='Width'),
        height: integer(name='Height'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentFace(request: SegmentFaceRequest, runtime: Util.RuntimeOptions): SegmentFaceResponse {
  Util.validateModel(request);
  return doRequest('SegmentFace', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentFaceAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentFaceAdvance(request: SegmentFaceAdvanceRequest, runtime: Util.RuntimeOptions): SegmentFaceResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentFacereq = new SegmentFaceRequest{};
  RPCUtil.convert(request, segmentFacereq);
  segmentFacereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentFaceResp = segmentFace(segmentFacereq, runtime);
  return segmentFaceResp;
}

model SegmentHeadRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentHeadResponse = {
  requestId: string(name='RequestId'),
  data: {
    elements: [
      {
        imageURL: string(name='ImageURL'),
        x: integer(name='X'),
        y: integer(name='Y'),
        width: integer(name='Width'),
        height: integer(name='Height'),
      }
    ](name='Elements'),
  }(name='Data'),
}

async function segmentHead(request: SegmentHeadRequest, runtime: Util.RuntimeOptions): SegmentHeadResponse {
  Util.validateModel(request);
  return doRequest('SegmentHead', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentHeadAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentHeadAdvance(request: SegmentHeadAdvanceRequest, runtime: Util.RuntimeOptions): SegmentHeadResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentHeadreq = new SegmentHeadRequest{};
  RPCUtil.convert(request, segmentHeadreq);
  segmentHeadreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentHeadResp = segmentHead(segmentHeadreq, runtime);
  return segmentHeadResp;
}

model SegmentCommodityRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentCommodityResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentCommodity(request: SegmentCommodityRequest, runtime: Util.RuntimeOptions): SegmentCommodityResponse {
  Util.validateModel(request);
  return doRequest('SegmentCommodity', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentCommodityAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentCommodityAdvance(request: SegmentCommodityAdvanceRequest, runtime: Util.RuntimeOptions): SegmentCommodityResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentCommodityreq = new SegmentCommodityRequest{};
  RPCUtil.convert(request, segmentCommodityreq);
  segmentCommodityreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentCommodityResp = segmentCommodity(segmentCommodityreq, runtime);
  return segmentCommodityResp;
}

model SegmentBodyRequest = {
  imageURL: string(name='ImageURL'),
  async?: boolean(name='Async'),
}

model SegmentBodyResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentBody(request: SegmentBodyRequest, runtime: Util.RuntimeOptions): SegmentBodyResponse {
  Util.validateModel(request);
  return doRequest('SegmentBody', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentBodyAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
  async?: boolean(name='Async'),
}

async function segmentBodyAdvance(request: SegmentBodyAdvanceRequest, runtime: Util.RuntimeOptions): SegmentBodyResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentBodyreq = new SegmentBodyRequest{};
  RPCUtil.convert(request, segmentBodyreq);
  segmentBodyreq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentBodyResp = segmentBody(segmentBodyreq, runtime);
  return segmentBodyResp;
}

model SegmentCommonImageRequest = {
  imageURL: string(name='ImageURL'),
}

model SegmentCommonImageResponse = {
  requestId: string(name='RequestId'),
  data: {
    imageURL: string(name='ImageURL'),
  }(name='Data'),
}

async function segmentCommonImage(request: SegmentCommonImageRequest, runtime: Util.RuntimeOptions): SegmentCommonImageResponse {
  Util.validateModel(request);
  return doRequest('SegmentCommonImage', 'HTTPS', 'POST' , '2019-12-30', 'AK', null, request, runtime);
}

model SegmentCommonImageAdvanceRequest = {
  imageURLObject: readable(name='ImageURLObject'),
}

async function segmentCommonImageAdvance(request: SegmentCommonImageAdvanceRequest, runtime: Util.RuntimeOptions): SegmentCommonImageResponse {
  // Step 0: init client
  var accessKeyId = @credential.getAccessKeyId();
  var accessKeySecret = @credential.getAccessKeySecret();
  var authConfig = new RPC.Config{
    accessKeyId = accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = 'openplatform.aliyuncs.com',
    protocol = @protocol,
    regionId = @regionId,
  };
  var authClient = new OpenPlatform(authConfig);

  var authRequest = new OpenPlatform.AuthorizeFileUploadRequest{
    product = 'imageseg',
    regionId = @regionId,
  };
  var authResponse = authClient.authorizeFileUploadWithOptions(authRequest, runtime);
  // Step 1: request OSS api to upload file
  var ossConfig = new OSS.Config{
    accessKeyId = authResponse.accessKeyId,
    accessKeySecret = accessKeySecret,
    type = 'access_key',
    endpoint = RPCUtil.getEndpoint(authResponse.endpoint, authResponse.useAccelerate, @endpointType),
    protocol = @protocol,
    regionId = @regionId,
  };
  var ossClient = new OSS(ossConfig);

  var fileObj = new FileForm.FileField{
    filename = authResponse.objectKey,
    content = request.imageURLObject,
    contentType = '',
  };
  var ossHeader = new OSS.PostObjectRequest.header{
    accessKeyId = authResponse.accessKeyId,
    policy = authResponse.encodedPolicy,
    signature = authResponse.signature,
    key = authResponse.objectKey,
    file = fileObj,
    successActionStatus = '201',
  };
  var uploadRequest = new OSS.PostObjectRequest{
    bucketName = authResponse.bucket,
    header = ossHeader,
  };
  var ossRuntime = new OSSUtil.RuntimeOptions{};
  RPCUtil.convert(runtime, ossRuntime);
  ossClient.postObject(uploadRequest, ossRuntime);
  // Step 2: request final api
  var segmentCommonImagereq = new SegmentCommonImageRequest{};
  RPCUtil.convert(request, segmentCommonImagereq);
  segmentCommonImagereq.imageURL = `http://${authResponse.bucket}.${authResponse.endpoint}/${authResponse.objectKey}`;
  var segmentCommonImageResp = segmentCommonImage(segmentCommonImagereq, runtime);
  return segmentCommonImageResp;
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
