import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cloudwf.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudwifi-pop', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model GetNetDeviceInfoWithSizeRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  cursor?: long(name='Cursor', description='cursor'),
  role?: string(name='Role', description='role'),
  serviceTag?: string(name='ServiceTag', description='service_tag'),
  idc?: string(name='Idc', description='idc'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  mgnIp?: string(name='MgnIp', description='mgn_ip'),
  manufacturer?: string(name='Manufacturer', description='manufacturer'),
  logicNetPod?: string(name='LogicNetPod', description='logic_net_pod'),
  password?: string(name='Password', description='password'),
  netPod?: string(name='NetPod', description='net_pod'),
  requestId: string(name='RequestId', description='requestId'),
  model?: string(name='Model', description='model'),
  id?: long(name='Id', description='id'),
  hostName?: string(name='HostName', description='host_name'),
  username?: string(name='Username', description='username'),
}

model GetNetDeviceInfoWithSizeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: {
    count: long(name='Count', description='count'),
    data: [ map[string]any ](name='Data', description='data'),
  }(name='Data', description='data'),
}

async function getNetDeviceInfoWithSizeWithOptions(request: GetNetDeviceInfoWithSizeRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoWithSizeResponse {
  Util.validateModel(request);
  return doRequest('GetNetDeviceInfoWithSize', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getNetDeviceInfoWithSize(request: GetNetDeviceInfoWithSizeRequest): GetNetDeviceInfoWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithSizeWithOptions(request, runtime);
}

model ListJobOrdersWithSizeRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  cursor: long(name='Cursor', description='cursor'),
  handler?: string(name='Handler', description='handler'),
  clientSystem?: string(name='ClientSystem', description='client_sys'),
  pageSize: integer(name='PageSize', description='pageSize'),
  title?: string(name='Title', description='title'),
  orderStatus?: string(name='OrderStatus', description='order_status'),
  clientUniqueId?: string(name='ClientUniqueId', description='client_unique_id'),
  requestId: string(name='RequestId', description='requestId'),
  startTime?: string(name='StartTime', description='startTime'),
  id?: string(name='Id', description='id'),
  endTime?: string(name='EndTime', description='endTime'),
  changingType?: string(name='ChangingType', description='changing_type'),
  status?: string(name='Status', description='status'),
}

model ListJobOrdersWithSizeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: {
    count: long(name='Count', description='count'),
    data: [ map[string]any ](name='Data', description='data'),
  }(name='Data', description='data'),
}

async function listJobOrdersWithSizeWithOptions(request: ListJobOrdersWithSizeRequest, runtime: Util.RuntimeOptions): ListJobOrdersWithSizeResponse {
  Util.validateModel(request);
  return doRequest('ListJobOrdersWithSize', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function listJobOrdersWithSize(request: ListJobOrdersWithSizeRequest): ListJobOrdersWithSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithSizeWithOptions(request, runtime);
}

model NewJobOrderRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  callbackUrl?: string(name='CallbackUrl', description='callback_url'),
  clientSystem: string(name='ClientSystem', description='client_sys'),
  creator?: string(name='Creator', description='creator'),
  clientUniqueId: string(name='ClientUniqueId', description='client_unique_id'),
  requestId: string(name='RequestId', description='requestId'),
  referUrl?: string(name='ReferUrl', description='refer_url'),
  changeType: string(name='ChangeType', description='change_type'),
  title: string(name='Title', description='title'),
  params: map[string]any(name='Params', description='params'),
}

model NewJobOrderResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: {
    orderId: long(name='OrderId', description='order_id'),
  }(name='Data', description='data'),
}

async function newJobOrderWithOptions(request: NewJobOrderRequest, runtime: Util.RuntimeOptions): NewJobOrderResponse {
  Util.validateModel(request);
  return doRequest('NewJobOrder', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function newJobOrder(request: NewJobOrderRequest): NewJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return newJobOrderWithOptions(request, runtime);
}

model NewNetDeviceInfoRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  devices: [
    {
      password?: string(name='Password', description='password'),
      role?: string(name='Role', description='role'),
      serviceTag: string(name='ServiceTag', description='service_tag'),
      netPod?: string(name='NetPod', description='net_pod'),
      idc?: string(name='Idc', description='idc'),
      model?: string(name='Model', description='model'),
      mgnIp: string(name='MgnIp', description='mgn_ip'),
      hostName: string(name='HostName', description='host_name'),
      manufacturer?: string(name='Manufacturer', description='manufacturer'),
      logicNetPod?: string(name='LogicNetPod', description='logic_net_pod'),
      username?: string(name='Username', description='username'),
    }
  ](name='Devices', description='devices'),
  requestId: string(name='RequestId', description='requestId'),
}

model NewNetDeviceInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ long ] (name='Data', description='data'),
}

async function newNetDeviceInfoWithOptions(request: NewNetDeviceInfoRequest, runtime: Util.RuntimeOptions): NewNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('NewNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function newNetDeviceInfo(request: NewNetDeviceInfoRequest): NewNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return newNetDeviceInfoWithOptions(request, runtime);
}

model DeleteNetDeviceInfoRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  requestId: string(name='RequestId', description='requestId'),
  ids: string(name='Ids', description='ids'),
}

model DeleteNetDeviceInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ long ] (name='Data', description='data'),
}

async function deleteNetDeviceInfoWithOptions(request: DeleteNetDeviceInfoRequest, runtime: Util.RuntimeOptions): DeleteNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('DeleteNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function deleteNetDeviceInfo(request: DeleteNetDeviceInfoRequest): DeleteNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetDeviceInfoWithOptions(request, runtime);
}

model QueryJobOrderRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  orderId: long(name='OrderId', description='orderId'),
  requestId: string(name='RequestId', description='requestId'),
}

model QueryJobOrderResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function queryJobOrderWithOptions(request: QueryJobOrderRequest, runtime: Util.RuntimeOptions): QueryJobOrderResponse {
  Util.validateModel(request);
  return doRequest('QueryJobOrder', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function queryJobOrder(request: QueryJobOrderRequest): QueryJobOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryJobOrderWithOptions(request, runtime);
}

model GetNetDeviceInfoRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  cursor?: long(name='Cursor', description='cursor'),
  role?: string(name='Role', description='role'),
  serviceTag?: string(name='ServiceTag', description='service_tag'),
  idc?: string(name='Idc', description='idc'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  mgnIp?: string(name='MgnIp', description='mgn_ip'),
  manufacturer?: string(name='Manufacturer', description='manufacturer'),
  logicNetPod?: string(name='LogicNetPod', description='logic_net_pod'),
  password?: string(name='Password', description='password'),
  netPod?: string(name='NetPod', description='net_pod'),
  requestId?: string(name='RequestId', description='requestId'),
  model?: string(name='Model', description='model'),
  id?: long(name='Id', description='id'),
  hostName?: string(name='HostName', description='host_name'),
  username?: string(name='Username', description='username'),
}

model GetNetDeviceInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ map[string]any ] (name='Data', description='data'),
}

async function getNetDeviceInfoWithOptions(request: GetNetDeviceInfoRequest, runtime: Util.RuntimeOptions): GetNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('GetNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getNetDeviceInfo(request: GetNetDeviceInfoRequest): GetNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getNetDeviceInfoWithOptions(request, runtime);
}

model ListJobOrdersRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  cursor: long(name='Cursor', description='cursor'),
  handler?: string(name='Handler', description='handler'),
  clientSystem?: string(name='ClientSystem', description='client_sys'),
  pageSize: integer(name='PageSize', description='pageSize'),
  title?: string(name='Title', description='title'),
  orderStatus?: string(name='OrderStatus', description='order_status'),
  clientUniqueId?: string(name='ClientUniqueId', description='client_unique_id'),
  requestId: string(name='RequestId', description='requestId'),
  startTime?: string(name='StartTime', description='startTime'),
  id?: string(name='Id', description='id'),
  endTime?: string(name='EndTime', description='endTime'),
  changingType?: string(name='ChangingType', description='changing_type'),
  status?: string(name='Status', description='status'),
}

model ListJobOrdersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ map[string]any ] (name='Data', description='data'),
}

async function listJobOrdersWithOptions(request: ListJobOrdersRequest, runtime: Util.RuntimeOptions): ListJobOrdersResponse {
  Util.validateModel(request);
  return doRequest('ListJobOrders', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function listJobOrders(request: ListJobOrdersRequest): ListJobOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listJobOrdersWithOptions(request, runtime);
}

model UpdateNetDeviceInfoRequest = {
  appName?: string(name='AppName', description='appKey'),
  appCode?: string(name='AppCode', description='appSecret'),
  devices: [
    {
      password?: string(name='Password', description='password'),
      role?: string(name='Role', description='role'),
      serviceTag: string(name='ServiceTag', description='service_tag'),
      netPod?: string(name='NetPod', description='net_pod'),
      idc?: string(name='Idc', description='idc'),
      model?: string(name='Model', description='model'),
      id: long(name='Id', description='id'),
      mgnIp?: string(name='MgnIp', description='mgn_ip'),
      hostName: string(name='HostName', description='host_name'),
      manufacturer: string(name='Manufacturer', description='manufacturer'),
      logicNetPod?: string(name='LogicNetPod', description='logic_net_pod'),
      username?: string(name='Username', description='username'),
    }
  ](name='Devices', description='devices'),
  requestId: string(name='RequestId', description='requestId'),
}

model UpdateNetDeviceInfoResponse = {
  requestId: string(name='RequestId', description='requestId'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ long ] (name='Data', description='data'),
}

async function updateNetDeviceInfoWithOptions(request: UpdateNetDeviceInfoRequest, runtime: Util.RuntimeOptions): UpdateNetDeviceInfoResponse {
  Util.validateModel(request);
  return doRequest('UpdateNetDeviceInfo', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function updateNetDeviceInfo(request: UpdateNetDeviceInfoRequest): UpdateNetDeviceInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateNetDeviceInfoWithOptions(request, runtime);
}

model PutAppConfigAndSaveRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  configureType: string(name='ConfigureType', description='appName'),
  data: string(name='Data', description='data'),
  apMac: string(name='ApMac', description='apMac'),
  currentTime: long(name='CurrentTime', description='timestamp'),
}

model PutAppConfigAndSaveResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function putAppConfigAndSaveWithOptions(request: PutAppConfigAndSaveRequest, runtime: Util.RuntimeOptions): PutAppConfigAndSaveResponse {
  Util.validateModel(request);
  return doRequest('PutAppConfigAndSave', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function putAppConfigAndSave(request: PutAppConfigAndSaveRequest): PutAppConfigAndSaveResponse {
  var runtime = new Util.RuntimeOptions{};
  return putAppConfigAndSaveWithOptions(request, runtime);
}

model RepairApRadioRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  apMac: string(name='ApMac', description='apMac'),
  radioIndex: string(name='RadioIndex', description='radioIndex'),
}

model RepairApRadioResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: boolean(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function repairApRadioWithOptions(request: RepairApRadioRequest, runtime: Util.RuntimeOptions): RepairApRadioResponse {
  Util.validateModel(request);
  return doRequest('RepairApRadio', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function repairApRadio(request: RepairApRadioRequest): RepairApRadioResponse {
  var runtime = new Util.RuntimeOptions{};
  return repairApRadioWithOptions(request, runtime);
}

model RebootApRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model RebootApResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function rebootApWithOptions(request: RebootApRequest, runtime: Util.RuntimeOptions): RebootApResponse {
  Util.validateModel(request);
  return doRequest('RebootAp', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function rebootAp(request: RebootApRequest): RebootApResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootApWithOptions(request, runtime);
}

model SaveApRadioConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  htmode: string(name='Htmode', description='htmode'),
  frag: integer(name='Frag', description='frag'),
  minrate: integer(name='Minrate', description='minrate'),
  probereq: string(name='Probereq', description='probereq'),
  channel: string(name='Channel', description='channel'),
  shortgi: string(name='Shortgi', description='shortgi'),
  hwmode: string(name='Hwmode', description='hwmode'),
  mgmtRate: integer(name='MgmtRate', description='mgmtRate'),
  bcastRate: integer(name='BcastRate', description='bcastRate'),
  uapsd: integer(name='Uapsd', description='uapsd'),
  beaconInt: integer(name='BeaconInt', description='beaconInt'),
  rts: integer(name='Rts', description='rts'),
  requireMode?: string(name='RequireMode', description='requireMode'),
  mcastRate: integer(name='McastRate', description='mcastRate'),
  txpower: string(name='Txpower', description='txpower'),
  noscan: string(name='Noscan', description='noscan'),
  disabled: string(name='Disabled', description='disabled'),
  id: long(name='Id', description='id'),
}

model SaveApRadioConfigResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function saveApRadioConfigWithOptions(request: SaveApRadioConfigRequest, runtime: Util.RuntimeOptions): SaveApRadioConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApRadioConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function saveApRadioConfig(request: SaveApRadioConfigRequest): SaveApRadioConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApRadioConfigWithOptions(request, runtime);
}

model GetRadioRunHistoryTimeSerRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  start: long(name='Start', description='start'),
  apMac: string(name='ApMac', description='apMac'),
  end: long(name='End', description='end'),
}

model GetRadioRunHistoryTimeSerResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getRadioRunHistoryTimeSerWithOptions(request: GetRadioRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetRadioRunHistoryTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetRadioRunHistoryTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getRadioRunHistoryTimeSer(request: GetRadioRunHistoryTimeSerRequest): GetRadioRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRadioRunHistoryTimeSerWithOptions(request, runtime);
}

model GetApRunHistoryTimeSerRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  start: long(name='Start', description='start'),
  apMac: string(name='ApMac', description='apMac'),
  end: long(name='End', description='end'),
}

model GetApRunHistoryTimeSerResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getApRunHistoryTimeSerWithOptions(request: GetApRunHistoryTimeSerRequest, runtime: Util.RuntimeOptions): GetApRunHistoryTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetApRunHistoryTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApRunHistoryTimeSer(request: GetApRunHistoryTimeSerRequest): GetApRunHistoryTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApRunHistoryTimeSerWithOptions(request, runtime);
}

model GetGroupMiscAggTimeSerRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  start: long(name='Start', description='start'),
  end: long(name='End', description='end'),
  apgroupUuid: string(name='ApgroupUuid', description='apgroupUuid'),
}

model GetGroupMiscAggTimeSerResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  requestId: string(name='RequestId', description='requestId'),
}

async function getGroupMiscAggTimeSerWithOptions(request: GetGroupMiscAggTimeSerRequest, runtime: Util.RuntimeOptions): GetGroupMiscAggTimeSerResponse {
  Util.validateModel(request);
  return doRequest('GetGroupMiscAggTimeSer', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getGroupMiscAggTimeSer(request: GetGroupMiscAggTimeSerRequest): GetGroupMiscAggTimeSerResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGroupMiscAggTimeSerWithOptions(request, runtime);
}

model GetApInfoFromPoolRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model GetApInfoFromPoolResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApInfoFromPoolWithOptions(request: GetApInfoFromPoolRequest, runtime: Util.RuntimeOptions): GetApInfoFromPoolResponse {
  Util.validateModel(request);
  return doRequest('GetApInfoFromPool', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApInfoFromPool(request: GetApInfoFromPoolRequest): GetApInfoFromPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApInfoFromPoolWithOptions(request, runtime);
}

model KickStaRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model KickStaResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function kickStaWithOptions(request: KickStaRequest, runtime: Util.RuntimeOptions): KickStaResponse {
  Util.validateModel(request);
  return doRequest('KickSta', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function kickSta(request: KickStaRequest): KickStaResponse {
  var runtime = new Util.RuntimeOptions{};
  return kickStaWithOptions(request, runtime);
}

model DeleteApgroupConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model DeleteApgroupConfigResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function deleteApgroupConfigWithOptions(request: DeleteApgroupConfigRequest, runtime: Util.RuntimeOptions): DeleteApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function deleteApgroupConfig(request: DeleteApgroupConfigRequest): DeleteApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApgroupConfigWithOptions(request, runtime);
}

model GetApDetailedConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model GetApDetailedConfigResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApDetailedConfigWithOptions(request: GetApDetailedConfigRequest, runtime: Util.RuntimeOptions): GetApDetailedConfigResponse {
  Util.validateModel(request);
  return doRequest('GetApDetailedConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApDetailedConfig(request: GetApDetailedConfigRequest): GetApDetailedConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailedConfigWithOptions(request, runtime);
}

model GetApDetailStatusRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  needRadioStatus: boolean(name='NeedRadioStatus', description='needRadioStatus'),
  mac: string(name='Mac', description='mac'),
  needApgroupInfo: boolean(name='NeedApgroupInfo', description='needApgroupInfo'),
}

model GetApDetailStatusResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApDetailStatusWithOptions(request: GetApDetailStatusRequest, runtime: Util.RuntimeOptions): GetApDetailStatusResponse {
  Util.validateModel(request);
  return doRequest('GetApDetailStatus', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApDetailStatus(request: GetApDetailStatusRequest): GetApDetailStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApDetailStatusWithOptions(request, runtime);
}

model DeleteApSsidConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  apMac: string(name='ApMac', description='apMac'),
  ssid: string(name='Ssid', description='ssid'),
  radioIndex: string(name='RadioIndex', description='radioIndex'),
}

model DeleteApSsidConfigResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function deleteApSsidConfigWithOptions(request: DeleteApSsidConfigRequest, runtime: Util.RuntimeOptions): DeleteApSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteApSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function deleteApSsidConfig(request: DeleteApSsidConfigRequest): DeleteApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApSsidConfigWithOptions(request, runtime);
}

model GetApgroupIdRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model GetApgroupIdResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApgroupIdWithOptions(request: GetApgroupIdRequest, runtime: Util.RuntimeOptions): GetApgroupIdResponse {
  Util.validateModel(request);
  return doRequest('GetApgroupId', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApgroupId(request: GetApgroupIdRequest): GetApgroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupIdWithOptions(request, runtime);
}

model SetApAddressRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  apCityName?: string(name='ApCityName', description='apCityName'),
  lng?: string(name='Lng', description='lng'),
  apCampusName?: string(name='ApCampusName', description='apCampusName'),
  apGroup?: string(name='ApGroup', description='apGroup'),
  language: string(name='Language', description='language'),
  apAreaName?: string(name='ApAreaName', description='apAreaName'),
  apProvinceName?: string(name='ApProvinceName', description='apProvinceName'),
  mac: string(name='Mac', description='mac'),
  apName?: string(name='ApName', description='apName'),
  apUnitName?: string(name='ApUnitName', description='apUnitName'),
  apFloor?: string(name='ApFloor', description='apFloor'),
  apBuildingName?: string(name='ApBuildingName', description='apBuildingName'),
  apUnitId?: long(name='ApUnitId', description='apUnitId'),
  apNationName?: string(name='ApNationName', description='apNationName'),
  lat?: string(name='Lat', description='lat'),
  direction?: string(name='Direction', description='direction'),
}

model SetApAddressResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function setApAddressWithOptions(request: SetApAddressRequest, runtime: Util.RuntimeOptions): SetApAddressResponse {
  Util.validateModel(request);
  return doRequest('SetApAddress', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function setApAddress(request: SetApAddressRequest): SetApAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApAddressWithOptions(request, runtime);
}

model SaveApSsidConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  nasid?: string(name='Nasid', description='nasid'),
  ignoreWeakProbe?: integer(name='IgnoreWeakProbe', description='ignoreWeakProbe'),
  fourthAuthPort?: integer(name='FourthAuthPort', description='fourthAuthPort'),
  cirType?: integer(name='CirType', description='cirType'),
  ieee80211r?: integer(name='Ieee80211r', description='ieee80211r'),
  mobilityDomain?: string(name='MobilityDomain', description='mobilityDomain'),
  daePort?: integer(name='DaePort', description='daePort'),
  fourthAuthServer?: string(name='FourthAuthServer', description='fourthAuthServer'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret', description='secondaryAcctSecret'),
  type?: integer(name='Type', description='type'),
  fourthAuthSecret?: string(name='FourthAuthSecret', description='fourthAuthSecret'),
  acctStatusServerWork?: integer(name='AcctStatusServerWork', description='acct_status_server_enable'),
  ieee80211w: string(name='Ieee80211w', description='ieee80211w'),
  ssidLb: integer(name='SsidLb', description='ssidLb'),
  authPort?: integer(name='AuthPort', description='authPort'),
  authServer?: string(name='AuthServer', description='authServer'),
  daeSecret?: string(name='DaeSecret', description='daeSecret'),
  id?: long(name='Id', description='id'),
  cirStep?: long(name='CirStep', description='cirStep'),
  authStatusServerWork?: integer(name='AuthStatusServerWork', description='auth_status_server_enable'),
  secondaryAuthPort?: integer(name='SecondaryAuthPort', description='secondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret', description='secondaryAuthSecret'),
  shortPreamble: string(name='ShortPreamble', description='shortPreamble'),
  cirUl?: long(name='CirUl', description='cirUl'),
  daeClient?: string(name='DaeClient', description='daeClient'),
  liteEffect?: boolean(name='LiteEffect', description='liteEffect'),
  thirdAuthSecret?: string(name='ThirdAuthSecret', description='thirdAuthSecret'),
  thirdAuthPort?: integer(name='ThirdAuthPort', description='thirdAuthPort'),
  acctServer?: string(name='AcctServer', description='acctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer', description='secondaryAuthServer'),
  encKey?: string(name='EncKey', description='encKey'),
  acctSecret?: string(name='AcctSecret', description='acctSecret'),
  authCache: string(name='AuthCache', description='authCache'),
  multicastForward?: integer(name='MulticastForward', description='multicastForward'),
  secondaryAcctPort?: integer(name='SecondaryAcctPort', description='secondaryAcctPort'),
  radioIndex: string(name='RadioIndex', description='radioIndex'),
  ndProxyWork?: integer(name='NdProxyWork', description='ndproxy_enable'),
  hidden: string(name='Hidden', description='hidden'),
  maxInactivity: integer(name='MaxInactivity', description='maxInactivity'),
  thirdAuthServer?: string(name='ThirdAuthServer', description='thirdAuthServer'),
  sendConfigToAp?: boolean(name='SendConfigToAp', description='sendConfigToAp'),
  ssid: string(name='Ssid', description='ssid'),
  cir?: long(name='Cir', description='cir'),
  mac: string(name='Mac', description='mac'),
  network: integer(name='Network', description='network'),
  isolate: string(name='Isolate', description='isolate'),
  disassocWeakRssi: integer(name='DisassocWeakRssi', description='disassocWeakRssi'),
  apAssetId?: long(name='ApAssetId', description='apAssetId'),
  encryption: string(name='Encryption', description='encryption'),
  vlanDhcp: integer(name='VlanDhcp', description='vlanDhcp'),
  wmm: string(name='Wmm', description='wmm'),
  dynamicVlan: integer(name='DynamicVlan', description='dynamicVlan'),
  disabled: string(name='Disabled', description='disabled'),
  maxassoc: integer(name='Maxassoc', description='maxassoc'),
  acctPort?: integer(name='AcctPort', description='acctPort'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  ftOverDs?: integer(name='FtOverDs', description='ftOverDs'),
  arpProxyEnable?: integer(name='ArpProxyEnable', description='arpproxy_enable'),
  disassocLowAck: string(name='DisassocLowAck', description='disassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer', description='secondaryAcctServer'),
  ownip?: string(name='Ownip', description='ownip'),
}

model SaveApSsidConfigResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function saveApSsidConfigWithOptions(request: SaveApSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function saveApSsidConfig(request: SaveApSsidConfigRequest): SaveApSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApSsidConfigWithOptions(request, runtime);
}

model GetApStatusByGroupIdRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  cursor: long(name='Cursor', description='cursor'),
  apgroupId: string(name='ApgroupId', description='apgroupId'),
  pageSize: integer(name='PageSize', description='pageSize'),
}

model GetApStatusByGroupIdResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApStatusByGroupIdWithOptions(request: GetApStatusByGroupIdRequest, runtime: Util.RuntimeOptions): GetApStatusByGroupIdResponse {
  Util.validateModel(request);
  return doRequest('GetApStatusByGroupId', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApStatusByGroupId(request: GetApStatusByGroupIdRequest): GetApStatusByGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApStatusByGroupIdWithOptions(request, runtime);
}

model EffectApgroupConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model EffectApgroupConfigResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function effectApgroupConfigWithOptions(request: EffectApgroupConfigRequest, runtime: Util.RuntimeOptions): EffectApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('EffectApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function effectApgroupConfig(request: EffectApgroupConfigRequest): EffectApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApgroupConfigWithOptions(request, runtime);
}

model RegisterApAssetRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  id?: long(name='Id', description='id'),
  mac: string(name='Mac', description='mac'),
  apGroupUUId: string(name='ApGroupUUId', description='apgroupId'),
  serialNo: string(name='SerialNo', description='serialNo'),
}

model RegisterApAssetResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function registerApAssetWithOptions(request: RegisterApAssetRequest, runtime: Util.RuntimeOptions): RegisterApAssetResponse {
  Util.validateModel(request);
  return doRequest('RegisterApAsset', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function registerApAsset(request: RegisterApAssetRequest): RegisterApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerApAssetWithOptions(request, runtime);
}

model EffectApConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model EffectApConfigResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function effectApConfigWithOptions(request: EffectApConfigRequest, runtime: Util.RuntimeOptions): EffectApConfigResponse {
  Util.validateModel(request);
  return doRequest('EffectApConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function effectApConfig(request: EffectApConfigRequest): EffectApConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return effectApConfigWithOptions(request, runtime);
}

model SetApNameRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  name: string(name='Name', description='name'),
  apMac: string(name='ApMac', description='apMac'),
}

model SetApNameResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function setApNameWithOptions(request: SetApNameRequest, runtime: Util.RuntimeOptions): SetApNameResponse {
  Util.validateModel(request);
  return doRequest('SetApName', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function setApName(request: SetApNameRequest): SetApNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApNameWithOptions(request, runtime);
}

model SaveApgroupSsidConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  newSsid: string(name='NewSsid', description='newSsid'),
  nasid?: string(name='Nasid', description='nasid'),
  ignoreWeakProbe?: integer(name='IgnoreWeakProbe', description='ignoreWeakProbe'),
  daePort?: integer(name='DaePort', description='daePort'),
  apgroupId: string(name='ApgroupId', description='apgroupId'),
  hidden?: string(name='Hidden', description='hidden'),
  secondaryAcctSecret?: string(name='SecondaryAcctSecret', description='secondaryAcctSecret'),
  binding: string(name='Binding', description='binding'),
  maxInactivity?: integer(name='MaxInactivity', description='maxInactivity'),
  type?: integer(name='Type', description='type'),
  ssid: string(name='Ssid', description='ssid'),
  cir?: long(name='Cir', description='cir'),
  network: integer(name='Network', description='network'),
  ieee80211w?: string(name='Ieee80211w', description='ieee80211w'),
  isolate?: string(name='Isolate', description='isolate'),
  ssidLb?: integer(name='SsidLb', description='ssidLb'),
  disassocWeakRssi?: integer(name='DisassocWeakRssi', description='disassocWeakRssi'),
  encryption: string(name='Encryption', description='encryption'),
  vlanDhcp?: integer(name='VlanDhcp', description='vlanDhcp'),
  authPort?: integer(name='AuthPort', description='authPort'),
  wmm?: string(name='Wmm', description='wmm'),
  dynamicVlan?: integer(name='DynamicVlan', description='dynamicVlan'),
  authServer?: string(name='AuthServer', description='authServer'),
  disabled?: string(name='Disabled', description='disabled'),
  daeSecret?: string(name='DaeSecret', description='daeSecret'),
  id?: long(name='Id', description='id'),
  maxassoc?: string(name='Maxassoc', description='maxassoc'),
  secondaryAuthPort?: integer(name='SecondaryAuthPort', description='secondaryAuthPort'),
  secondaryAuthSecret?: string(name='SecondaryAuthSecret', description='secondaryAuthSecret'),
  acctPort?: integer(name='AcctPort', description='acctPort'),
  shortPreamble?: string(name='ShortPreamble', description='shortPreamble'),
  liteEffect?: boolean(name='LiteEffect', description='liteEffect'),
  daeClient?: string(name='DaeClient', description='daeClient'),
  acctServer?: string(name='AcctServer', description='acctServer'),
  secondaryAuthServer?: string(name='SecondaryAuthServer', description='secondaryAuthServer'),
  encKey?: string(name='EncKey', description='encKey'),
  acctSecret?: string(name='AcctSecret', description='acctSecret'),
  authSecret?: string(name='AuthSecret', description='authSecret'),
  effect?: boolean(name='Effect', description='effect'),
  authCache?: string(name='AuthCache', description='authCache'),
  multicastForward?: integer(name='MulticastForward', description='multicastForward'),
  secondaryAcctPort?: integer(name='SecondaryAcctPort', description='secondaryAcctPort'),
  disassocLowAck?: string(name='DisassocLowAck', description='disassocLowAck'),
  secondaryAcctServer?: string(name='SecondaryAcctServer', description='secondaryAcctServer'),
  ownip?: string(name='Ownip', description='ownip'),
}

model SaveApgroupSsidConfigResponse = {
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ long ] (name='Data', description='data'),
}

async function saveApgroupSsidConfigWithOptions(request: SaveApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): SaveApgroupSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('SaveApgroupSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function saveApgroupSsidConfig(request: SaveApgroupSsidConfigRequest): SaveApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveApgroupSsidConfigWithOptions(request, runtime);
}

model GetStaStatusListByApRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  cursor: long(name='Cursor', description='cursor'),
  pageSize: integer(name='PageSize', description='pageSize'),
  apMac: string(name='ApMac', description='apMac'),
}

model GetStaStatusListByApResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getStaStatusListByApWithOptions(request: GetStaStatusListByApRequest, runtime: Util.RuntimeOptions): GetStaStatusListByApResponse {
  Util.validateModel(request);
  return doRequest('GetStaStatusListByAp', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getStaStatusListByAp(request: GetStaStatusListByApRequest): GetStaStatusListByApResponse {
  var runtime = new Util.RuntimeOptions{};
  return getStaStatusListByApWithOptions(request, runtime);
}

model GetApAddressByMacRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  language: string(name='Language', description='language'),
  mac: string(name='Mac', description='mac'),
}

model GetApAddressByMacResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApAddressByMacWithOptions(request: GetApAddressByMacRequest, runtime: Util.RuntimeOptions): GetApAddressByMacResponse {
  Util.validateModel(request);
  return doRequest('GetApAddressByMac', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApAddressByMac(request: GetApAddressByMacRequest): GetApAddressByMacResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAddressByMacWithOptions(request, runtime);
}

model AddApListToApgroupRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  apMacList: map[string]any(name='ApMacList', description='apMacList'),
  apGroupId: string(name='ApGroupId', description='apgroupId'),
}

model AddApListToApgroupResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function addApListToApgroupWithOptions(request: AddApListToApgroupRequest, runtime: Util.RuntimeOptions): AddApListToApgroupResponse {
  Util.validateModel(request);
  return doRequest('AddApListToApgroup', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function addApListToApgroup(request: AddApListToApgroupRequest): AddApListToApgroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addApListToApgroupWithOptions(request, runtime);
}

model GetApgroupSsidConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model GetApgroupSsidConfigResponse = {
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
  data: [ map[string]any ] (name='Data', description='data'),
}

async function getApgroupSsidConfigWithOptions(request: GetApgroupSsidConfigRequest, runtime: Util.RuntimeOptions): GetApgroupSsidConfigResponse {
  Util.validateModel(request);
  return doRequest('GetApgroupSsidConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApgroupSsidConfig(request: GetApgroupSsidConfigRequest): GetApgroupSsidConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApgroupSsidConfigWithOptions(request, runtime);
}

model NewApgroupConfigRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
  parentApgroupId: string(name='ParentApgroupId', description='parentApgroupId'),
  name: string(name='Name', description='name'),
}

model NewApgroupConfigResponse = {
  data: string(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function newApgroupConfigWithOptions(request: NewApgroupConfigRequest, runtime: Util.RuntimeOptions): NewApgroupConfigResponse {
  Util.validateModel(request);
  return doRequest('NewApgroupConfig', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function newApgroupConfig(request: NewApgroupConfigRequest): NewApgroupConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return newApgroupConfigWithOptions(request, runtime);
}

model GetApAssetRequest = {
  appName: string(name='AppName', description='appKey'),
  appCode: string(name='AppCode', description='appSecret'),
}

model GetApAssetResponse = {
  data: map[string]any(name='Data', description='data'),
  isSuccess: boolean(name='IsSuccess', description='success'),
  errorCode: integer(name='ErrorCode', description='errorCode'),
  errorMessage: string(name='ErrorMessage', description='errorMsg'),
}

async function getApAssetWithOptions(request: GetApAssetRequest, runtime: Util.RuntimeOptions): GetApAssetResponse {
  Util.validateModel(request);
  return doRequest('GetApAsset', 'HTTPS', 'POST', '2019-11-18', 'AK', request, null, runtime);
}

async function getApAsset(request: GetApAssetRequest): GetApAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getApAssetWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
