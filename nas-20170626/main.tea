import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-chengdu = 'nas.aliyuncs.com',
    me-east-1 = 'nas.ap-northeast-1.aliyuncs.com',
    cn-hangzhou-finance = 'nas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('nas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DeleteLifecyclePolicyRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  lifecyclePolicyName: string(name='LifecyclePolicyName', description='lifecyclePolicyName'),
}

model DeleteLifecyclePolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
}

async function deleteLifecyclePolicyWithOptions(request: DeleteLifecyclePolicyRequest, runtime: Util.RuntimeOptions): DeleteLifecyclePolicyResponse {
  Util.validateModel(request);
  return doRequest('DeleteLifecyclePolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteLifecyclePolicy(request: DeleteLifecyclePolicyRequest): DeleteLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLifecyclePolicyWithOptions(request, runtime);
}

model UpgradeFileSystemRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  capacity: long(name='Capacity', description='capacity'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model UpgradeFileSystemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function upgradeFileSystemWithOptions(request: UpgradeFileSystemRequest, runtime: Util.RuntimeOptions): UpgradeFileSystemResponse {
  Util.validateModel(request);
  return doRequest('UpgradeFileSystem', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function upgradeFileSystem(request: UpgradeFileSystemRequest): UpgradeFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeFileSystemWithOptions(request, runtime);
}

model ModifyLifecyclePolicyRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  lifecyclePolicyName: string(name='LifecyclePolicyName', description='lifecyclePolicyName'),
  path: string(name='Path', description='path'),
  lifecycleRuleName: string(name='LifecycleRuleName', description='lifecycleRuleName'),
  storageType: string(name='StorageType', description='storageType'),
}

model ModifyLifecyclePolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
}

async function modifyLifecyclePolicyWithOptions(request: ModifyLifecyclePolicyRequest, runtime: Util.RuntimeOptions): ModifyLifecyclePolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyLifecyclePolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyLifecyclePolicy(request: ModifyLifecyclePolicyRequest): ModifyLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLifecyclePolicyWithOptions(request, runtime);
}

model CreateLifecyclePolicyRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  lifecyclePolicyName: string(name='LifecyclePolicyName', description='lifecyclePolicyName'),
  path: string(name='Path', description='path'),
  lifecycleRuleName: string(name='LifecycleRuleName', description='lifecycleRuleName'),
  storageType: string(name='StorageType', description='storageType'),
}

model CreateLifecyclePolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
}

async function createLifecyclePolicyWithOptions(request: CreateLifecyclePolicyRequest, runtime: Util.RuntimeOptions): CreateLifecyclePolicyResponse {
  Util.validateModel(request);
  return doRequest('CreateLifecyclePolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createLifecyclePolicy(request: CreateLifecyclePolicyRequest): CreateLifecyclePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLifecyclePolicyWithOptions(request, runtime);
}

model DescribeLifecyclePoliciesRequest = {
  fileSystemId?: string(name='FileSystemId', description='volume'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeLifecyclePoliciesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  lifecyclePolicies: [
    {
      fileSystemId: string(name='FileSystemId', description='volume'),
      lifecyclePolicyName: string(name='LifecyclePolicyName', description='name'),
      path: string(name='Path', description='path'),
      lifecycleRuleName: string(name='LifecycleRuleName', description='policy'),
      storageType: string(name='StorageType', description='storageType'),
      createTime: string(name='CreateTime', description='createTimeStr'),
    }
  ](name='LifecyclePolicies', description='data'),
}

async function describeLifecyclePoliciesWithOptions(request: DescribeLifecyclePoliciesRequest, runtime: Util.RuntimeOptions): DescribeLifecyclePoliciesResponse {
  Util.validateModel(request);
  return doRequest('DescribeLifecyclePolicies', 'HTTPS', 'GET', '2017-06-26', 'AK', null, request, runtime);
}

async function describeLifecyclePolicies(request: DescribeLifecyclePoliciesRequest): DescribeLifecyclePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLifecyclePoliciesWithOptions(request, runtime);
}

model DescribeDirQuotasRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  path?: string(name='Path', description='path'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeDirQuotasResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  dirQuotaInfos: [
    {
      path: string(name='Path', description='path'),
      dirInode: string(name='DirInode', description='dirInode'),
      status: string(name='Status', description='status'),
      userQuotaInfos: [
        {
          userType: string(name='UserType', description='userType'),
          userId: string(name='UserId', description='userId'),
          quotaType: string(name='QuotaType', description='quotaType'),
          sizeLimit: long(name='SizeLimit', description='sizeLimit'),
          sizeReal: long(name='SizeReal', description='sizeReal'),
          fileCountLimit: long(name='FileCountLimit', description='fileCountLimit'),
          fileCountReal: long(name='FileCountReal', description='fileCountReal'),
        }
      ](name='UserQuotaInfos', description='userQuotaInfos'),
    }
  ](name='DirQuotaInfos', description='data'),
}

async function describeDirQuotasWithOptions(request: DescribeDirQuotasRequest, runtime: Util.RuntimeOptions): DescribeDirQuotasResponse {
  Util.validateModel(request);
  return doRequest('DescribeDirQuotas', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeDirQuotas(request: DescribeDirQuotasRequest): DescribeDirQuotasResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDirQuotasWithOptions(request, runtime);
}

model SetDirQuotaRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  path: string(name='Path', description='path'),
  quotaType: string(name='QuotaType', description='quotaType'),
  userType: string(name='UserType', description='userType'),
  userId?: string(name='UserId', description='userId'),
  sizeLimit?: long(name='SizeLimit', description='sizeLimit'),
  fileCountLimit?: long(name='FileCountLimit', description='fileCountLimit'),
}

model SetDirQuotaResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
}

async function setDirQuotaWithOptions(request: SetDirQuotaRequest, runtime: Util.RuntimeOptions): SetDirQuotaResponse {
  Util.validateModel(request);
  return doRequest('SetDirQuota', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function setDirQuota(request: SetDirQuotaRequest): SetDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDirQuotaWithOptions(request, runtime);
}

model CancelDirQuotaRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  path: string(name='Path', description='path'),
  userType: string(name='UserType', description='userType'),
  userId?: string(name='UserId', description='userId'),
}

model CancelDirQuotaResponse = {
  requestId: string(name='RequestId', description='requestId'),
  success: boolean(name='Success', description='success'),
}

async function cancelDirQuotaWithOptions(request: CancelDirQuotaRequest, runtime: Util.RuntimeOptions): CancelDirQuotaResponse {
  Util.validateModel(request);
  return doRequest('CancelDirQuota', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function cancelDirQuota(request: CancelDirQuotaRequest): CancelDirQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelDirQuotaWithOptions(request, runtime);
}

model DescribeStoragePackagesRequest = {
  regionId: string(name='RegionId', description='region'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  useUTCDateTime?: boolean(name='UseUTCDateTime', description='useUTCDateTime'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeStoragePackagesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  packages: {
    package: [
      {
        startTime: string(name='StartTime', description='startTimeStr'),
        storageType: string(name='StorageType', description='packageType'),
        status: string(name='Status', description='status'),
        fileSystemId: string(name='FileSystemId', description='volume'),
        packageId: string(name='PackageId', description='packageId'),
        expiredTime: string(name='ExpiredTime', description='endTimeStr'),
        size: long(name='Size', description='size'),
      }
    ](name='Package', description='Package'),
  }(name='Packages', description='data'),
}

async function describeStoragePackagesWithOptions(request: DescribeStoragePackagesRequest, runtime: Util.RuntimeOptions): DescribeStoragePackagesResponse {
  Util.validateModel(request);
  return doRequest('DescribeStoragePackages', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeStoragePackages(request: DescribeStoragePackagesRequest): DescribeStoragePackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStoragePackagesWithOptions(request, runtime);
}

model DescribeFileSystemStatisticsRequest = {
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeFileSystemStatisticsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  fileSystemStatistics: {
    fileSystemStatistic: [
      {
        fileSystemType: string(name='FileSystemType', description='fileSystemType'),
        totalCount: integer(name='TotalCount', description='totalCount'),
        meteredSize: long(name='MeteredSize', description='meteredSize'),
        expiredCount: integer(name='ExpiredCount', description='expiredCount'),
        expiringCount: integer(name='ExpiringCount', description='expiringCount'),
      }
    ](name='FileSystemStatistic', description='FileSystemStatistic'),
  }(name='FileSystemStatistics', description='data'),
}

async function describeFileSystemStatisticsWithOptions(request: DescribeFileSystemStatisticsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemStatisticsResponse {
  Util.validateModel(request);
  return doRequest('DescribeFileSystemStatistics', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeFileSystemStatistics(request: DescribeFileSystemStatisticsRequest): DescribeFileSystemStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemStatisticsWithOptions(request, runtime);
}

model DescribeLogAnalysisRequest = {
  regionId: string(name='RegionId', description='region'),
}

model DescribeLogAnalysisResponse = {
  requestId: string(name='RequestId', description='requestId'),
  code: string(name='Code', description='code'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  analyses: {
    analysis: [
      {
        metaKey: string(name='MetaKey', description='metaKey'),
        metaValue: {
          logstore: string(name='Logstore', description='logstore'),
          region: string(name='Region', description='region '),
          project: string(name='Project', description='project'),
          roleArn: string(name='RoleArn', description='roleArn'),
        }(name='MetaValue', description='metaValue'),
      }
    ](name='Analysis', description='Analysis'),
  }(name='Analyses', description='data'),
}

async function describeLogAnalysisWithOptions(request: DescribeLogAnalysisRequest, runtime: Util.RuntimeOptions): DescribeLogAnalysisResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogAnalysis', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeLogAnalysis(request: DescribeLogAnalysisRequest): DescribeLogAnalysisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogAnalysisWithOptions(request, runtime);
}

model DescribeMountedClientsRequest = {
  regionId: string(name='RegionId', description='region'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  fileSystemId: string(name='FileSystemId', description='volume'),
  clientIP?: string(name='ClientIP', description='clientip'),
  mountTargetDomain: string(name='MountTargetDomain', description='domainName'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeMountedClientsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  clients: {
    client: [
      {
        clientIP: string(name='ClientIP', description='ClientIP'),
      }
    ](name='Client', description='Client'),
  }(name='Clients', description='data'),
}

async function describeMountedClientsWithOptions(request: DescribeMountedClientsRequest, runtime: Util.RuntimeOptions): DescribeMountedClientsResponse {
  Util.validateModel(request);
  return doRequest('DescribeMountedClients', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeMountedClients(request: DescribeMountedClientsRequest): DescribeMountedClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountedClientsWithOptions(request, runtime);
}

model DescribeAutoSnapshotTasksRequest = {
  fileSystemIds?: string(name='FileSystemIds', description='volumes'),
  autoSnapshotPolicyIds?: string(name='AutoSnapshotPolicyIds', description='autoSnapshotPolicyIds'),
  fileSystemType: string(name='FileSystemType', description='fileSystemType'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeAutoSnapshotTasksResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  autoSnapshotTasks: {
    autoSnapshotTask: [
      {
        sourceFileSystemId: string(name='SourceFileSystemId', description='sourceFileSystemId'),
        autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
      }
    ](name='AutoSnapshotTask', description='AutoSnapshotTask'),
  }(name='AutoSnapshotTasks', description='data'),
}

async function describeAutoSnapshotTasksWithOptions(request: DescribeAutoSnapshotTasksRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotTasksResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoSnapshotTasks', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeAutoSnapshotTasks(request: DescribeAutoSnapshotTasksRequest): DescribeAutoSnapshotTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotTasksWithOptions(request, runtime);
}

model RemoveClientFromBlackListRequest = {
  regionId: string(name='RegionId', description='region'),
  fileSystemId: string(name='FileSystemId', description='fileSystemId'),
  clientIP: string(name='ClientIP', description='clientIp'),
  clientToken: string(name='ClientToken', description='clientToken'),
}

model RemoveClientFromBlackListResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeClientFromBlackListWithOptions(request: RemoveClientFromBlackListRequest, runtime: Util.RuntimeOptions): RemoveClientFromBlackListResponse {
  Util.validateModel(request);
  return doRequest('RemoveClientFromBlackList', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function removeClientFromBlackList(request: RemoveClientFromBlackListRequest): RemoveClientFromBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeClientFromBlackListWithOptions(request, runtime);
}

model DescribeBlackListClientsRequest = {
  regionId: string(name='RegionId', description='region'),
  fileSystemId: string(name='FileSystemId', description='fileSystemId'),
  clientIP?: string(name='ClientIP', description='clientIp'),
}

model DescribeBlackListClientsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  clients: string(name='Clients', description='data'),
}

async function describeBlackListClientsWithOptions(request: DescribeBlackListClientsRequest, runtime: Util.RuntimeOptions): DescribeBlackListClientsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBlackListClients', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeBlackListClients(request: DescribeBlackListClientsRequest): DescribeBlackListClientsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlackListClientsWithOptions(request, runtime);
}

model AddClientToBlackListRequest = {
  regionId: string(name='RegionId', description='region'),
  fileSystemId: string(name='FileSystemId', description='fileSystemId'),
  clientIP: string(name='ClientIP', description='clientIp'),
  clientToken: string(name='ClientToken', description='clientToken'),
}

model AddClientToBlackListResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addClientToBlackListWithOptions(request: AddClientToBlackListRequest, runtime: Util.RuntimeOptions): AddClientToBlackListResponse {
  Util.validateModel(request);
  return doRequest('AddClientToBlackList', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function addClientToBlackList(request: AddClientToBlackListRequest): AddClientToBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addClientToBlackListWithOptions(request, runtime);
}

model DescribeLDAPConfigRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
}

model DescribeLDAPConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
  ldap: {
    bindDN: string(name='BindDN', description='bindDN'),
    URI: string(name='URI', description='uri'),
    searchBase: string(name='SearchBase', description='searchBase'),
  }(name='Ldap', description='data'),
}

async function describeLDAPConfigWithOptions(request: DescribeLDAPConfigRequest, runtime: Util.RuntimeOptions): DescribeLDAPConfigResponse {
  Util.validateModel(request);
  return doRequest('DescribeLDAPConfig', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeLDAPConfig(request: DescribeLDAPConfigRequest): DescribeLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLDAPConfigWithOptions(request, runtime);
}

model ModifyLDAPConfigRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  URI: string(name='URI', description='uri'),
  bindDN?: string(name='BindDN', description='bindDN'),
  searchBase: string(name='SearchBase', description='searchBase'),
}

model ModifyLDAPConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyLDAPConfigWithOptions(request: ModifyLDAPConfigRequest, runtime: Util.RuntimeOptions): ModifyLDAPConfigResponse {
  Util.validateModel(request);
  return doRequest('ModifyLDAPConfig', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyLDAPConfig(request: ModifyLDAPConfigRequest): ModifyLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLDAPConfigWithOptions(request, runtime);
}

model CreateLDAPConfigRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  URI: string(name='URI', description='uri'),
  bindDN?: string(name='BindDN', description='bindDN'),
  searchBase: string(name='SearchBase', description='searchBase'),
}

model CreateLDAPConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createLDAPConfigWithOptions(request: CreateLDAPConfigRequest, runtime: Util.RuntimeOptions): CreateLDAPConfigResponse {
  Util.validateModel(request);
  return doRequest('CreateLDAPConfig', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createLDAPConfig(request: CreateLDAPConfigRequest): CreateLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return createLDAPConfigWithOptions(request, runtime);
}

model DeleteLDAPConfigRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
}

model DeleteLDAPConfigResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteLDAPConfigWithOptions(request: DeleteLDAPConfigRequest, runtime: Util.RuntimeOptions): DeleteLDAPConfigResponse {
  Util.validateModel(request);
  return doRequest('DeleteLDAPConfig', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteLDAPConfig(request: DeleteLDAPConfigRequest): DeleteLDAPConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteLDAPConfigWithOptions(request, runtime);
}

model DescribeTagsRequest = {
  fileSystemId?: string(name='FileSystemId', description='volume'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  tag?: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model DescribeTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  tags: {
    tag: [
      {
        key: string(name='Key', description='key'),
        value: string(name='Value', description='value'),
        fileSystemIds: {
          fileSystemId: [ string ](name='FileSystemId', description='FileSystemId'),
        }(name='FileSystemIds', description='volumes'),
      }
    ](name='Tag', description='Tag'),
  }(name='Tags', description='data'),
}

async function describeTagsWithOptions(request: DescribeTagsRequest, runtime: Util.RuntimeOptions): DescribeTagsResponse {
  Util.validateModel(request);
  return doRequest('DescribeTags', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeTags(request: DescribeTagsRequest): DescribeTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagsWithOptions(request, runtime);
}

model RemoveTagsRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  tag: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model RemoveTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function removeTagsWithOptions(request: RemoveTagsRequest, runtime: Util.RuntimeOptions): RemoveTagsResponse {
  Util.validateModel(request);
  return doRequest('RemoveTags', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function removeTags(request: RemoveTagsRequest): RemoveTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTagsWithOptions(request, runtime);
}

model AddTagsRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  tag: [
    {
      key?: string(name='Key', description='key'),
      value?: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model AddTagsResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function addTagsWithOptions(request: AddTagsRequest, runtime: Util.RuntimeOptions): AddTagsResponse {
  Util.validateModel(request);
  return doRequest('AddTags', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function addTags(request: AddTagsRequest): AddTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTagsWithOptions(request, runtime);
}

model ResetFileSystemRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  snapshotId: string(name='SnapshotId', description='snapshotId'),
}

model ResetFileSystemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetFileSystemWithOptions(request: ResetFileSystemRequest, runtime: Util.RuntimeOptions): ResetFileSystemResponse {
  Util.validateModel(request);
  return doRequest('ResetFileSystem', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function resetFileSystem(request: ResetFileSystemRequest): ResetFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetFileSystemWithOptions(request, runtime);
}

model CreateAutoSnapshotPolicyRequest = {
  repeatWeekdays: string(name='RepeatWeekdays', description='repeatWeekdays'),
  timePoints: string(name='TimePoints', description='timePoints'),
  retentionDays?: integer(name='RetentionDays', description='retentionDays'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='autoSnapshotPolicyName'),
  fileSystemType: string(name='FileSystemType', description='fileSystemType'),
}

model CreateAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='data.autoSnapshotPolicyId'),
}

async function createAutoSnapshotPolicyWithOptions(request: CreateAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CreateAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('CreateAutoSnapshotPolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createAutoSnapshotPolicy(request: CreateAutoSnapshotPolicyRequest): CreateAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAutoSnapshotPolicyWithOptions(request, runtime);
}

model DescribeAutoSnapshotPoliciesRequest = {
  autoSnapshotPolicyId?: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  fileSystemType: string(name='FileSystemType', description='fileSystemType'),
}

model DescribeAutoSnapshotPoliciesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  autoSnapshotPolicies: {
    autoSnapshotPolicy: [
      {
        autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
        autoSnapshotPolicyName: string(name='AutoSnapshotPolicyName', description='autoSnapshotPolicyName'),
        createTime: string(name='CreateTime', description='createTime'),
        fileSystemNums: integer(name='FileSystemNums', description='fileSystemNums'),
        regionId: string(name='RegionId', description='regionId'),
        repeatWeekdays: string(name='RepeatWeekdays', description='repeatWeekdays'),
        retentionDays: integer(name='RetentionDays', description='retentionDays'),
        status: string(name='Status', description='status'),
        timePoints: string(name='TimePoints', description='timePoints'),
      }
    ](name='AutoSnapshotPolicy', description='AutoSnapshotPolicy'),
  }(name='AutoSnapshotPolicies', description='data'),
}

async function describeAutoSnapshotPoliciesWithOptions(request: DescribeAutoSnapshotPoliciesRequest, runtime: Util.RuntimeOptions): DescribeAutoSnapshotPoliciesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoSnapshotPolicies', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeAutoSnapshotPolicies(request: DescribeAutoSnapshotPoliciesRequest): DescribeAutoSnapshotPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoSnapshotPoliciesWithOptions(request, runtime);
}

model CancelAutoSnapshotPolicyRequest = {
  fileSystemIds: string(name='FileSystemIds', description='volumes'),
}

model CancelAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function cancelAutoSnapshotPolicyWithOptions(request: CancelAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): CancelAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('CancelAutoSnapshotPolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function cancelAutoSnapshotPolicy(request: CancelAutoSnapshotPolicyRequest): CancelAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelAutoSnapshotPolicyWithOptions(request, runtime);
}

model ApplyAutoSnapshotPolicyRequest = {
  autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  fileSystemIds: string(name='FileSystemIds', description='volumes'),
}

model ApplyAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function applyAutoSnapshotPolicyWithOptions(request: ApplyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ApplyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('ApplyAutoSnapshotPolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function applyAutoSnapshotPolicy(request: ApplyAutoSnapshotPolicyRequest): ApplyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyAutoSnapshotPolicyWithOptions(request, runtime);
}

model ModifyAutoSnapshotPolicyRequest = {
  autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
  autoSnapshotPolicyName?: string(name='AutoSnapshotPolicyName', description='autoSnapshotPolicyName'),
  repeatWeekdays?: string(name='RepeatWeekdays', description='repeatWeekdays'),
  retentionDays?: integer(name='RetentionDays', description='retentionDays'),
  timePoints?: string(name='TimePoints', description='timePoints'),
}

model ModifyAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAutoSnapshotPolicyWithOptions(request: ModifyAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): ModifyAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyAutoSnapshotPolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyAutoSnapshotPolicy(request: ModifyAutoSnapshotPolicyRequest): ModifyAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteAutoSnapshotPolicyRequest = {
  autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
}

model DeleteAutoSnapshotPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAutoSnapshotPolicyWithOptions(request: DeleteAutoSnapshotPolicyRequest, runtime: Util.RuntimeOptions): DeleteAutoSnapshotPolicyResponse {
  Util.validateModel(request);
  return doRequest('DeleteAutoSnapshotPolicy', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteAutoSnapshotPolicy(request: DeleteAutoSnapshotPolicyRequest): DeleteAutoSnapshotPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoSnapshotPolicyWithOptions(request, runtime);
}

model DeleteSnapshotRequest = {
  snapshotId: string(name='SnapshotId', description='snapshotId'),
}

model DeleteSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteSnapshotWithOptions(request: DeleteSnapshotRequest, runtime: Util.RuntimeOptions): DeleteSnapshotResponse {
  Util.validateModel(request);
  return doRequest('DeleteSnapshot', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteSnapshot(request: DeleteSnapshotRequest): DeleteSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSnapshotWithOptions(request, runtime);
}

model CreateSnapshotRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  snapshotName?: string(name='SnapshotName', description='snapshotName'),
  description?: string(name='Description', description='description'),
  retentionDays?: integer(name='RetentionDays', description='retentionDays'),
}

model CreateSnapshotResponse = {
  requestId: string(name='RequestId', description='requestId'),
  snapshotId: string(name='SnapshotId', description='data.snapshotId'),
}

async function createSnapshotWithOptions(request: CreateSnapshotRequest, runtime: Util.RuntimeOptions): CreateSnapshotResponse {
  Util.validateModel(request);
  return doRequest('CreateSnapshot', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createSnapshot(request: CreateSnapshotRequest): CreateSnapshotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSnapshotWithOptions(request, runtime);
}

model DescribeSnapshotsRequest = {
  fileSystemType: string(name='FileSystemType', description='fileSystemType'),
  fileSystemId?: string(name='FileSystemId', description='volume'),
  snapshotIds?: string(name='SnapshotIds', description='snapshotIds'),
  snapshotName?: string(name='SnapshotName', description='snapshotName'),
  snapshotType?: string(name='SnapshotType', description='snapshotType'),
  status?: string(name='Status', description='status'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeSnapshotsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  snapshots: {
    snapshot: [
      {
        createTime: string(name='CreateTime', description='createTime'),
        description: string(name='Description', description='description'),
        progress: string(name='Progress', description='progress'),
        remainTime: integer(name='RemainTime', description='remainTime'),
        retentionDays: integer(name='RetentionDays', description='retentionDays'),
        snapshotId: string(name='SnapshotId', description='snapshotId'),
        snapshotName: string(name='SnapshotName', description='snapshotName'),
        sourceFileSystemId: string(name='SourceFileSystemId', description='sourceFileSystemId'),
        sourceFileSystemSize: long(name='SourceFileSystemSize', description='sourceFileSystemSize'),
        status: string(name='Status', description='status'),
        encryptType: integer(name='EncryptType', description='encryptType'),
        sourceFileSystemVersion: string(name='SourceFileSystemVersion', description='sourceFileSystemVersion'),
      }
    ](name='Snapshot', description='Snapshot'),
  }(name='Snapshots', description='data'),
}

async function describeSnapshotsWithOptions(request: DescribeSnapshotsRequest, runtime: Util.RuntimeOptions): DescribeSnapshotsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSnapshots', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeSnapshots(request: DescribeSnapshotsRequest): DescribeSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSnapshotsWithOptions(request, runtime);
}

model DescribeZonesRequest = {
  regionId: string(name='RegionId', description='region'),
}

model DescribeZonesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  zones: {
    zone: [
      {
        zoneId: string(name='ZoneId', description='zoneId'),
        capacity: {
          protocol: [ string ](name='Protocol', description='Protocol'),
        }(name='Capacity', description='capacity'),
        performance: {
          protocol: [ string ](name='Protocol', description='Protocol'),
        }(name='Performance', description='performance'),
      }
    ](name='Zone', description='Zone'),
  }(name='Zones', description='data'),
}

async function describeZonesWithOptions(request: DescribeZonesRequest, runtime: Util.RuntimeOptions): DescribeZonesResponse {
  Util.validateModel(request);
  return doRequest('DescribeZones', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeZones(request: DescribeZonesRequest): DescribeZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeZonesWithOptions(request, runtime);
}

model CreateAccessGroupRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  accessGroupType: string(name='AccessGroupType', description='accessGroupType'),
  description?: string(name='Description', description='description'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model CreateAccessGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  accessGroupName: string(name='AccessGroupName', description='data'),
}

async function createAccessGroupWithOptions(request: CreateAccessGroupRequest, runtime: Util.RuntimeOptions): CreateAccessGroupResponse {
  Util.validateModel(request);
  return doRequest('CreateAccessGroup', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createAccessGroup(request: CreateAccessGroupRequest): CreateAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessGroupWithOptions(request, runtime);
}

model CreateMountTargetRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  networkType: string(name='NetworkType', description='netWorkType'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  securityGroupId?: string(name='SecurityGroupId', description='securityGroupId'),
}

model CreateMountTargetResponse = {
  requestId: string(name='RequestId', description='requestId'),
  mountTargetDomain: string(name='MountTargetDomain', description='data'),
}

async function createMountTargetWithOptions(request: CreateMountTargetRequest, runtime: Util.RuntimeOptions): CreateMountTargetResponse {
  Util.validateModel(request);
  return doRequest('CreateMountTarget', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createMountTarget(request: CreateMountTargetRequest): CreateMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMountTargetWithOptions(request, runtime);
}

model CreateFileSystemRequest = {
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
  chargeType?: string(name='ChargeType', description='bizType'),
  duration?: integer(name='Duration', description='duration'),
  capacity?: long(name='Capacity', description='capacity'),
  bandwidth?: long(name='Bandwidth', description='bandwidth'),
  storageType: string(name='StorageType', description='volumeType'),
  zoneId?: string(name='ZoneId', description='avaliableZone'),
  protocolType: string(name='ProtocolType', description='protocolType'),
  encryptType?: integer(name='EncryptType', description='encryptType'),
  snapshotId?: string(name='SnapshotId', description='snapshotId'),
  vpcId?: string(name='VpcId', description='vpcId'),
  VSwitchId?: string(name='VSwitchId', description='vswitchId'),
  description?: string(name='Description', description='volumeDesc'),
  clientToken?: string(name='ClientToken', description='clientToken'),
  dryRun?: boolean(name='DryRun', description='dryRun'),
}

model CreateFileSystemResponse = {
  requestId: string(name='RequestId', description='requestId'),
  fileSystemId: string(name='FileSystemId', description='data'),
}

async function createFileSystemWithOptions(request: CreateFileSystemRequest, runtime: Util.RuntimeOptions): CreateFileSystemResponse {
  Util.validateModel(request);
  return doRequest('CreateFileSystem', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createFileSystem(request: CreateFileSystemRequest): CreateFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFileSystemWithOptions(request, runtime);
}

model CreateAccessRuleRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  sourceCidrIp: string(name='SourceCidrIp', description='sourceCidrIp'),
  RWAccessType?: string(name='RWAccessType', description='policy'),
  userAccessType?: string(name='UserAccessType', description='squashType'),
  priority?: integer(name='Priority', description='priority'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model CreateAccessRuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  accessRuleId: string(name='AccessRuleId', description='data'),
}

async function createAccessRuleWithOptions(request: CreateAccessRuleRequest, runtime: Util.RuntimeOptions): CreateAccessRuleResponse {
  Util.validateModel(request);
  return doRequest('CreateAccessRule', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function createAccessRule(request: CreateAccessRuleRequest): CreateAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccessRuleWithOptions(request, runtime);
}

model DescribeAccessRulesRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  accessRuleId?: string(name='AccessRuleId', description='ruleId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model DescribeAccessRulesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  accessRules: {
    accessRule: [
      {
        sourceCidrIp: string(name='SourceCidrIp', description='sourceCidrIp'),
        priority: integer(name='Priority', description='priority'),
        accessRuleId: string(name='AccessRuleId', description='ruleId'),
        RWAccess: string(name='RWAccess', description='policy'),
        userAccess: string(name='UserAccess', description='squashType'),
      }
    ](name='AccessRule', description='AccessRule'),
  }(name='AccessRules', description='data'),
}

async function describeAccessRulesWithOptions(request: DescribeAccessRulesRequest, runtime: Util.RuntimeOptions): DescribeAccessRulesResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccessRules', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeAccessRules(request: DescribeAccessRulesRequest): DescribeAccessRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessRulesWithOptions(request, runtime);
}

model DescribeAccessGroupsRequest = {
  accessGroupName?: string(name='AccessGroupName', description='accessGroupName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  useUTCDateTime?: boolean(name='UseUTCDateTime', description='useUTCDateTime'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model DescribeAccessGroupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  accessGroups: {
    accessGroup: [
      {
        accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
        accessGroupType: string(name='AccessGroupType', description='accessGroupType'),
        ruleCount: integer(name='RuleCount', description='ruleCount'),
        mountTargetCount: integer(name='MountTargetCount', description='mountTargetCount'),
        description: string(name='Description', description='description'),
        createTime: string(name='CreateTime', description='createTime'),
      }
    ](name='AccessGroup', description='AccessGroup'),
  }(name='AccessGroups', description='data'),
}

async function describeAccessGroupsWithOptions(request: DescribeAccessGroupsRequest, runtime: Util.RuntimeOptions): DescribeAccessGroupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccessGroups', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeAccessGroups(request: DescribeAccessGroupsRequest): DescribeAccessGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccessGroupsWithOptions(request, runtime);
}

model DeleteMountTargetRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  mountTargetDomain: string(name='MountTargetDomain', description='domainName'),
}

model DeleteMountTargetResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteMountTargetWithOptions(request: DeleteMountTargetRequest, runtime: Util.RuntimeOptions): DeleteMountTargetResponse {
  Util.validateModel(request);
  return doRequest('DeleteMountTarget', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteMountTarget(request: DeleteMountTargetRequest): DeleteMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMountTargetWithOptions(request, runtime);
}

model DeleteFileSystemRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
}

model DeleteFileSystemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteFileSystemWithOptions(request: DeleteFileSystemRequest, runtime: Util.RuntimeOptions): DeleteFileSystemResponse {
  Util.validateModel(request);
  return doRequest('DeleteFileSystem', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteFileSystem(request: DeleteFileSystemRequest): DeleteFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFileSystemWithOptions(request, runtime);
}

model DeleteAccessRuleRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  accessRuleId: string(name='AccessRuleId', description='ruleId'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model DeleteAccessRuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAccessRuleWithOptions(request: DeleteAccessRuleRequest, runtime: Util.RuntimeOptions): DeleteAccessRuleResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccessRule', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteAccessRule(request: DeleteAccessRuleRequest): DeleteAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessRuleWithOptions(request, runtime);
}

model DeleteAccessGroupRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model DeleteAccessGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAccessGroupWithOptions(request: DeleteAccessGroupRequest, runtime: Util.RuntimeOptions): DeleteAccessGroupResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccessGroup', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function deleteAccessGroup(request: DeleteAccessGroupRequest): DeleteAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccessGroupWithOptions(request, runtime);
}

model ModifyAccessRuleRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  accessRuleId: string(name='AccessRuleId', description='ruleId'),
  sourceCidrIp?: string(name='SourceCidrIp', description='sourceCidrIp'),
  RWAccessType?: string(name='RWAccessType', description='policy'),
  userAccessType?: string(name='UserAccessType', description='squashType'),
  priority?: integer(name='Priority', description='priority'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model ModifyAccessRuleResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccessRuleWithOptions(request: ModifyAccessRuleRequest, runtime: Util.RuntimeOptions): ModifyAccessRuleResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccessRule', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyAccessRule(request: ModifyAccessRuleRequest): ModifyAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessRuleWithOptions(request, runtime);
}

model ModifyAccessGroupRequest = {
  accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
  description?: string(name='Description', description='description'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model ModifyAccessGroupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccessGroupWithOptions(request: ModifyAccessGroupRequest, runtime: Util.RuntimeOptions): ModifyAccessGroupResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccessGroup', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyAccessGroup(request: ModifyAccessGroupRequest): ModifyAccessGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccessGroupWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='regionId'),
        localName: string(name='LocalName', description='localName'),
        regionEndpoint: string(name='RegionEndpoint', description='regionEndpoint'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeMountTargetsRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  mountTargetDomain?: string(name='MountTargetDomain', description='domainName'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeMountTargetsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  mountTargets: {
    mountTarget: [
      {
        mountTargetDomain: string(name='MountTargetDomain', description='domainName'),
        networkType: string(name='NetworkType', description='networkType'),
        vpcId: string(name='VpcId', description='vpcId'),
        vswId: string(name='VswId', description='vSwitchId'),
        accessGroup: string(name='AccessGroup', description='accessGroupName'),
        status: string(name='Status', description='status'),
      }
    ](name='MountTarget', description='MountTarget'),
  }(name='MountTargets', description='data'),
}

async function describeMountTargetsWithOptions(request: DescribeMountTargetsRequest, runtime: Util.RuntimeOptions): DescribeMountTargetsResponse {
  Util.validateModel(request);
  return doRequest('DescribeMountTargets', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeMountTargets(request: DescribeMountTargetsRequest): DescribeMountTargetsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMountTargetsWithOptions(request, runtime);
}

model DescribeFileSystemsRequest = {
  fileSystemId?: string(name='FileSystemId', description='volume'),
  fileSystemType?: string(name='FileSystemType', description='fileSystemType'),
  vpcId?: string(name='VpcId', description='vpcId'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeFileSystemsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalCount: integer(name='TotalCount', description='totalCount'),
  pageSize: integer(name='PageSize', description='pageSize'),
  pageNumber: integer(name='PageNumber', description='pageNumber'),
  fileSystems: {
    fileSystem: [
      {
        fileSystemId: string(name='FileSystemId', description='fileSystemName'),
        description: string(name='Description', description='fileSystemDesc'),
        createTime: string(name='CreateTime', description='createTimeStr'),
        expiredTime: string(name='ExpiredTime', description='expireTime'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        protocolType: string(name='ProtocolType', description='protocolType'),
        storageType: string(name='StorageType', description='storageType'),
        fileSystemType: string(name='FileSystemType', description='fileSystemType'),
        encryptType: integer(name='EncryptType', description='encryptType'),
        meteredSize: long(name='MeteredSize', description='meteredSize'),
        meteredIASize: long(name='MeteredIASize', description='meteredIASize'),
        bandwidth: long(name='Bandwidth', description='bandwidth'),
        capacity: long(name='Capacity', description='capacity'),
        autoSnapshotPolicyId: string(name='AutoSnapshotPolicyId', description='autoSnapshotPolicyId'),
        status: string(name='Status', description='status'),
        chargeType: string(name='ChargeType', description='bizType'),
        mountTargetCountLimit: long(name='MountTargetCountLimit', description='targetLimit'),
        nasNamespaceId: string(name='NasNamespaceId', description='nasNamespaceId'),
        KMSKeyId: string(name='KMSKeyId', description='kmsKeyId'),
        version: string(name='Version', description='version'),
        mountTargets: {
          mountTarget: [
            {
              mountTargetDomain: string(name='MountTargetDomain', description='domainName'),
              networkType: string(name='NetworkType', description='networkType'),
              vpcId: string(name='VpcId', description='vpcId'),
              vswId: string(name='VswId', description='vSwitchId'),
              accessGroupName: string(name='AccessGroupName', description='accessGroupName'),
              status: string(name='Status', description='status'),
            }
          ](name='MountTarget', description='MountTarget'),
        }(name='MountTargets', description='mountTargets'),
        packages: {
          package: [
            {
              packageId: string(name='PackageId', description='packageId'),
              packageType: string(name='PackageType', description='packageType'),
              size: long(name='Size', description='size'),
              startTime: string(name='StartTime', description='startTimeStr'),
              expiredTime: string(name='ExpiredTime', description='endTimeStr'),
            }
          ](name='Package', description='Package'),
        }(name='Packages', description='packages'),
        ldap: {
          bindDN: string(name='BindDN', description='bindDN'),
          URI: string(name='URI', description='uri'),
          searchBase: string(name='SearchBase', description='searchBase'),
        }(name='Ldap', description='ldap'),
        supportedFeatures: {
          supportedFeature: [ string ](name='SupportedFeature', description='SupportedFeature'),
        }(name='SupportedFeatures', description='supportedFeatures'),
      }
    ](name='FileSystem', description='FileSystem'),
  }(name='FileSystems', description='data'),
}

async function describeFileSystemsWithOptions(request: DescribeFileSystemsRequest, runtime: Util.RuntimeOptions): DescribeFileSystemsResponse {
  Util.validateModel(request);
  return doRequest('DescribeFileSystems', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function describeFileSystems(request: DescribeFileSystemsRequest): DescribeFileSystemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFileSystemsWithOptions(request, runtime);
}

model ModifyMountTargetRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  mountTargetDomain: string(name='MountTargetDomain', description='domainName'),
  accessGroupName?: string(name='AccessGroupName', description='accessGroupName'),
  status?: string(name='Status', description='status'),
}

model ModifyMountTargetResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyMountTargetWithOptions(request: ModifyMountTargetRequest, runtime: Util.RuntimeOptions): ModifyMountTargetResponse {
  Util.validateModel(request);
  return doRequest('ModifyMountTarget', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyMountTarget(request: ModifyMountTargetRequest): ModifyMountTargetResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMountTargetWithOptions(request, runtime);
}

model ModifyFileSystemRequest = {
  fileSystemId: string(name='FileSystemId', description='volume'),
  description?: string(name='Description', description='volumeDesc'),
}

model ModifyFileSystemResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyFileSystemWithOptions(request: ModifyFileSystemRequest, runtime: Util.RuntimeOptions): ModifyFileSystemResponse {
  Util.validateModel(request);
  return doRequest('ModifyFileSystem', 'HTTPS', 'POST', '2017-06-26', 'AK', null, request, runtime);
}

async function modifyFileSystem(request: ModifyFileSystemRequest): ModifyFileSystemResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFileSystemWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
