import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'polardb.aliyuncs.com',
    cn-beijing = 'polardb.aliyuncs.com',
    cn-hangzhou = 'polardb.aliyuncs.com',
    cn-shanghai = 'polardb.aliyuncs.com',
    cn-shenzhen = 'polardb.aliyuncs.com',
    cn-hongkong = 'polardb.aliyuncs.com',
    ap-southeast-1 = 'polardb.aliyuncs.com',
    us-west-1 = 'polardb.aliyuncs.com',
    cn-hangzhou-finance = 'polardb.aliyuncs.com',
    cn-shanghai-finance-1 = 'polardb.aliyuncs.com',
    us-east-1 = 'polardb.ap-northeast-1.aliyuncs.com',
    cn-shenzhen-finance-1 = 'polardb.aliyuncs.com',
    cn-north-2-gov-1 = 'polardb.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('polardb', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DescribeDBClusterAuditLogCollectorRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterAuditLogCollectorResponse = {
  collectorStatus: string(name='CollectorStatus', description='data.configValue'),
  requestId: string(name='RequestId', description='requestId'),
}

async function describeDBClusterAuditLogCollectorWithOptions(request: DescribeDBClusterAuditLogCollectorRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAuditLogCollectorResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAuditLogCollector', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterAuditLogCollector(request: DescribeDBClusterAuditLogCollectorRequest): DescribeDBClusterAuditLogCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAuditLogCollectorWithOptions(request, runtime);
}

model ModifyDBClusterAuditLogCollectorRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  collectorStatus: string(name='CollectorStatus', description='status'),
}

model ModifyDBClusterAuditLogCollectorResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterAuditLogCollectorWithOptions(request: ModifyDBClusterAuditLogCollectorRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAuditLogCollectorResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterAuditLogCollector', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterAuditLogCollector(request: ModifyDBClusterAuditLogCollectorRequest): ModifyDBClusterAuditLogCollectorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAuditLogCollectorWithOptions(request, runtime);
}

model DescribeDetachedBackupsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  backupId?: string(name='BackupId', description='backupId'),
  backupStatus?: string(name='BackupStatus', description='backupStatus'),
  backupMode?: string(name='BackupMode', description='backupMode'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeDetachedBackupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: string(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: string(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: string(name='PageRecordCount', description='data.backupsetNumbers'),
  items: {
    backup: [
      {
        backupId: string(name='BackupId', description='backupSetId'),
        DBClusterId: string(name='DBClusterId', description='dbInstanceId'),
        backupStatus: string(name='BackupStatus', description='backupSetStatus'),
        backupStartTime: string(name='BackupStartTime', description='backupStartTime'),
        backupEndTime: string(name='BackupEndTime', description='backupEndTime'),
        backupType: string(name='BackupType', description='backupType'),
        backupMode: string(name='BackupMode', description='jobMode'),
        backupMethod: string(name='BackupMethod', description='backupMethod'),
        storeStatus: string(name='StoreStatus', description='storeStatus'),
        backupSetSize: string(name='BackupSetSize', description='backupSetSize'),
        consistentTime: string(name='ConsistentTime', description='consistentTime'),
        backupsLevel: string(name='BackupsLevel', description='backupsLevel'),
        isAvail: string(name='IsAvail', description='isAvail'),
      }
    ](name='Backup', description='Backup'),
  }(name='Items', description='data.backupsetItems'),
}

async function describeDetachedBackupsWithOptions(request: DescribeDetachedBackupsRequest, runtime: Util.RuntimeOptions): DescribeDetachedBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDetachedBackups', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDetachedBackups(request: DescribeDetachedBackupsRequest): DescribeDetachedBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDetachedBackupsWithOptions(request, runtime);
}

model DescribeDBClustersWithBackupsRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterIds?: string(name='DBClusterIds', description='dbClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription', description='dbClusterDescription'),
  DBType?: string(name='DBType', description='dbType'),
  isDeleted?: integer(name='IsDeleted', description='isDeleted'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  DBVersion?: string(name='DBVersion', description='dbVersion'),
}

model DescribeDBClustersWithBackupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.pageRecordCount'),
  items: {
    DBCluster: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
        payType: string(name='PayType', description='payType'),
        DBClusterNetworkType: string(name='DBClusterNetworkType', description='clusterNetworkType'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        expireTime: string(name='ExpireTime', description='expireTime'),
        expired: string(name='Expired', description='expired'),
        DBClusterStatus: string(name='DBClusterStatus', description='dbClusterStatus'),
        engine: string(name='Engine', description='engine'),
        DBType: string(name='DBType', description='dbType'),
        DBVersion: string(name='DBVersion', description='dbVersion'),
        lockMode: string(name='LockMode', description='lockMode'),
        deletionLock: integer(name='DeletionLock', description='data.deletionLock'),
        createTime: string(name='CreateTime', description='gmtCreated'),
        vpcId: string(name='VpcId', description='vpcId'),
        isDeleted: integer(name='IsDeleted', description='isDeleted'),
        deletedTime: string(name='DeletedTime', description='deletedTime'),
        DBNodeClass: string(name='DBNodeClass', description='rwInstanceClass'),
      }
    ](name='DBCluster', description='DBCluster'),
  }(name='Items', description='data.items'),
}

async function describeDBClustersWithBackupsWithOptions(request: DescribeDBClustersWithBackupsRequest, runtime: Util.RuntimeOptions): DescribeDBClustersWithBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClustersWithBackups', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClustersWithBackups(request: DescribeDBClustersWithBackupsRequest): DescribeDBClustersWithBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithBackupsWithOptions(request, runtime);
}

model DescribeLogBackupPolicyRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeLogBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  enableBackupLog: integer(name='EnableBackupLog', description='data.enableBackupLog'),
  logBackupRetentionPeriod: integer(name='LogBackupRetentionPeriod', description='data.logBackupRetentionPeriod'),
}

async function describeLogBackupPolicyWithOptions(request: DescribeLogBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeLogBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeLogBackupPolicy', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeLogBackupPolicy(request: DescribeLogBackupPolicyRequest): DescribeLogBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogBackupPolicyWithOptions(request, runtime);
}

model ModifyLogBackupPolicyRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  logBackupRetentionPeriod?: string(name='LogBackupRetentionPeriod', description='logBackupRetentionPeriod'),
}

model ModifyLogBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyLogBackupPolicyWithOptions(request: ModifyLogBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyLogBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyLogBackupPolicy', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyLogBackupPolicy(request: ModifyLogBackupPolicyRequest): ModifyLogBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyLogBackupPolicyWithOptions(request, runtime);
}

model ModifyDBClusterMonitorRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  period: string(name='Period', description='period'),
}

model ModifyDBClusterMonitorResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterMonitorWithOptions(request: ModifyDBClusterMonitorRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMonitorResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterMonitor', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterMonitor(request: ModifyDBClusterMonitorRequest): ModifyDBClusterMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMonitorWithOptions(request, runtime);
}

model DescribeDBClusterMonitorRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterMonitorResponse = {
  period: string(name='Period', description='data.configValue'),
  requestId: string(name='RequestId', description='requestId'),
}

async function describeDBClusterMonitorWithOptions(request: DescribeDBClusterMonitorRequest, runtime: Util.RuntimeOptions): DescribeDBClusterMonitorResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterMonitor', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterMonitor(request: DescribeDBClusterMonitorRequest): DescribeDBClusterMonitorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterMonitorWithOptions(request, runtime);
}

model DescribeDBClusterAvailableResourcesRequest = {
  payType: string(name='PayType', description='payType'),
  DBType?: string(name='DBType', description='dbType'),
  DBVersion?: string(name='DBVersion', description='dbVersion'),
  DBNodeClass?: string(name='DBNodeClass', description='dbInstanceClass'),
  regionId?: string(name='RegionId', description='regionId'),
  zoneId?: string(name='ZoneId', description='zoneId'),
}

model DescribeDBClusterAvailableResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  availableZones: [
    {
      regionId: string(name='RegionId', description='regionId'),
      zoneId: string(name='ZoneId', description='zoneId'),
      supportedEngines: [
        {
          engine: string(name='Engine', description='engine'),
          availableResources: [
            {
              DBNodeClass: string(name='DBNodeClass', description='dbNodeClass'),
              category: string(name='Category', description='category'),
            }
          ](name='AvailableResources', description='availableResources'),
        }
      ](name='SupportedEngines', description='supportEngines'),
    }
  ](name='AvailableZones', description='data.availableZones'),
}

async function describeDBClusterAvailableResourcesWithOptions(request: DescribeDBClusterAvailableResourcesRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAvailableResourcesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAvailableResources', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterAvailableResources(request: DescribeDBClusterAvailableResourcesRequest): DescribeDBClusterAvailableResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAvailableResourcesWithOptions(request, runtime);
}

model DescribeBackupLogsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeBackupLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: string(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: string(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: string(name='PageRecordCount', description='data.backupLogNumbers'),
  items: {
    backupLog: [
      {
        backupLogId: string(name='BackupLogId', description='backupLogId'),
        backupLogName: string(name='BackupLogName', description='logName'),
        backupLogStartTime: string(name='BackupLogStartTime', description='logStartTime'),
        backupLogEndTime: string(name='BackupLogEndTime', description='logEndTime'),
        backupLogSize: string(name='BackupLogSize', description='backupLogSize'),
        downloadLink: string(name='DownloadLink', description='logDownloadURL'),
        intranetDownloadLink: string(name='IntranetDownloadLink', description='logIntranetDownloadURL'),
        linkExpiredTime: string(name='LinkExpiredTime', description='urlExpireTime'),
      }
    ](name='BackupLog', description='BackupLog'),
  }(name='Items', description='data.backupLogItems'),
}

async function describeBackupLogsWithOptions(request: DescribeBackupLogsRequest, runtime: Util.RuntimeOptions): DescribeBackupLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupLogs', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeBackupLogs(request: DescribeBackupLogsRequest): DescribeBackupLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupLogsWithOptions(request, runtime);
}

model ModifyDBClusterSSLRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  SSLEnabled: string(name='SSLEnabled', description='sslEnabled'),
  DBEndpointId?: string(name='DBEndpointId', description='endpointId'),
  netType?: string(name='NetType', description='netType'),
}

model ModifyDBClusterSSLResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterSSLWithOptions(request: ModifyDBClusterSSLRequest, runtime: Util.RuntimeOptions): ModifyDBClusterSSLResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterSSL', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterSSL(request: ModifyDBClusterSSLRequest): ModifyDBClusterSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterSSLWithOptions(request, runtime);
}

model DescribeDBClusterSSLRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterSSLResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: [
    {
      DBEndpointId: string(name='DBEndpointId', description='endpointName'),
      SSLEnabled: string(name='SSLEnabled', description='sslEnabled'),
      SSLConnectionString: string(name='SSLConnectionString', description='certCommonName'),
      SSLExpireTime: string(name='SSLExpireTime', description='sslExpiredTime'),
    }
  ](name='Items', description='data.certList'),
}

async function describeDBClusterSSLWithOptions(request: DescribeDBClusterSSLRequest, runtime: Util.RuntimeOptions): DescribeDBClusterSSLResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterSSL', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterSSL(request: DescribeDBClusterSSLRequest): DescribeDBClusterSSLResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterSSLWithOptions(request, runtime);
}

model DescribeDBClusterMigrationRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterMigrationResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  sourceRDSDBInstanceId: string(name='SourceRDSDBInstanceId', description='data.sourceDBInstanceName'),
  migrationStatus: string(name='MigrationStatus', description='data.migrationStatus'),
  topologies: string(name='Topologies', description='data.syncDirection'),
  delayedSeconds: integer(name='DelayedSeconds', description='data.replicationDelay'),
  expiredTime: string(name='ExpiredTime', description='data.syncDeadline'),
  rdsReadWriteMode: string(name='RdsReadWriteMode', description='data.srcReadWriteMode'),
  DBClusterReadWriteMode: string(name='DBClusterReadWriteMode', description='data.dstReadWriteMode'),
  comment: string(name='Comment', description='data.comment'),
  DBClusterEndpointList: [
    {
      DBEndpointId: string(name='DBEndpointId', description='endpointId'),
      endpointType: string(name='EndpointType', description='endpointType'),
      addressItems: [
        {
          connectionString: string(name='ConnectionString', description='connectionString'),
          IPAddress: string(name='IPAddress', description='ipAddress'),
          netType: string(name='NetType', description='netType'),
          port: string(name='Port', description='port'),
          VPCId: string(name='VPCId', description='vpcId'),
          vSwitchId: string(name='VSwitchId', description='vswitchId'),
        }
      ](name='AddressItems', description='netInfoItems'),
    }
  ](name='DBClusterEndpointList', description='data.dstEndpointList'),
  rdsEndpointList: [
    {
      DBEndpointId: string(name='DBEndpointId', description='endpointId'),
      endpointType: string(name='EndpointType', description='endpointType'),
      addressItems: [
        {
          connectionString: string(name='ConnectionString', description='connectionString'),
          IPAddress: string(name='IPAddress', description='ipAddress'),
          netType: string(name='NetType', description='netType'),
          port: string(name='Port', description='port'),
          VPCId: string(name='VPCId', description='vpcId'),
          vSwitchId: string(name='VSwitchId', description='vswitchId'),
        }
      ](name='AddressItems', description='netInfoItems'),
    }
  ](name='RdsEndpointList', description='data.srcEndpointList'),
}

async function describeDBClusterMigrationWithOptions(request: DescribeDBClusterMigrationRequest, runtime: Util.RuntimeOptions): DescribeDBClusterMigrationResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterMigration', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterMigration(request: DescribeDBClusterMigrationRequest): DescribeDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterMigrationWithOptions(request, runtime);
}

model CloseDBClusterMigrationRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  continueEnableBinlog?: boolean(name='ContinueEnableBinlog', description='continueEnableBinlog'),
}

model CloseDBClusterMigrationResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function closeDBClusterMigrationWithOptions(request: CloseDBClusterMigrationRequest, runtime: Util.RuntimeOptions): CloseDBClusterMigrationResponse {
  Util.validateModel(request);
  return doRequest('CloseDBClusterMigration', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function closeDBClusterMigration(request: CloseDBClusterMigrationRequest): CloseDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return closeDBClusterMigrationWithOptions(request, runtime);
}

model ModifyDBClusterMigrationRequest = {
  securityToken?: string(name='SecurityToken', description='stsSecurityToken'),
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  sourceRDSDBInstanceId: string(name='SourceRDSDBInstanceId', description='sourceDBInstanceId'),
  newMasterInstanceId: string(name='NewMasterInstanceId', description='newMasterInstanceId'),
  swapConnectionString?: string(name='SwapConnectionString', description='swapConnectionString'),
}

model ModifyDBClusterMigrationResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterMigrationWithOptions(request: ModifyDBClusterMigrationRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMigrationResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterMigration', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterMigration(request: ModifyDBClusterMigrationRequest): ModifyDBClusterMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMigrationWithOptions(request, runtime);
}

model ModifyAutoRenewAttributeRequest = {
  DBClusterIds: string(name='DBClusterIds', description='dbClusterIds'),
  regionId: string(name='RegionId', description='regionId'),
  renewalStatus?: string(name='RenewalStatus', description='renewalStatus'),
  duration?: string(name='Duration', description='duration'),
  periodUnit?: string(name='PeriodUnit', description='periodUnit'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model ModifyAutoRenewAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAutoRenewAttributeWithOptions(request: ModifyAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): ModifyAutoRenewAttributeResponse {
  Util.validateModel(request);
  return doRequest('ModifyAutoRenewAttribute', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyAutoRenewAttribute(request: ModifyAutoRenewAttributeRequest): ModifyAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAutoRenewAttributeWithOptions(request, runtime);
}

model ModifyDBNodeClassRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  modifyType: string(name='ModifyType', description='modifyType'),
  DBNodeTargetClass: string(name='DBNodeTargetClass', description='dbNodeClass'),
  clientToken?: string(name='ClientToken', description='token'),
}

model ModifyDBNodeClassResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function modifyDBNodeClassWithOptions(request: ModifyDBNodeClassRequest, runtime: Util.RuntimeOptions): ModifyDBNodeClassResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBNodeClass', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBNodeClass(request: ModifyDBNodeClassRequest): ModifyDBNodeClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBNodeClassWithOptions(request, runtime);
}

model DescribeAutoRenewAttributeRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterIds?: string(name='DBClusterIds', description='dbClusterIds'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeAutoRenewAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.pageRecordCount'),
  items: {
    autoRenewAttribute: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        regionId: string(name='RegionId', description='regionId'),
        autoRenewEnabled: boolean(name='AutoRenewEnabled', description='autoRenewal'),
        duration: integer(name='Duration', description='duration'),
        periodUnit: string(name='PeriodUnit', description='periodUnit'),
        renewalStatus: string(name='RenewalStatus', description='renewalStatus'),
      }
    ](name='AutoRenewAttribute', description='AutoRenewAttribute'),
  }(name='Items', description='data.items'),
}

async function describeAutoRenewAttributeWithOptions(request: DescribeAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeAutoRenewAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeAutoRenewAttribute', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeAutoRenewAttribute(request: DescribeAutoRenewAttributeRequest): DescribeAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoRenewAttributeWithOptions(request, runtime);
}

model CreateDBNodesRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBNode: [
    {
      targetClass: string(name='TargetClass', description='dbNodeClass'),
      zoneId: string(name='ZoneId', description='zoneId'),
    }
  ](name='DBNode', description='dbNodes'),
  clientToken?: string(name='ClientToken', description='token'),
}

model CreateDBNodesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  orderId: string(name='OrderId', description='data.orderId'),
  DBNodeIds: {
    DBNodeId: [ string ](name='DBNodeId', description='DBNodeId'),
  }(name='DBNodeIds', description='data.dbNodeIds'),
}

async function createDBNodesWithOptions(request: CreateDBNodesRequest, runtime: Util.RuntimeOptions): CreateDBNodesResponse {
  Util.validateModel(request);
  return doRequest('CreateDBNodes', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createDBNodes(request: CreateDBNodesRequest): CreateDBNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBNodesWithOptions(request, runtime);
}

model DeleteDBNodesRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBNodeId: [ string ](name='DBNodeId', description='dbNodeIds'),
  clientToken?: string(name='ClientToken', description='token'),
}

model DeleteDBNodesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  orderId: string(name='OrderId', description='data.orderId'),
}

async function deleteDBNodesWithOptions(request: DeleteDBNodesRequest, runtime: Util.RuntimeOptions): DeleteDBNodesResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBNodes', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteDBNodes(request: DeleteDBNodesRequest): DeleteDBNodesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBNodesWithOptions(request, runtime);
}

model UntagResourcesRequest = {
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  tagKey?: [ string ](name='TagKey', description='tagKeys'),
  all?: boolean(name='All', description='all'),
}

model UntagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  return doRequest('UntagResources', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model TagResourcesRequest = {
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId: [ string ](name='ResourceId', description='resourceIds'),
  tag: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
}

model TagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  return doRequest('TagResources', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model ListTagResourcesRequest = {
  regionId: string(name='RegionId', description='regionId'),
  resourceType: string(name='ResourceType', description='resourceType'),
  resourceId?: [ string ](name='ResourceId', description='resourceIds'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  nextToken?: string(name='NextToken', description='nextToken'),
}

model ListTagResourcesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  nextToken: string(name='NextToken', description='data.nextToken'),
  tagResources: {
    tagResource: [
      {
        tagKey: string(name='TagKey', description='key'),
        tagValue: string(name='TagValue', description='value'),
        resourceType: string(name='ResourceType', description='resourceType'),
        resourceId: string(name='ResourceId', description='resourceId'),
      }
    ](name='TagResource', description='TagResource'),
  }(name='TagResources', description='data.resources'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  return doRequest('ListTagResources', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyDBEndpointAddressRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId: string(name='DBEndpointId', description='endpointId'),
  netType: string(name='NetType', description='netType'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
  privateZoneAddressPrefix?: string(name='PrivateZoneAddressPrefix', description='privateZoneAddressPrefix'),
  privateZoneName?: string(name='PrivateZoneName', description='privateZoneName'),
  port?: string(name='Port', description='port'),
}

model ModifyDBEndpointAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBEndpointAddressWithOptions(request: ModifyDBEndpointAddressRequest, runtime: Util.RuntimeOptions): ModifyDBEndpointAddressResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBEndpointAddress', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBEndpointAddress(request: ModifyDBEndpointAddressRequest): ModifyDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBEndpointAddressWithOptions(request, runtime);
}

model ModifyDBDescriptionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBName: string(name='DBName', description='dbName'),
  DBDescription: string(name='DBDescription', description='dbDescription'),
}

model ModifyDBDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBDescriptionWithOptions(request: ModifyDBDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBDescription', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBDescription(request: ModifyDBDescriptionRequest): ModifyDBDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBDescriptionWithOptions(request, runtime);
}

model ModifyDBClusterParametersRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  parameters: string(name='Parameters', description='parameters'),
  effectiveTime?: string(name='EffectiveTime', description='effectiveTime'),
}

model ModifyDBClusterParametersResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterParametersWithOptions(request: ModifyDBClusterParametersRequest, runtime: Util.RuntimeOptions): ModifyDBClusterParametersResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterParameters', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterParameters(request: ModifyDBClusterParametersRequest): ModifyDBClusterParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterParametersWithOptions(request, runtime);
}

model ModifyDBClusterEndpointRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId: string(name='DBEndpointId', description='endpointId'),
  nodes?: string(name='Nodes', description='nodes'),
  readWriteMode?: string(name='ReadWriteMode', description='readWriteMode'),
  autoAddNewNodes?: string(name='AutoAddNewNodes', description='autoAddNewNodes'),
  endpointConfig?: string(name='EndpointConfig', description='endpointConfig'),
}

model ModifyDBClusterEndpointResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterEndpointWithOptions(request: ModifyDBClusterEndpointRequest, runtime: Util.RuntimeOptions): ModifyDBClusterEndpointResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterEndpoint', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterEndpoint(request: ModifyDBClusterEndpointRequest): ModifyDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterEndpointWithOptions(request, runtime);
}

model ModifyAccountPasswordRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  newAccountPassword: string(name='NewAccountPassword', description='accountPassword'),
}

model ModifyAccountPasswordResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyAccountPasswordResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountPassword', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPasswordWithOptions(request, runtime);
}

model DescribeDBClusterPerformanceRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  key: string(name='Key', description='key'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
}

model DescribeDBClusterPerformanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbInstanceId'),
  engine: string(name='Engine', description='data.engine'),
  DBType: string(name='DBType', description='data.dbType'),
  DBVersion: string(name='DBVersion', description='data.dbVersion'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  performanceKeys: {
    performanceItem: [
      {
        DBNodeId: string(name='DBNodeId', description='dbInstanceId'),
        measurement: string(name='Measurement', description='measurement'),
        metricName: string(name='MetricName', description='metricName'),
        points: {
          performanceItemValue: [
            {
              value: string(name='Value', description='value'),
              timestamp: long(name='Timestamp', description='timestamp'),
            }
          ](name='PerformanceItemValue', description='PerformanceItemValue'),
        }(name='Points', description='points'),
      }
    ](name='PerformanceItem', description='PerformanceItem'),
  }(name='PerformanceKeys', description='data.performanceKeys'),
}

async function describeDBClusterPerformanceWithOptions(request: DescribeDBClusterPerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBClusterPerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterPerformance', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterPerformance(request: DescribeDBClusterPerformanceRequest): DescribeDBClusterPerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterPerformanceWithOptions(request, runtime);
}

model DescribeDBClusterParametersRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterParametersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  engine: string(name='Engine', description='data.engine'),
  DBType: string(name='DBType', description='data.dbType'),
  DBVersion: string(name='DBVersion', description='data.dbVersion'),
  runningParameters: {
    parameter: [
      {
        parameterName: string(name='ParameterName', description='parameterName'),
        dataType: string(name='DataType', description='unit'),
        defaultParameterValue: string(name='DefaultParameterValue', description='defaultParameterValue'),
        parameterValue: string(name='ParameterValue', description='parameterValue'),
        isModifiable: boolean(name='IsModifiable', description='revisable'),
        forceRestart: boolean(name='ForceRestart', description='effective'),
        parameterStatus: string(name='ParameterStatus', description='parameterStatus'),
        checkingCode: string(name='CheckingCode', description='checkingCode'),
        parameterDescription: string(name='ParameterDescription', description='parameterDescription'),
      }
    ](name='Parameter', description='Parameter'),
  }(name='RunningParameters', description='data.runningParameters'),
}

async function describeDBClusterParametersWithOptions(request: DescribeDBClusterParametersRequest, runtime: Util.RuntimeOptions): DescribeDBClusterParametersResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterParameters', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterParameters(request: DescribeDBClusterParametersRequest): DescribeDBClusterParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterParametersWithOptions(request, runtime);
}

model DescribeDBClusterEndpointsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId?: string(name='DBEndpointId', description='endpointId'),
}

model DescribeDBClusterEndpointsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: [
    {
      DBEndpointId: string(name='DBEndpointId', description='endpointId'),
      endpointType: string(name='EndpointType', description='endpointType'),
      nodes: string(name='Nodes', description='nodes'),
      readWriteMode: string(name='ReadWriteMode', description='readWriteMode'),
      autoAddNewNodes: string(name='AutoAddNewNodes', description='autoAddNewNodes'),
      endpointConfig: string(name='EndpointConfig', description='endpointConfig'),
      nodeWithRoles: string(name='NodeWithRoles', description='nodeWithRoles'),
      addressItems: [
        {
          connectionString: string(name='ConnectionString', description='connectionString'),
          IPAddress: string(name='IPAddress', description='ipAddress'),
          netType: string(name='NetType', description='netType'),
          port: string(name='Port', description='port'),
          VPCId: string(name='VPCId', description='vpcId'),
          vSwitchId: string(name='VSwitchId', description='vswitchId'),
          vpcInstanceId: string(name='VpcInstanceId', description='vpcInstanceId'),
          privateZoneConnectionString: string(name='PrivateZoneConnectionString', description='pvtzConnectionString'),
        }
      ](name='AddressItems', description='netInfoItems'),
    }
  ](name='Items', description='data.endpointList'),
}

async function describeDBClusterEndpointsWithOptions(request: DescribeDBClusterEndpointsRequest, runtime: Util.RuntimeOptions): DescribeDBClusterEndpointsResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterEndpoints', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterEndpoints(request: DescribeDBClusterEndpointsRequest): DescribeDBClusterEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterEndpointsWithOptions(request, runtime);
}

model DeleteDBEndpointAddressRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId: string(name='DBEndpointId', description='endpointId'),
  netType: string(name='NetType', description='netType'),
}

model DeleteDBEndpointAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDBEndpointAddressWithOptions(request: DeleteDBEndpointAddressRequest, runtime: Util.RuntimeOptions): DeleteDBEndpointAddressResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBEndpointAddress', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteDBEndpointAddress(request: DeleteDBEndpointAddressRequest): DeleteDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBEndpointAddressWithOptions(request, runtime);
}

model DeleteDBClusterEndpointRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId: string(name='DBEndpointId', description='endpointId'),
}

model DeleteDBClusterEndpointResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDBClusterEndpointWithOptions(request: DeleteDBClusterEndpointRequest, runtime: Util.RuntimeOptions): DeleteDBClusterEndpointResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBClusterEndpoint', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteDBClusterEndpoint(request: DeleteDBClusterEndpointRequest): DeleteDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterEndpointWithOptions(request, runtime);
}

model CreateDBEndpointAddressRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBEndpointId: string(name='DBEndpointId', description='endpointId'),
  connectionStringPrefix?: string(name='ConnectionStringPrefix', description='connectionStringPrefix'),
  netType: string(name='NetType', description='netType'),
}

model CreateDBEndpointAddressResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDBEndpointAddressWithOptions(request: CreateDBEndpointAddressRequest, runtime: Util.RuntimeOptions): CreateDBEndpointAddressResponse {
  Util.validateModel(request);
  return doRequest('CreateDBEndpointAddress', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createDBEndpointAddress(request: CreateDBEndpointAddressRequest): CreateDBEndpointAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBEndpointAddressWithOptions(request, runtime);
}

model CreateDBClusterEndpointRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  endpointType: string(name='EndpointType', description='endpointType'),
  nodes?: string(name='Nodes', description='nodes'),
  readWriteMode?: string(name='ReadWriteMode', description='readWriteMode'),
  autoAddNewNodes?: string(name='AutoAddNewNodes', description='autoAddNewNodes'),
  endpointConfig?: string(name='EndpointConfig', description='endpointConfig'),
  clientToken?: string(name='ClientToken', description='token'),
}

model CreateDBClusterEndpointResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDBClusterEndpointWithOptions(request: CreateDBClusterEndpointRequest, runtime: Util.RuntimeOptions): CreateDBClusterEndpointResponse {
  Util.validateModel(request);
  return doRequest('CreateDBClusterEndpoint', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createDBClusterEndpoint(request: CreateDBClusterEndpointRequest): CreateDBClusterEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterEndpointWithOptions(request, runtime);
}

model RestartDBNodeRequest = {
  DBNodeId: string(name='DBNodeId', description='dbInstanceId'),
}

model RestartDBNodeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function restartDBNodeWithOptions(request: RestartDBNodeRequest, runtime: Util.RuntimeOptions): RestartDBNodeResponse {
  Util.validateModel(request);
  return doRequest('RestartDBNode', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function restartDBNode(request: RestartDBNodeRequest): RestartDBNodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDBNodeWithOptions(request, runtime);
}

model DescribeDBNodePerformanceRequest = {
  DBNodeId: string(name='DBNodeId', description='dbInstanceId'),
  key: string(name='Key', description='key'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  DBClusterId?: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBNodePerformanceResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBNodeId: string(name='DBNodeId', description='data.dbInstanceId'),
  engine: string(name='Engine', description='data.engine'),
  DBType: string(name='DBType', description='data.dbType'),
  DBVersion: string(name='DBVersion', description='data.dbVersion'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  performanceKeys: {
    performanceItem: [
      {
        metricName: string(name='MetricName', description='metricName'),
        measurement: string(name='Measurement', description='measurement'),
        points: {
          performanceItemValue: [
            {
              value: string(name='Value', description='value'),
              timestamp: long(name='Timestamp', description='timestamp'),
            }
          ](name='PerformanceItemValue', description='PerformanceItemValue'),
        }(name='Points', description='points'),
      }
    ](name='PerformanceItem', description='PerformanceItem'),
  }(name='PerformanceKeys', description='data.performanceKeys'),
}

async function describeDBNodePerformanceWithOptions(request: DescribeDBNodePerformanceRequest, runtime: Util.RuntimeOptions): DescribeDBNodePerformanceResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBNodePerformance', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBNodePerformance(request: DescribeDBNodePerformanceRequest): DescribeDBNodePerformanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBNodePerformanceWithOptions(request, runtime);
}

model ModifyDBClusterAccessWhitelistRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  securityIps?: string(name='SecurityIps', description='securityIps'),
  DBClusterIPArrayName?: string(name='DBClusterIPArrayName', description='groupName'),
  DBClusterIPArrayAttribute?: string(name='DBClusterIPArrayAttribute', description='groupAttribute'),
  whiteListType?: string(name='WhiteListType', description='whitelistType'),
  securityGroupIds?: string(name='SecurityGroupIds', description='securityGroupIds'),
  modifyMode?: string(name='ModifyMode', description='modifyMode'),
}

model ModifyDBClusterAccessWhitelistResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterAccessWhitelistWithOptions(request: ModifyDBClusterAccessWhitelistRequest, runtime: Util.RuntimeOptions): ModifyDBClusterAccessWhitelistResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterAccessWhitelist', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterAccessWhitelist(request: ModifyDBClusterAccessWhitelistRequest): ModifyDBClusterAccessWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterAccessWhitelistWithOptions(request, runtime);
}

model DescribeDBClusterAccessWhitelistRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterAccessWhitelistResponse = {
  requestId: string(name='RequestId', description='requestId'),
  items: {
    DBClusterIPArray: [
      {
        DBClusterIPArrayName: string(name='DBClusterIPArrayName', description='groupName'),
        DBClusterIPArrayAttribute: string(name='DBClusterIPArrayAttribute', description='groupTag'),
        securityIps: string(name='SecurityIps', description='securityIPList'),
      }
    ](name='DBClusterIPArray', description='DBClusterIPArray'),
  }(name='Items', description='data.groupItems'),
  DBClusterSecurityGroups: {
    DBClusterSecurityGroup: [
      {
        securityGroupId: string(name='SecurityGroupId', description='securityGroupId'),
        securityGroupName: string(name='SecurityGroupName', description='securityGroupName'),
      }
    ](name='DBClusterSecurityGroup', description='DBClusterSecurityGroup'),
  }(name='DBClusterSecurityGroups', description='data.securityGroupRel'),
}

async function describeDBClusterAccessWhitelistWithOptions(request: DescribeDBClusterAccessWhitelistRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAccessWhitelistResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAccessWhitelist', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterAccessWhitelist(request: DescribeDBClusterAccessWhitelistRequest): DescribeDBClusterAccessWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAccessWhitelistWithOptions(request, runtime);
}

model ModifyDBClusterMaintainTimeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  maintainTime: string(name='MaintainTime', description='maintainTime'),
}

model ModifyDBClusterMaintainTimeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterMaintainTimeWithOptions(request: ModifyDBClusterMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyDBClusterMaintainTimeResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterMaintainTime', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterMaintainTime(request: ModifyDBClusterMaintainTimeRequest): ModifyDBClusterMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterMaintainTimeWithOptions(request, runtime);
}

model RevokeAccountPrivilegeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  DBName: string(name='DBName', description='dbName'),
}

model RevokeAccountPrivilegeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function revokeAccountPrivilegeWithOptions(request: RevokeAccountPrivilegeRequest, runtime: Util.RuntimeOptions): RevokeAccountPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('RevokeAccountPrivilege', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function revokeAccountPrivilege(request: RevokeAccountPrivilegeRequest): RevokeAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeAccountPrivilegeWithOptions(request, runtime);
}

model ResetAccountRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
}

model ResetAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function resetAccountWithOptions(request: ResetAccountRequest, runtime: Util.RuntimeOptions): ResetAccountResponse {
  Util.validateModel(request);
  return doRequest('ResetAccount', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function resetAccount(request: ResetAccountRequest): ResetAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAccountWithOptions(request, runtime);
}

model GrantAccountPrivilegeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  DBName: string(name='DBName', description='dbName'),
  accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
}

model GrantAccountPrivilegeResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function grantAccountPrivilegeWithOptions(request: GrantAccountPrivilegeRequest, runtime: Util.RuntimeOptions): GrantAccountPrivilegeResponse {
  Util.validateModel(request);
  return doRequest('GrantAccountPrivilege', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function grantAccountPrivilege(request: GrantAccountPrivilegeRequest): GrantAccountPrivilegeResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantAccountPrivilegeWithOptions(request, runtime);
}

model DescribeDatabasesRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBName?: string(name='DBName', description='dbName'),
}

model DescribeDatabasesResponse = {
  requestId: string(name='RequestId', description='requestId'),
  databases: {
    database: [
      {
        DBName: string(name='DBName', description='dbName'),
        DBStatus: string(name='DBStatus', description='dbStatus'),
        DBDescription: string(name='DBDescription', description='dbDescription'),
        characterSetName: string(name='CharacterSetName', description='characterSetName'),
        engine: string(name='Engine', description='engine'),
        accounts: {
          account: [
            {
              accountName: string(name='AccountName', description='accountName'),
              accountStatus: string(name='AccountStatus', description='accountStatus'),
              accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
              privilegeStatus: string(name='PrivilegeStatus', description='privilegeStatus'),
            }
          ](name='Account', description='Account'),
        }(name='Accounts', description='accounts'),
      }
    ](name='Database', description='Database'),
  }(name='Databases', description='data.databases'),
}

async function describeDatabasesWithOptions(request: DescribeDatabasesRequest, runtime: Util.RuntimeOptions): DescribeDatabasesResponse {
  Util.validateModel(request);
  return doRequest('DescribeDatabases', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDatabases(request: DescribeDatabasesRequest): DescribeDatabasesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDatabasesWithOptions(request, runtime);
}

model DeleteDatabaseRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBName: string(name='DBName', description='dbName'),
}

model DeleteDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDatabaseWithOptions(request: DeleteDatabaseRequest, runtime: Util.RuntimeOptions): DeleteDatabaseResponse {
  Util.validateModel(request);
  return doRequest('DeleteDatabase', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteDatabase(request: DeleteDatabaseRequest): DeleteDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDatabaseWithOptions(request, runtime);
}

model DeleteAccountRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
}

model DeleteAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteAccountWithOptions(request: DeleteAccountRequest, runtime: Util.RuntimeOptions): DeleteAccountResponse {
  Util.validateModel(request);
  return doRequest('DeleteAccount', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteAccount(request: DeleteAccountRequest): DeleteAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAccountWithOptions(request, runtime);
}

model CreateDatabaseRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBName: string(name='DBName', description='dbName'),
  characterSetName: string(name='CharacterSetName', description='characterSetName'),
  DBDescription?: string(name='DBDescription', description='dbDescription'),
  accountName?: string(name='AccountName', description='accountName'),
  accountPrivilege?: string(name='AccountPrivilege', description='accountPrivilege'),
  collate?: string(name='Collate', description='collate'),
  ctype?: string(name='Ctype', description='ctype'),
}

model CreateDatabaseResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createDatabaseWithOptions(request: CreateDatabaseRequest, runtime: Util.RuntimeOptions): CreateDatabaseResponse {
  Util.validateModel(request);
  return doRequest('CreateDatabase', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createDatabase(request: CreateDatabaseRequest): CreateDatabaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDatabaseWithOptions(request, runtime);
}

model DeleteBackupRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  backupId: string(name='BackupId', description='backupId'),
}

model DeleteBackupResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteBackupWithOptions(request: DeleteBackupRequest, runtime: Util.RuntimeOptions): DeleteBackupResponse {
  Util.validateModel(request);
  return doRequest('DeleteBackup', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteBackup(request: DeleteBackupRequest): DeleteBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupWithOptions(request, runtime);
}

model DescribeSlowLogsRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterId: string(name='DBClusterId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  DBName?: string(name='DBName', description='dbName'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
}

model DescribeSlowLogsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbInstanceName'),
  startTime: string(name='StartTime', description='data.startTime'),
  endTime: string(name='EndTime', description='data.endTime'),
  engine: string(name='Engine', description='data.engine'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.sqlItemsNumbers'),
  items: {
    SQLSlowLog: [
      {
        DBNodeId: string(name='DBNodeId', description='dbNodeId'),
        parseMaxRowCount: long(name='ParseMaxRowCount', description='parseMaxRowNumbers'),
        totalLockTimes: long(name='TotalLockTimes', description='totalLockTime'),
        DBName: string(name='DBName', description='dbName'),
        maxExecutionTime: long(name='MaxExecutionTime', description='maxQueryTime'),
        SQLHASH: string(name='SQLHASH', description='sqlhash'),
        SQLText: string(name='SQLText', description='sqlText'),
        createTime: string(name='CreateTime', description='createTime'),
        totalExecutionTimes: long(name='TotalExecutionTimes', description='totalQueryTime'),
        returnTotalRowCounts: long(name='ReturnTotalRowCounts', description='returnTotalItemNumbers'),
        totalExecutionCounts: long(name='TotalExecutionCounts', description='totalNumberOfExecution'),
        maxLockTime: long(name='MaxLockTime', description='maxlockTime'),
        returnMaxRowCount: long(name='ReturnMaxRowCount', description='returnMaxItemNumbers'),
        parseTotalRowCounts: long(name='ParseTotalRowCounts', description='parseTotalRowNumbers'),
      }
    ](name='SQLSlowLog', description='SQLSlowLog'),
  }(name='Items', description='data.sqls'),
}

async function describeSlowLogsWithOptions(request: DescribeSlowLogsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogs', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeSlowLogs(request: DescribeSlowLogsRequest): DescribeSlowLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogsWithOptions(request, runtime);
}

model DescribeSlowLogRecordsRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterId: string(name='DBClusterId', description='dbInstanceId'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  DBName?: string(name='DBName', description='dbName'),
  pageSize?: integer(name='PageSize', description='maxRecordsPerPage'),
  pageNumber?: integer(name='PageNumber', description='pageNumbers'),
  SQLHASH?: string(name='SQLHASH', description='sqlhash'),
}

model DescribeSlowLogRecordsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbInstanceName'),
  engine: string(name='Engine', description='data.engine'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: integer(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: integer(name='PageRecordCount', description='data.sqlItemsNumbers'),
  items: {
    SQLSlowRecord: [
      {
        hostAddress: string(name='HostAddress', description='hostAddress'),
        DBName: string(name='DBName', description='dbName'),
        SQLText: string(name='SQLText', description='sqlText'),
        queryTimes: long(name='QueryTimes', description='queryTime'),
        lockTimes: long(name='LockTimes', description='lockTime'),
        parseRowCounts: long(name='ParseRowCounts', description='parseRowNumbers'),
        returnRowCounts: long(name='ReturnRowCounts', description='returnItemNumbers'),
        executionStartTime: string(name='ExecutionStartTime', description='queryStartTime'),
        DBNodeId: string(name='DBNodeId', description='dbNodeId'),
      }
    ](name='SQLSlowRecord', description='SQLSlowRecord'),
  }(name='Items', description='data.sqls'),
}

async function describeSlowLogRecordsWithOptions(request: DescribeSlowLogRecordsRequest, runtime: Util.RuntimeOptions): DescribeSlowLogRecordsResponse {
  Util.validateModel(request);
  return doRequest('DescribeSlowLogRecords', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeSlowLogRecords(request: DescribeSlowLogRecordsRequest): DescribeSlowLogRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlowLogRecordsWithOptions(request, runtime);
}

model FailoverDBClusterRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  targetDBNodeId?: string(name='TargetDBNodeId', description='dbInstanceId'),
  clientToken?: string(name='ClientToken', description='clientToken'),
}

model FailoverDBClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function failoverDBClusterWithOptions(request: FailoverDBClusterRequest, runtime: Util.RuntimeOptions): FailoverDBClusterResponse {
  Util.validateModel(request);
  return doRequest('FailoverDBCluster', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function failoverDBCluster(request: FailoverDBClusterRequest): FailoverDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return failoverDBClusterWithOptions(request, runtime);
}

model ModifyDBClusterDescriptionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
}

model ModifyDBClusterDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyDBClusterDescriptionWithOptions(request: ModifyDBClusterDescriptionRequest, runtime: Util.RuntimeOptions): ModifyDBClusterDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyDBClusterDescription', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyDBClusterDescription(request: ModifyDBClusterDescriptionRequest): ModifyDBClusterDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBClusterDescriptionWithOptions(request, runtime);
}

model ModifyAccountDescriptionRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountDescription: string(name='AccountDescription', description='accountDescription'),
}

model ModifyAccountDescriptionResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyAccountDescriptionWithOptions(request: ModifyAccountDescriptionRequest, runtime: Util.RuntimeOptions): ModifyAccountDescriptionResponse {
  Util.validateModel(request);
  return doRequest('ModifyAccountDescription', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyAccountDescription(request: ModifyAccountDescriptionRequest): ModifyAccountDescriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountDescriptionWithOptions(request, runtime);
}

model DescribeRegionsRequest = {
}

model DescribeRegionsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regions: {
    region: [
      {
        regionId: string(name='RegionId', description='regionId'),
        zones: {
          zone: [
            {
              zoneId: string(name='ZoneId', description='zoneId'),
              vpcEnabled: boolean(name='VpcEnabled', description='vpcEnabled'),
            }
          ](name='Zone', description='Zone'),
        }(name='Zones', description='zones'),
      }
    ](name='Region', description='Region'),
  }(name='Regions', description='data'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  return doRequest('DescribeRegions', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeAccountsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName?: string(name='AccountName', description='accountName'),
}

model DescribeAccountsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  accounts: [
    {
      accountName: string(name='AccountName', description='accountName'),
      accountStatus: string(name='AccountStatus', description='accountStatus'),
      accountDescription: string(name='AccountDescription', description='accountDescription'),
      accountType: string(name='AccountType', description='accountType'),
      accountLockState: string(name='AccountLockState', description='accountLockState'),
      privilegeExceeded: string(name='PrivilegeExceeded', description='privExceeded'),
      accountPasswordValidTime: string(name='AccountPasswordValidTime', description='accountPwdValidTime'),
      databasePrivileges: [
        {
          DBName: string(name='DBName', description='dbName'),
          accountPrivilege: string(name='AccountPrivilege', description='accountPrivilege'),
        }
      ](name='DatabasePrivileges', description='databasePrivileges'),
    }
  ](name='Accounts', description='data.accounts'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  return doRequest('DescribeAccounts', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DeleteDBClusterRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion', description='backupRetentionPolicyOnClusterDeletion'),
}

model DeleteDBClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function deleteDBClusterWithOptions(request: DeleteDBClusterRequest, runtime: Util.RuntimeOptions): DeleteDBClusterResponse {
  Util.validateModel(request);
  return doRequest('DeleteDBCluster', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function deleteDBCluster(request: DeleteDBClusterRequest): DeleteDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDBClusterWithOptions(request, runtime);
}

model CreateDBClusterRequest = {
  zoneId?: string(name='ZoneId', description='zoneId'),
  DBType: string(name='DBType', description='dbType'),
  DBVersion: string(name='DBVersion', description='dbVersion'),
  DBNodeClass: string(name='DBNodeClass', description='dbInstanceClass'),
  clusterNetworkType?: string(name='ClusterNetworkType', description='clusterNetworkType'),
  DBClusterDescription?: string(name='DBClusterDescription', description='dbClusterDescription'),
  payType: string(name='PayType', description='payType'),
  autoRenew?: boolean(name='AutoRenew', description='autoRenew'),
  period?: string(name='Period', description='period'),
  usedTime?: string(name='UsedTime', description='usedTime'),
  VPCId?: string(name='VPCId', description='vpcId'),
  vSwitchId?: string(name='VSwitchId', description='vswitchId'),
  creationOption?: string(name='CreationOption', description='creationOption'),
  sourceResourceId?: string(name='SourceResourceId', description='sourceResourceId'),
  cloneDataPoint?: string(name='CloneDataPoint', description='cloneDataPoint'),
  clientToken?: string(name='ClientToken', description='token'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
  securityIPList?: string(name='SecurityIPList', description='securityIPList'),
  TDEStatus?: boolean(name='TDEStatus', description='tdeStatus'),
  GDNId?: string(name='GDNId', description='gdnId'),
  creationCategory?: string(name='CreationCategory', description='creationCategory'),
}

model CreateDBClusterResponse = {
  requestId: string(name='RequestId', description='requestId'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  orderId: string(name='OrderId', description='data.orderId'),
  resourceGroupId: string(name='ResourceGroupId', description='data.resourceGroupId'),
}

async function createDBClusterWithOptions(request: CreateDBClusterRequest, runtime: Util.RuntimeOptions): CreateDBClusterResponse {
  Util.validateModel(request);
  return doRequest('CreateDBCluster', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createDBCluster(request: CreateDBClusterRequest): CreateDBClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDBClusterWithOptions(request, runtime);
}

model CreateBackupRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model CreateBackupResponse = {
  requestId: string(name='RequestId', description='requestId'),
  backupJobId: string(name='BackupJobId', description='data.backupjobId'),
}

async function createBackupWithOptions(request: CreateBackupRequest, runtime: Util.RuntimeOptions): CreateBackupResponse {
  Util.validateModel(request);
  return doRequest('CreateBackup', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createBackup(request: CreateBackupRequest): CreateBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupWithOptions(request, runtime);
}

model CreateAccountRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  accountName: string(name='AccountName', description='accountName'),
  accountPassword: string(name='AccountPassword', description='accountPassword'),
  accountType?: string(name='AccountType', description='accountType'),
  accountDescription?: string(name='AccountDescription', description='accountDescription'),
  DBName?: string(name='DBName', description='dbName'),
  accountPrivilege?: string(name='AccountPrivilege', description='accountPrivilege'),
}

model CreateAccountResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function createAccountWithOptions(request: CreateAccountRequest, runtime: Util.RuntimeOptions): CreateAccountResponse {
  Util.validateModel(request);
  return doRequest('CreateAccount', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function createAccount(request: CreateAccountRequest): CreateAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAccountWithOptions(request, runtime);
}

model DescribeBackupsRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  backupId?: string(name='BackupId', description='backupId'),
  backupStatus?: string(name='BackupStatus', description='backupStatus'),
  backupMode?: string(name='BackupMode', description='backupMode'),
  startTime: string(name='StartTime', description='startTime'),
  endTime: string(name='EndTime', description='endTime'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
}

model DescribeBackupsResponse = {
  requestId: string(name='RequestId', description='requestId'),
  totalRecordCount: string(name='TotalRecordCount', description='data.totalRecords'),
  pageNumber: string(name='PageNumber', description='data.pageNumbers'),
  pageRecordCount: string(name='PageRecordCount', description='data.backupsetNumbers'),
  items: {
    backup: [
      {
        backupId: string(name='BackupId', description='backupSetId'),
        DBClusterId: string(name='DBClusterId', description='dbInstanceId'),
        backupStatus: string(name='BackupStatus', description='backupSetStatus'),
        backupStartTime: string(name='BackupStartTime', description='backupStartTime'),
        backupEndTime: string(name='BackupEndTime', description='backupEndTime'),
        backupType: string(name='BackupType', description='backupType'),
        backupMode: string(name='BackupMode', description='jobMode'),
        backupMethod: string(name='BackupMethod', description='backupMethod'),
        storeStatus: string(name='StoreStatus', description='storeStatus'),
        backupSetSize: string(name='BackupSetSize', description='backupSetSize'),
        consistentTime: string(name='ConsistentTime', description='consistentTime'),
        backupsLevel: string(name='BackupsLevel', description='backupsLevel'),
        isAvail: string(name='IsAvail', description='isAvail'),
      }
    ](name='Backup', description='Backup'),
  }(name='Items', description='data.backupsetItems'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackups', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model ModifyBackupPolicyRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
  preferredBackupTime?: string(name='PreferredBackupTime', description='preferredBackupTime'),
  preferredBackupPeriod?: string(name='PreferredBackupPeriod', description='preferredBackupPeriod'),
  dataLevel1BackupRetentionPeriod?: string(name='DataLevel1BackupRetentionPeriod', description='dataLevel1BackupRetentionPeriod'),
  dataLevel2BackupRetentionPeriod?: string(name='DataLevel2BackupRetentionPeriod', description='dataLevel2BackupRetentionPeriod'),
  backupRetentionPolicyOnClusterDeletion?: string(name='BackupRetentionPolicyOnClusterDeletion', description='backupRetentionPolicyOnClusterDeletion'),
}

model ModifyBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
}

async function modifyBackupPolicyWithOptions(request: ModifyBackupPolicyRequest, runtime: Util.RuntimeOptions): ModifyBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('ModifyBackupPolicy', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function modifyBackupPolicy(request: ModifyBackupPolicyRequest): ModifyBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPolicyWithOptions(request, runtime);
}

model DescribeBackupPolicyRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeBackupPolicyResponse = {
  requestId: string(name='RequestId', description='requestId'),
  backupRetentionPeriod: integer(name='BackupRetentionPeriod', description='data.backupRetentionPeriod'),
  preferredNextBackupTime: string(name='PreferredNextBackupTime', description='data.preferredNextBackupTime'),
  preferredBackupTime: string(name='PreferredBackupTime', description='data.preferredBackupTime'),
  preferredBackupPeriod: string(name='PreferredBackupPeriod', description='data.preferredBackupPeriod'),
  dataLevel1BackupRetentionPeriod: string(name='DataLevel1BackupRetentionPeriod', description='data.dataLevel1BackupRetentionPeriod'),
  dataLevel2BackupRetentionPeriod: string(name='DataLevel2BackupRetentionPeriod', description='data.dataLevel2BackupRetentionPeriod'),
  backupRetentionPolicyOnClusterDeletion: string(name='BackupRetentionPolicyOnClusterDeletion', description='data.backupRetentionPolicyOnClusterDeletion'),
}

async function describeBackupPolicyWithOptions(request: DescribeBackupPolicyRequest, runtime: Util.RuntimeOptions): DescribeBackupPolicyResponse {
  Util.validateModel(request);
  return doRequest('DescribeBackupPolicy', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeBackupPolicy(request: DescribeBackupPolicyRequest): DescribeBackupPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPolicyWithOptions(request, runtime);
}

model DescribeDBClustersRequest = {
  regionId: string(name='RegionId', description='regionId'),
  DBClusterIds?: string(name='DBClusterIds', description='dbClusterIds'),
  DBClusterDescription?: string(name='DBClusterDescription', description='dbClusterDescription'),
  DBClusterStatus?: string(name='DBClusterStatus', description='dbClusterStatus'),
  DBType?: string(name='DBType', description='dbType'),
  tag?: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tag', description='tags'),
  pageSize?: integer(name='PageSize', description='pageSize'),
  pageNumber?: integer(name='PageNumber', description='pageNumber'),
  resourceGroupId?: string(name='ResourceGroupId', description='resourceGroupId'),
}

model DescribeDBClustersResponse = {
  requestId: string(name='RequestId', description='requestId'),
  pageNumber: integer(name='PageNumber', description='data.pageNumber'),
  totalRecordCount: integer(name='TotalRecordCount', description='data.totalRecordCount'),
  pageRecordCount: integer(name='PageRecordCount', description='data.pageRecordCount'),
  items: {
    DBCluster: [
      {
        DBClusterId: string(name='DBClusterId', description='dbClusterId'),
        DBClusterDescription: string(name='DBClusterDescription', description='dbClusterDescription'),
        payType: string(name='PayType', description='payType'),
        DBClusterNetworkType: string(name='DBClusterNetworkType', description='clusterNetworkType'),
        regionId: string(name='RegionId', description='regionId'),
        zoneId: string(name='ZoneId', description='zoneId'),
        expireTime: string(name='ExpireTime', description='expireTime'),
        expired: string(name='Expired', description='expired'),
        DBClusterStatus: string(name='DBClusterStatus', description='dbClusterStatus'),
        engine: string(name='Engine', description='engine'),
        DBType: string(name='DBType', description='dbType'),
        DBVersion: string(name='DBVersion', description='dbVersion'),
        lockMode: string(name='LockMode', description='lockMode'),
        deletionLock: integer(name='DeletionLock', description='deletionLock'),
        createTime: string(name='CreateTime', description='gmtCreated'),
        vpcId: string(name='VpcId', description='vpcId'),
        DBNodeNumber: integer(name='DBNodeNumber', description='instanceNum'),
        DBNodeClass: string(name='DBNodeClass', description='rwInstanceClass'),
        storageUsed: long(name='StorageUsed', description='usedStorage'),
        resourceGroupId: string(name='ResourceGroupId', description='resourceGroupId'),
        DBNodes: {
          DBNode: [
            {
              DBNodeId: string(name='DBNodeId', description='dbInstanceId'),
              DBNodeClass: string(name='DBNodeClass', description='dbInstanceClass'),
              DBNodeRole: string(name='DBNodeRole', description='dbInstanceType'),
              regionId: string(name='RegionId', description='regionId'),
              zoneId: string(name='ZoneId', description='zoneId'),
            }
          ](name='DBNode', description='DBNode'),
        }(name='DBNodes', description='dbInstanceList'),
        tags: {
          tag: [
            {
              key: string(name='Key', description='key'),
              value: string(name='Value', description='value'),
            }
          ](name='Tag', description='Tag'),
        }(name='Tags', description='tags'),
      }
    ](name='DBCluster', description='DBCluster'),
  }(name='Items', description='data.items'),
}

async function describeDBClustersWithOptions(request: DescribeDBClustersRequest, runtime: Util.RuntimeOptions): DescribeDBClustersResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusters', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusters(request: DescribeDBClustersRequest): DescribeDBClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClustersWithOptions(request, runtime);
}

model DescribeDBClusterAttributeRequest = {
  DBClusterId: string(name='DBClusterId', description='dbClusterId'),
}

model DescribeDBClusterAttributeResponse = {
  requestId: string(name='RequestId', description='requestId'),
  regionId: string(name='RegionId', description='data.regionId'),
  DBClusterNetworkType: string(name='DBClusterNetworkType', description='data.clusterNetworkType'),
  VPCId: string(name='VPCId', description='data.vpcId'),
  vSwitchId: string(name='VSwitchId', description='data.vswitchId'),
  payType: string(name='PayType', description='data.payType'),
  DBClusterId: string(name='DBClusterId', description='data.dbClusterId'),
  DBClusterStatus: string(name='DBClusterStatus', description='data.dbClusterStatusDesc'),
  DBClusterDescription: string(name='DBClusterDescription', description='data.dbClusterDescription'),
  engine: string(name='Engine', description='data.engine'),
  DBType: string(name='DBType', description='data.dbType'),
  DBVersion: string(name='DBVersion', description='data.dbVersion'),
  lockMode: string(name='LockMode', description='data.lockMode'),
  deletionLock: integer(name='DeletionLock', description='data.deletionLock'),
  creationTime: string(name='CreationTime', description='data.createTime'),
  expireTime: string(name='ExpireTime', description='data.expireTime'),
  expired: string(name='Expired', description='data.expired'),
  maintainTime: string(name='MaintainTime', description='data.maintainTime'),
  storageUsed: long(name='StorageUsed', description='data.usedStorage'),
  storageMax: long(name='StorageMax', description='data.maxStorage'),
  zoneIds: string(name='ZoneIds', description='data.dataZoneIds'),
  SQLSize: long(name='SQLSize', description='data.sqlSize'),
  isLatestVersion: boolean(name='IsLatestVersion', description='data.isLatestVersion'),
  resourceGroupId: string(name='ResourceGroupId', description='data.resourceGroupId'),
  dataLevel1BackupChainSize: long(name='DataLevel1BackupChainSize', description='data.snapshotSize'),
  tags: [
    {
      key: string(name='Key', description='key'),
      value: string(name='Value', description='value'),
    }
  ](name='Tags', description='data.tags'),
  DBNodes: [
    {
      DBNodeId: string(name='DBNodeId', description='dbInstanceId'),
      zoneId: string(name='ZoneId', description='zoneId'),
      DBNodeStatus: string(name='DBNodeStatus', description='dbInstanceStatus'),
      creationTime: string(name='CreationTime', description='dbInstanceCreateTime'),
      DBNodeClass: string(name='DBNodeClass', description='dbInstanceClass'),
      DBNodeRole: string(name='DBNodeRole', description='dbNodeRole'),
      maxIOPS: integer(name='MaxIOPS', description='maxIOPS'),
      maxConnections: integer(name='MaxConnections', description='maxConnections'),
      failoverPriority: integer(name='FailoverPriority', description='failoverPriority'),
    }
  ](name='DBNodes', description='data.items'),
}

async function describeDBClusterAttributeWithOptions(request: DescribeDBClusterAttributeRequest, runtime: Util.RuntimeOptions): DescribeDBClusterAttributeResponse {
  Util.validateModel(request);
  return doRequest('DescribeDBClusterAttribute', 'HTTPS', 'POST', '2017-08-01', 'AK', null, request, runtime);
}

async function describeDBClusterAttribute(request: DescribeDBClusterAttributeRequest): DescribeDBClusterAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDBClusterAttributeWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
