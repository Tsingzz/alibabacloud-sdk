import Util;
import RPC;
import EndpointUtil;

extends RPC;

init(config: RPC.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('imageprocess', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

model DetectLungNoduleRequest = {
  URLList: [
    {
      URL: string(name='URL', description='url'),
    }
  ](name='URLList', description='urlList'),
}

model DetectLungNoduleResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    series: [
      {
        seriesInstanceUid: string(name='SeriesInstanceUid', description='SeriesInstanceUid'),
        elements: [
          {
            category: string(name='Category', description='Category'),
            confidence: float(name='Confidence', description='Confidence'),
            diameter: float(name='Diameter', description='Diameter'),
            lobe: string(name='Lobe', description='Lobe'),
            lung: string(name='Lung', description='Lung'),
            x: float(name='X', description='X'),
            z: float(name='Z', description='Z'),
            y: float(name='Y', description='Y'),
          }
        ](name='Elements', description='Elements'),
      }
    ](name='Series', description='Series'),
  }(name='Data', description='data'),
}

async function detectLungNoduleWithOptions(request: DetectLungNoduleRequest, runtime: Util.RuntimeOptions): DetectLungNoduleResponse {
  Util.validateModel(request);
  return doRequest('DetectLungNodule', 'HTTPS', 'POST', '2020-03-20', 'AK', null, request, runtime);
}

async function detectLungNodule(request: DetectLungNoduleRequest): DetectLungNoduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectLungNoduleWithOptions(request, runtime);
}

model DetectCovid19CadRequest = {
  URLList: [
    {
      URL: string(name='URL', description='url'),
    }
  ](name='URLList', description='urlList'),
}

model DetectCovid19CadResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    newProbability: string(name='NewProbability', description='NewProbability'),
    normalProbability: string(name='NormalProbability', description='NormalProbability'),
    otherProbability: string(name='OtherProbability', description='OtherProbability'),
    lesionRatio: string(name='LesionRatio', description='LesionRatio'),
    mask: string(name='Mask', description='Mask'),
  }(name='Data', description='data'),
}

async function detectCovid19CadWithOptions(request: DetectCovid19CadRequest, runtime: Util.RuntimeOptions): DetectCovid19CadResponse {
  Util.validateModel(request);
  return doRequest('DetectCovid19Cad', 'HTTPS', 'POST', '2020-03-20', 'AK', null, request, runtime);
}

async function detectCovid19Cad(request: DetectCovid19CadRequest): DetectCovid19CadResponse {
  var runtime = new Util.RuntimeOptions{};
  return detectCovid19CadWithOptions(request, runtime);
}

model GetAsyncJobResultRequest = {
  jobId: string(name='JobId', description='jobId'),
}

model GetAsyncJobResultResponse = {
  requestId: string(name='RequestId', description='requestId'),
  data: {
    jobId: string(name='JobId', description='jobId'),
    status: string(name='Status', description='status'),
    result: string(name='Result', description='result'),
    errorCode: string(name='ErrorCode', description='errorCode'),
    errorMessage: string(name='ErrorMessage', description='errorMessage'),
  }(name='Data', description='data'),
}

async function getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: Util.RuntimeOptions): GetAsyncJobResultResponse {
  Util.validateModel(request);
  return doRequest('GetAsyncJobResult', 'HTTPS', 'POST', '2020-03-20', 'AK', null, request, runtime);
}

async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncJobResultWithOptions(request, runtime);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
